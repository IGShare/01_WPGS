
IGS_WSCM_V_0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000210  00800100  00001fc6  0000205a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d58  00800310  00800310  0000226a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000226a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002da9  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa9  00000000  00000000  000051d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000186d  00000000  00000000  00005c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000564  00000000  00000000  000074f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb1  00000000  00000000  00007a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b3a  00000000  00000000  00008605  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000b13f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a7 c0       	rjmp	.+334    	; 0x150 <__ctors_end>
       2:	00 00       	nop
       4:	c3 c0       	rjmp	.+390    	; 0x18c <__bad_interrupt>
       6:	00 00       	nop
       8:	c1 c0       	rjmp	.+386    	; 0x18c <__bad_interrupt>
       a:	00 00       	nop
       c:	bf c0       	rjmp	.+382    	; 0x18c <__bad_interrupt>
       e:	00 00       	nop
      10:	bd c0       	rjmp	.+378    	; 0x18c <__bad_interrupt>
      12:	00 00       	nop
      14:	bb c0       	rjmp	.+374    	; 0x18c <__bad_interrupt>
      16:	00 00       	nop
      18:	b9 c0       	rjmp	.+370    	; 0x18c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__vector_7>
      20:	b5 c0       	rjmp	.+362    	; 0x18c <__bad_interrupt>
      22:	00 00       	nop
      24:	b3 c0       	rjmp	.+358    	; 0x18c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_10>
      2c:	af c0       	rjmp	.+350    	; 0x18c <__bad_interrupt>
      2e:	00 00       	nop
      30:	ad c0       	rjmp	.+346    	; 0x18c <__bad_interrupt>
      32:	00 00       	nop
      34:	ab c0       	rjmp	.+342    	; 0x18c <__bad_interrupt>
      36:	00 00       	nop
      38:	a9 c0       	rjmp	.+338    	; 0x18c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a7 c0       	rjmp	.+334    	; 0x18c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__vector_16>
      44:	a3 c0       	rjmp	.+326    	; 0x18c <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_18>
      4c:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_19>
      50:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__vector_20>
      54:	9b c0       	rjmp	.+310    	; 0x18c <__bad_interrupt>
      56:	00 00       	nop
      58:	99 c0       	rjmp	.+306    	; 0x18c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	97 c0       	rjmp	.+302    	; 0x18c <__bad_interrupt>
      5e:	00 00       	nop
      60:	95 c0       	rjmp	.+298    	; 0x18c <__bad_interrupt>
      62:	00 00       	nop
      64:	93 c0       	rjmp	.+294    	; 0x18c <__bad_interrupt>
      66:	00 00       	nop
      68:	91 c0       	rjmp	.+290    	; 0x18c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8f c0       	rjmp	.+286    	; 0x18c <__bad_interrupt>
      6e:	00 00       	nop
      70:	8d c0       	rjmp	.+282    	; 0x18c <__bad_interrupt>
      72:	00 00       	nop
      74:	8b c0       	rjmp	.+278    	; 0x18c <__bad_interrupt>
      76:	00 00       	nop
      78:	89 c0       	rjmp	.+274    	; 0x18c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	87 c0       	rjmp	.+270    	; 0x18c <__bad_interrupt>
      7e:	00 00       	nop
      80:	85 c0       	rjmp	.+266    	; 0x18c <__bad_interrupt>
      82:	00 00       	nop
      84:	83 c0       	rjmp	.+262    	; 0x18c <__bad_interrupt>
      86:	00 00       	nop
      88:	81 c0       	rjmp	.+258    	; 0x18c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3e 0b       	sbc	r19, r30
      8e:	48 0b       	sbc	r20, r24
      90:	66 0b       	sbc	r22, r22
      92:	66 0b       	sbc	r22, r22
      94:	66 0b       	sbc	r22, r22
      96:	66 0b       	sbc	r22, r22
      98:	66 0b       	sbc	r22, r22
      9a:	66 0b       	sbc	r22, r22
      9c:	66 0b       	sbc	r22, r22
      9e:	66 0b       	sbc	r22, r22
      a0:	66 0b       	sbc	r22, r22
      a2:	66 0b       	sbc	r22, r22
      a4:	66 0b       	sbc	r22, r22
      a6:	66 0b       	sbc	r22, r22
      a8:	66 0b       	sbc	r22, r22
      aa:	66 0b       	sbc	r22, r22
      ac:	66 0b       	sbc	r22, r22
      ae:	66 0b       	sbc	r22, r22
      b0:	66 0b       	sbc	r22, r22
      b2:	66 0b       	sbc	r22, r22
      b4:	66 0b       	sbc	r22, r22
      b6:	66 0b       	sbc	r22, r22
      b8:	66 0b       	sbc	r22, r22
      ba:	66 0b       	sbc	r22, r22
      bc:	66 0b       	sbc	r22, r22
      be:	66 0b       	sbc	r22, r22
      c0:	66 0b       	sbc	r22, r22
      c2:	66 0b       	sbc	r22, r22
      c4:	66 0b       	sbc	r22, r22
      c6:	66 0b       	sbc	r22, r22
      c8:	66 0b       	sbc	r22, r22
      ca:	66 0b       	sbc	r22, r22
      cc:	ee 0a       	sbc	r14, r30
      ce:	f8 0a       	sbc	r15, r24
      d0:	0c 0b       	sbc	r16, r28
      d2:	16 0b       	sbc	r17, r22
      d4:	20 0b       	sbc	r18, r16
      d6:	02 0b       	sbc	r16, r18
      d8:	2a 0b       	sbc	r18, r26
      da:	34 0b       	sbc	r19, r20
      dc:	66 0b       	sbc	r22, r22
      de:	66 0b       	sbc	r22, r22
      e0:	66 0b       	sbc	r22, r22
      e2:	66 0b       	sbc	r22, r22
      e4:	66 0b       	sbc	r22, r22
      e6:	66 0b       	sbc	r22, r22
      e8:	66 0b       	sbc	r22, r22
      ea:	66 0b       	sbc	r22, r22
      ec:	66 0b       	sbc	r22, r22
      ee:	66 0b       	sbc	r22, r22
      f0:	66 0b       	sbc	r22, r22
      f2:	66 0b       	sbc	r22, r22
      f4:	66 0b       	sbc	r22, r22
      f6:	66 0b       	sbc	r22, r22
      f8:	66 0b       	sbc	r22, r22
      fa:	66 0b       	sbc	r22, r22
      fc:	66 0b       	sbc	r22, r22
      fe:	66 0b       	sbc	r22, r22
     100:	66 0b       	sbc	r22, r22
     102:	66 0b       	sbc	r22, r22
     104:	66 0b       	sbc	r22, r22
     106:	66 0b       	sbc	r22, r22
     108:	66 0b       	sbc	r22, r22
     10a:	66 0b       	sbc	r22, r22
     10c:	66 0b       	sbc	r22, r22
     10e:	66 0b       	sbc	r22, r22
     110:	66 0b       	sbc	r22, r22
     112:	66 0b       	sbc	r22, r22
     114:	66 0b       	sbc	r22, r22
     116:	66 0b       	sbc	r22, r22
     118:	66 0b       	sbc	r22, r22
     11a:	66 0b       	sbc	r22, r22
     11c:	66 0b       	sbc	r22, r22
     11e:	66 0b       	sbc	r22, r22
     120:	66 0b       	sbc	r22, r22
     122:	66 0b       	sbc	r22, r22
     124:	66 0b       	sbc	r22, r22
     126:	66 0b       	sbc	r22, r22
     128:	66 0b       	sbc	r22, r22
     12a:	66 0b       	sbc	r22, r22
     12c:	66 0b       	sbc	r22, r22
     12e:	66 0b       	sbc	r22, r22
     130:	66 0b       	sbc	r22, r22
     132:	66 0b       	sbc	r22, r22
     134:	66 0b       	sbc	r22, r22
     136:	66 0b       	sbc	r22, r22
     138:	66 0b       	sbc	r22, r22
     13a:	66 0b       	sbc	r22, r22
     13c:	66 0b       	sbc	r22, r22
     13e:	66 0b       	sbc	r22, r22
     140:	66 0b       	sbc	r22, r22
     142:	66 0b       	sbc	r22, r22
     144:	66 0b       	sbc	r22, r22
     146:	66 0b       	sbc	r22, r22
     148:	66 0b       	sbc	r22, r22
     14a:	66 0b       	sbc	r22, r22
     14c:	5c 0b       	sbc	r21, r28
     14e:	52 0b       	sbc	r21, r18

00000150 <__ctors_end>:
     150:	11 24       	eor	r1, r1
     152:	1f be       	out	0x3f, r1	; 63
     154:	cf ef       	ldi	r28, 0xFF	; 255
     156:	d0 e1       	ldi	r29, 0x10	; 16
     158:	de bf       	out	0x3e, r29	; 62
     15a:	cd bf       	out	0x3d, r28	; 61

0000015c <__do_copy_data>:
     15c:	13 e0       	ldi	r17, 0x03	; 3
     15e:	a0 e0       	ldi	r26, 0x00	; 0
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	e6 ec       	ldi	r30, 0xC6	; 198
     164:	ff e1       	ldi	r31, 0x1F	; 31
     166:	00 e0       	ldi	r16, 0x00	; 0
     168:	0b bf       	out	0x3b, r16	; 59
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x14>
     16c:	07 90       	elpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	a0 31       	cpi	r26, 0x10	; 16
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0x10>

00000176 <__do_clear_bss>:
     176:	20 e1       	ldi	r18, 0x10	; 16
     178:	a0 e1       	ldi	r26, 0x10	; 16
     17a:	b3 e0       	ldi	r27, 0x03	; 3
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	a8 36       	cpi	r26, 0x68	; 104
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
     186:	93 d7       	rcall	.+3878   	; 0x10ae <main>
     188:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <_exit>

0000018c <__bad_interrupt>:
     18c:	39 cf       	rjmp	.-398    	; 0x0 <__vectors>

0000018e <crcsum>:

void SCMEMF_ReadExtMemTest(uint16_t addr, uint8_t val)
{
	uint8_t ch;
	ch = READ_XMEM_ADDR(addr);
	if(ch == val) PORTB &= ~(1<<PB4);
     18e:	61 15       	cp	r22, r1
     190:	71 05       	cpc	r23, r1
     192:	a1 f0       	breq	.+40     	; 0x1bc <crcsum+0x2e>
     194:	dc 01       	movw	r26, r24
     196:	68 0f       	add	r22, r24
     198:	79 1f       	adc	r23, r25
     19a:	25 2f       	mov	r18, r21
     19c:	33 27       	eor	r19, r19
     19e:	9d 91       	ld	r25, X+
     1a0:	fa 01       	movw	r30, r20
     1a2:	e9 27       	eor	r30, r25
     1a4:	ff 27       	eor	r31, r31
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	e0 5f       	subi	r30, 0xF0	; 240
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	40 81       	ld	r20, Z
     1b0:	51 81       	ldd	r21, Z+1	; 0x01
     1b2:	42 27       	eor	r20, r18
     1b4:	53 27       	eor	r21, r19
     1b6:	a6 17       	cp	r26, r22
     1b8:	b7 07       	cpc	r27, r23
     1ba:	79 f7       	brne	.-34     	; 0x19a <crcsum+0xc>
     1bc:	ca 01       	movw	r24, r20
     1be:	08 95       	ret

000001c0 <SCMTF_PortInit>:
     1c0:	90 e7       	ldi	r25, 0x70	; 112
     1c2:	97 bb       	out	0x17, r25	; 23
     1c4:	88 e1       	ldi	r24, 0x18	; 24
     1c6:	81 bb       	out	0x11, r24	; 17
     1c8:	86 e9       	ldi	r24, 0x96	; 150
     1ca:	82 b9       	out	0x02, r24	; 2
     1cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1d0:	e4 e6       	ldi	r30, 0x64	; 100
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	83 60       	ori	r24, 0x03	; 3
     1d8:	80 83       	st	Z, r24
     1da:	12 ba       	out	0x12, r1	; 18
     1dc:	98 bb       	out	0x18, r25	; 24
     1de:	84 e0       	ldi	r24, 0x04	; 4
     1e0:	83 b9       	out	0x03, r24	; 3
     1e2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1e6:	08 95       	ret

000001e8 <SCMTF_ReadDipSwitchValueMYID>:
     1e8:	e0 b1       	in	r30, 0x00	; 0
     1ea:	e2 95       	swap	r30
     1ec:	ef 70       	andi	r30, 0x0F	; 15
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	e0 50       	subi	r30, 0x00	; 0
     1f2:	ff 4f       	sbci	r31, 0xFF	; 255
     1f4:	80 81       	ld	r24, Z
     1f6:	08 95       	ret

000001f8 <SCMTF_ReadDipSwitchValueMode>:
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	02 99       	sbic	0x00, 2	; 0
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	08 95       	ret

00000200 <SCMTF_ReadDipSwitchValueTest>:
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	01 99       	sbic	0x00, 1	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	08 95       	ret

00000208 <SCMTF_CheckOverCurrent>:
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	0d 9b       	sbis	0x01, 5	; 1
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	08 95       	ret

00000210 <SCM485F_USART0Init>:
     210:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     214:	8c e0       	ldi	r24, 0x0C	; 12
     216:	89 b9       	out	0x09, r24	; 9
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     21e:	88 e9       	ldi	r24, 0x98	; 152
     220:	8a b9       	out	0x0a, r24	; 10
     222:	08 95       	ret

00000224 <SCM485F_RxCompleteTimerInit>:
     224:	13 be       	out	0x33, r1	; 51
     226:	87 b7       	in	r24, 0x37	; 55
     228:	81 60       	ori	r24, 0x01	; 1
     22a:	87 bf       	out	0x37, r24	; 55
     22c:	12 be       	out	0x32, r1	; 50
     22e:	08 95       	ret

00000230 <SCM485F_OneByteWrite_485>:
     230:	fc 01       	movw	r30, r24
     232:	ee 51       	subi	r30, 0x1E	; 30
     234:	fe 4f       	sbci	r31, 0xFE	; 254
     236:	20 81       	ld	r18, Z
     238:	31 81       	ldd	r19, Z+1	; 0x01
     23a:	20 3e       	cpi	r18, 0xE0	; 224
     23c:	31 40       	sbci	r19, 0x01	; 1
     23e:	68 f4       	brcc	.+26     	; 0x25a <SCM485F_OneByteWrite_485+0x2a>
     240:	20 81       	ld	r18, Z
     242:	31 81       	ldd	r19, Z+1	; 0x01
     244:	dc 01       	movw	r26, r24
     246:	a2 0f       	add	r26, r18
     248:	b3 1f       	adc	r27, r19
     24a:	6c 93       	st	X, r22
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	91 83       	std	Z+1, r25	; 0x01
     254:	80 83       	st	Z, r24
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	08 95       	ret
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	08 95       	ret

0000025e <SCM485F_OneByteRead_485>:
     25e:	fc 01       	movw	r30, r24
     260:	ee 51       	subi	r30, 0x1E	; 30
     262:	fe 4f       	sbci	r31, 0xFE	; 254
     264:	40 81       	ld	r20, Z
     266:	51 81       	ldd	r21, Z+1	; 0x01
     268:	32 97       	sbiw	r30, 0x02	; 2
     26a:	20 81       	ld	r18, Z
     26c:	31 81       	ldd	r19, Z+1	; 0x01
     26e:	42 17       	cp	r20, r18
     270:	53 07       	cpc	r21, r19
     272:	70 f4       	brcc	.+28     	; 0x290 <SCM485F_OneByteRead_485+0x32>
     274:	32 96       	adiw	r30, 0x02	; 2
     276:	a0 81       	ld	r26, Z
     278:	b1 81       	ldd	r27, Z+1	; 0x01
     27a:	a8 0f       	add	r26, r24
     27c:	b9 1f       	adc	r27, r25
     27e:	2c 91       	ld	r18, X
     280:	db 01       	movw	r26, r22
     282:	2c 93       	st	X, r18
     284:	20 81       	ld	r18, Z
     286:	31 81       	ldd	r19, Z+1	; 0x01
     288:	2f 5f       	subi	r18, 0xFF	; 255
     28a:	3f 4f       	sbci	r19, 0xFF	; 255
     28c:	31 83       	std	Z+1, r19	; 0x01
     28e:	20 83       	st	Z, r18
     290:	fc 01       	movw	r30, r24
     292:	ee 51       	subi	r30, 0x1E	; 30
     294:	fe 4f       	sbci	r31, 0xFE	; 254
     296:	40 81       	ld	r20, Z
     298:	51 81       	ldd	r21, Z+1	; 0x01
     29a:	32 97       	sbiw	r30, 0x02	; 2
     29c:	20 81       	ld	r18, Z
     29e:	31 81       	ldd	r19, Z+1	; 0x01
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	42 17       	cp	r20, r18
     2a4:	53 07       	cpc	r21, r19
     2a6:	09 f0       	breq	.+2      	; 0x2aa <SCM485F_OneByteRead_485+0x4c>
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret

000002ac <SCM485F_packetBufInit>:
     2ac:	e6 e0       	ldi	r30, 0x06	; 6
     2ae:	fe e0       	ldi	r31, 0x0E	; 14
     2b0:	10 82       	st	Z, r1
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	12 82       	std	Z+2, r1	; 0x02
     2b6:	13 82       	std	Z+3, r1	; 0x03
     2b8:	14 82       	std	Z+4, r1	; 0x04
     2ba:	15 82       	std	Z+5, r1	; 0x05
     2bc:	ee e0       	ldi	r30, 0x0E	; 14
     2be:	fe e0       	ldi	r31, 0x0E	; 14
     2c0:	8e ee       	ldi	r24, 0xEE	; 238
     2c2:	9f e0       	ldi	r25, 0x0F	; 15
     2c4:	11 92       	st	Z+, r1
     2c6:	e8 17       	cp	r30, r24
     2c8:	f9 07       	cpc	r31, r25
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <SCM485F_packetBufInit+0x18>
     2cc:	10 92 ef 0f 	sts	0x0FEF, r1	; 0x800fef <G_485Packet+0x1e9>
     2d0:	10 92 ee 0f 	sts	0x0FEE, r1	; 0x800fee <G_485Packet+0x1e8>
     2d4:	08 95       	ret

000002d6 <SCM485F_getRxPacket>:
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	e8 df       	rcall	.-48     	; 0x2ac <SCM485F_packetBufInit>
     2dc:	cd ec       	ldi	r28, 0xCD	; 205
     2de:	db e0       	ldi	r29, 0x0B	; 11
     2e0:	38 81       	ld	r19, Y
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	2a 81       	ldd	r18, Y+2	; 0x02
     2e6:	e6 e0       	ldi	r30, 0x06	; 6
     2e8:	fe e0       	ldi	r31, 0x0E	; 14
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	93 2b       	or	r25, r19
     2f2:	dc 01       	movw	r26, r24
     2f4:	99 27       	eor	r25, r25
     2f6:	88 27       	eor	r24, r24
     2f8:	82 2b       	or	r24, r18
     2fa:	80 83       	st	Z, r24
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	a2 83       	std	Z+2, r26	; 0x02
     300:	b3 83       	std	Z+3, r27	; 0x03
     302:	8b 81       	ldd	r24, Y+3	; 0x03
     304:	84 83       	std	Z+4, r24	; 0x04
     306:	8c 81       	ldd	r24, Y+4	; 0x04
     308:	85 83       	std	Z+5, r24	; 0x05
     30a:	8d 81       	ldd	r24, Y+5	; 0x05
     30c:	6e 81       	ldd	r22, Y+6	; 0x06
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	78 2b       	or	r23, r24
     312:	77 83       	std	Z+7, r23	; 0x07
     314:	66 83       	std	Z+6, r22	; 0x06
     316:	61 3e       	cpi	r22, 0xE1	; 225
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	78 07       	cpc	r23, r24
     31c:	48 f0       	brcs	.+18     	; 0x330 <SCM485F_getRxPacket+0x5a>
     31e:	80 ee       	ldi	r24, 0xE0	; 224
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	90 93 0d 0e 	sts	0x0E0D, r25	; 0x800e0d <G_485Packet+0x7>
     326:	80 93 0c 0e 	sts	0x0E0C, r24	; 0x800e0c <G_485Packet+0x6>
     32a:	60 ee       	ldi	r22, 0xE0	; 224
     32c:	71 e0       	ldi	r23, 0x01	; 1
     32e:	03 c0       	rjmp	.+6      	; 0x336 <SCM485F_getRxPacket+0x60>
     330:	61 15       	cp	r22, r1
     332:	71 05       	cpc	r23, r1
     334:	69 f0       	breq	.+26     	; 0x350 <SCM485F_getRxPacket+0x7a>
     336:	ee e0       	ldi	r30, 0x0E	; 14
     338:	fe e0       	ldi	r31, 0x0E	; 14
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	dc 01       	movw	r26, r24
     340:	ac 52       	subi	r26, 0x2C	; 44
     342:	b4 4f       	sbci	r27, 0xF4	; 244
     344:	2c 91       	ld	r18, X
     346:	21 93       	st	Z+, r18
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	86 17       	cp	r24, r22
     34c:	97 07       	cpc	r25, r23
     34e:	b8 f3       	brcs	.-18     	; 0x33e <SCM485F_getRxPacket+0x68>
     350:	fb 01       	movw	r30, r22
     352:	ec 52       	subi	r30, 0x2C	; 44
     354:	f4 4f       	sbci	r31, 0xF4	; 244
     356:	20 81       	ld	r18, Z
     358:	fb 01       	movw	r30, r22
     35a:	eb 52       	subi	r30, 0x2B	; 43
     35c:	f4 4f       	sbci	r31, 0xF4	; 244
     35e:	80 81       	ld	r24, Z
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	92 2b       	or	r25, r18
     364:	90 93 ef 0f 	sts	0x0FEF, r25	; 0x800fef <G_485Packet+0x1e9>
     368:	80 93 ee 0f 	sts	0x0FEE, r24	; 0x800fee <G_485Packet+0x1e8>
     36c:	6c 5f       	subi	r22, 0xFC	; 252
     36e:	7f 4f       	sbci	r23, 0xFF	; 255
     370:	4f ef       	ldi	r20, 0xFF	; 255
     372:	5f ef       	ldi	r21, 0xFF	; 255
     374:	80 ed       	ldi	r24, 0xD0	; 208
     376:	9b e0       	ldi	r25, 0x0B	; 11
     378:	0a df       	rcall	.-492    	; 0x18e <crcsum>
     37a:	40 91 06 0e 	lds	r20, 0x0E06	; 0x800e06 <G_485Packet>
     37e:	50 91 07 0e 	lds	r21, 0x0E07	; 0x800e07 <G_485Packet+0x1>
     382:	60 91 08 0e 	lds	r22, 0x0E08	; 0x800e08 <G_485Packet+0x2>
     386:	70 91 09 0e 	lds	r23, 0x0E09	; 0x800e09 <G_485Packet+0x3>
     38a:	45 2b       	or	r20, r21
     38c:	46 2b       	or	r20, r22
     38e:	47 2b       	or	r20, r23
     390:	79 f4       	brne	.+30     	; 0x3b0 <SCM485F_getRxPacket+0xda>
     392:	20 91 ee 0f 	lds	r18, 0x0FEE	; 0x800fee <G_485Packet+0x1e8>
     396:	30 91 ef 0f 	lds	r19, 0x0FEF	; 0x800fef <G_485Packet+0x1e9>
     39a:	82 17       	cp	r24, r18
     39c:	93 07       	cpc	r25, r19
     39e:	51 f4       	brne	.+20     	; 0x3b4 <SCM485F_getRxPacket+0xde>
     3a0:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <G_idDipValue>
     3a4:	90 91 0a 0e 	lds	r25, 0x0E0A	; 0x800e0a <G_485Packet+0x4>
     3a8:	98 13       	cpse	r25, r24
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <SCM485F_getRxPacket+0xe2>
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	05 c0       	rjmp	.+10     	; 0x3ba <SCM485F_getRxPacket+0xe4>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	03 c0       	rjmp	.+6      	; 0x3ba <SCM485F_getRxPacket+0xe4>
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <SCM485F_getRxPacket+0xe4>
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <SCM485F_makeTxPacket>:
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	eb 01       	movw	r28, r22
     3c6:	ec eb       	ldi	r30, 0xBC	; 188
     3c8:	f9 e0       	ldi	r31, 0x09	; 9
     3ca:	10 82       	st	Z, r1
     3cc:	11 82       	std	Z+1, r1	; 0x01
     3ce:	12 82       	std	Z+2, r1	; 0x02
     3d0:	90 91 97 08 	lds	r25, 0x0897	; 0x800897 <G_idDipValue>
     3d4:	93 83       	std	Z+3, r25	; 0x03
     3d6:	84 83       	std	Z+4, r24	; 0x04
     3d8:	d5 83       	std	Z+5, r29	; 0x05
     3da:	66 83       	std	Z+6, r22	; 0x06
     3dc:	60 3e       	cpi	r22, 0xE0	; 224
     3de:	71 40       	sbci	r23, 0x01	; 1
     3e0:	88 f1       	brcs	.+98     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3e2:	c0 ee       	ldi	r28, 0xE0	; 224
     3e4:	d1 e0       	ldi	r29, 0x01	; 1
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fa 01       	movw	r30, r20
     3ec:	e8 0f       	add	r30, r24
     3ee:	f9 1f       	adc	r31, r25
     3f0:	20 81       	ld	r18, Z
     3f2:	fc 01       	movw	r30, r24
     3f4:	ed 53       	subi	r30, 0x3D	; 61
     3f6:	f6 4f       	sbci	r31, 0xF6	; 246
     3f8:	20 83       	st	Z, r18
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	8c 17       	cp	r24, r28
     3fe:	9d 07       	cpc	r25, r29
     400:	a0 f3       	brcs	.-24     	; 0x3ea <SCM485F_makeTxPacket+0x2a>
     402:	ce 01       	movw	r24, r28
     404:	0b 96       	adiw	r24, 0x0b	; 11
     406:	90 93 9d 0b 	sts	0x0B9D, r25	; 0x800b9d <G_txBuf485+0x1e1>
     40a:	80 93 9c 0b 	sts	0x0B9C, r24	; 0x800b9c <G_txBuf485+0x1e0>
     40e:	be 01       	movw	r22, r28
     410:	6c 5f       	subi	r22, 0xFC	; 252
     412:	7f 4f       	sbci	r23, 0xFF	; 255
     414:	4f ef       	ldi	r20, 0xFF	; 255
     416:	5f ef       	ldi	r21, 0xFF	; 255
     418:	8f eb       	ldi	r24, 0xBF	; 191
     41a:	99 e0       	ldi	r25, 0x09	; 9
     41c:	b8 de       	rcall	.-656    	; 0x18e <crcsum>
     41e:	fe 01       	movw	r30, r28
     420:	ed 53       	subi	r30, 0x3D	; 61
     422:	f6 4f       	sbci	r31, 0xF6	; 246
     424:	90 83       	st	Z, r25
     426:	fe 01       	movw	r30, r28
     428:	ec 53       	subi	r30, 0x3C	; 60
     42a:	f6 4f       	sbci	r31, 0xF6	; 246
     42c:	80 83       	st	Z, r24
     42e:	fe 01       	movw	r30, r28
     430:	eb 53       	subi	r30, 0x3B	; 59
     432:	f6 4f       	sbci	r31, 0xF6	; 246
     434:	10 82       	st	Z, r1
     436:	ca 53       	subi	r28, 0x3A	; 58
     438:	d6 4f       	sbci	r29, 0xF6	; 246
     43a:	18 82       	st	Y, r1
     43c:	57 98       	cbi	0x0a, 7	; 10
     43e:	1a 98       	cbi	0x03, 2	; 3
     440:	55 9a       	sbi	0x0a, 5	; 10
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	20 97       	sbiw	r28, 0x00	; 0
     446:	e9 f2       	breq	.-70     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     448:	ce cf       	rjmp	.-100    	; 0x3e6 <SCM485F_makeTxPacket+0x26>
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <SCMPLCF_PLCTxTimerInit>:
     450:	15 bc       	out	0x25, r1	; 37
     452:	87 b7       	in	r24, 0x37	; 55
     454:	80 64       	ori	r24, 0x40	; 64
     456:	87 bf       	out	0x37, r24	; 55
     458:	14 bc       	out	0x24, r1	; 36
     45a:	08 95       	ret

0000045c <SCMPLCF_StatusUSMBuffInit>:
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	ec 5b       	subi	r30, 0xBC	; 188
     464:	f6 4f       	sbci	r31, 0xF6	; 246
     466:	10 82       	st	Z, r1
     468:	fc 01       	movw	r30, r24
     46a:	e0 51       	subi	r30, 0x10	; 16
     46c:	f0 4f       	sbci	r31, 0xF0	; 240
     46e:	10 82       	st	Z, r1
     470:	fc 01       	movw	r30, r24
     472:	e3 56       	subi	r30, 0x63	; 99
     474:	f7 4f       	sbci	r31, 0xF7	; 247
     476:	10 82       	st	Z, r1
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	88 37       	cpi	r24, 0x78	; 120
     47c:	91 05       	cpc	r25, r1
     47e:	81 f7       	brne	.-32     	; 0x460 <SCMPLCF_StatusUSMBuffInit+0x4>
     480:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
     484:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <G_StatusBufUSMtoSCM>
     488:	08 95       	ret

0000048a <SCMPLCF_StatusLGMBuffInit>:
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	e4 5e       	subi	r30, 0xE4	; 228
     492:	f6 4f       	sbci	r31, 0xF6	; 246
     494:	10 82       	st	Z, r1
     496:	fc 01       	movw	r30, r24
     498:	e0 56       	subi	r30, 0x60	; 96
     49a:	f4 4f       	sbci	r31, 0xF4	; 244
     49c:	10 82       	st	Z, r1
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	88 32       	cpi	r24, 0x28	; 40
     4a2:	91 05       	cpc	r25, r1
     4a4:	a1 f7       	brne	.-24     	; 0x48e <SCMPLCF_StatusLGMBuffInit+0x4>
     4a6:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <G_totalLGMCnt>
     4aa:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <G_StatusBufLGMtoSCM>
     4ae:	08 95       	ret

000004b0 <SCMPLCF_lgmStatusBuffInit>:
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	fc 01       	movw	r30, r24
     4b6:	ee 54       	subi	r30, 0x4E	; 78
     4b8:	f2 4f       	sbci	r31, 0xF2	; 242
     4ba:	10 82       	st	Z, r1
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	88 32       	cpi	r24, 0x28	; 40
     4c0:	91 05       	cpc	r25, r1
     4c2:	c1 f7       	brne	.-16     	; 0x4b4 <SCMPLCF_lgmStatusBuffInit+0x4>
     4c4:	08 95       	ret

000004c6 <SCMPLCF_lgmTotalCntBuffInit>:
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	fc 01       	movw	r30, r24
     4cc:	e5 52       	subi	r30, 0x25	; 37
     4ce:	f2 4f       	sbci	r31, 0xF2	; 242
     4d0:	10 82       	st	Z, r1
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	88 32       	cpi	r24, 0x28	; 40
     4d6:	91 05       	cpc	r25, r1
     4d8:	c1 f7       	brne	.-16     	; 0x4ca <SCMPLCF_lgmTotalCntBuffInit+0x4>
     4da:	08 95       	ret

000004dc <SCMPLCF_SendMessageAddPacket>:
     4dc:	2f 92       	push	r2
     4de:	3f 92       	push	r3
     4e0:	4f 92       	push	r4
     4e2:	5f 92       	push	r5
     4e4:	6f 92       	push	r6
     4e6:	7f 92       	push	r7
     4e8:	8f 92       	push	r8
     4ea:	9f 92       	push	r9
     4ec:	af 92       	push	r10
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	e0 97       	sbiw	r28, 0x30	; 48
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	4e a7       	std	Y+46, r20	; 0x2e
     512:	49 83       	std	Y+1, r20	; 0x01
     514:	5f a7       	std	Y+47, r21	; 0x2f
     516:	5a 83       	std	Y+2, r21	; 0x02
     518:	68 ab       	std	Y+48, r22	; 0x30
     51a:	6b 83       	std	Y+3, r22	; 0x03
     51c:	7c 83       	std	Y+4, r23	; 0x04
     51e:	8d 83       	std	Y+5, r24	; 0x05
     520:	94 e8       	ldi	r25, 0x84	; 132
     522:	93 b9       	out	0x03, r25	; 3
     524:	e9 e2       	ldi	r30, 0x29	; 41
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	31 97       	sbiw	r30, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <SCMPLCF_SendMessageAddPacket+0x4c>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <SCMPLCF_SendMessageAddPacket+0x52>
     52e:	00 00       	nop
     530:	40 fb       	bst	r20, 0
     532:	88 24       	eor	r8, r8
     534:	80 f8       	bld	r8, 0
     536:	91 2c       	mov	r9, r1
     538:	96 94       	lsr	r9
     53a:	98 2c       	mov	r9, r8
     53c:	88 24       	eor	r8, r8
     53e:	97 94       	ror	r9
     540:	87 94       	ror	r8
     542:	98 2d       	mov	r25, r8
     544:	94 60       	ori	r25, 0x04	; 4
     546:	93 b9       	out	0x03, r25	; 3
     548:	e9 e2       	ldi	r30, 0x29	; 41
     54a:	f2 e0       	ldi	r31, 0x02	; 2
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <SCMPLCF_SendMessageAddPacket+0x70>
     550:	00 c0       	rjmp	.+0      	; 0x552 <SCMPLCF_SendMessageAddPacket+0x76>
     552:	00 00       	nop
     554:	41 fb       	bst	r20, 1
     556:	aa 24       	eor	r10, r10
     558:	a0 f8       	bld	r10, 0
     55a:	b1 2c       	mov	r11, r1
     55c:	b6 94       	lsr	r11
     55e:	ba 2c       	mov	r11, r10
     560:	aa 24       	eor	r10, r10
     562:	b7 94       	ror	r11
     564:	a7 94       	ror	r10
     566:	9a 2d       	mov	r25, r10
     568:	94 60       	ori	r25, 0x04	; 4
     56a:	93 b9       	out	0x03, r25	; 3
     56c:	e9 e2       	ldi	r30, 0x29	; 41
     56e:	f2 e0       	ldi	r31, 0x02	; 2
     570:	31 97       	sbiw	r30, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <SCMPLCF_SendMessageAddPacket+0x94>
     574:	00 c0       	rjmp	.+0      	; 0x576 <SCMPLCF_SendMessageAddPacket+0x9a>
     576:	00 00       	nop
     578:	42 fb       	bst	r20, 2
     57a:	cc 24       	eor	r12, r12
     57c:	c0 f8       	bld	r12, 0
     57e:	d1 2c       	mov	r13, r1
     580:	d6 94       	lsr	r13
     582:	dc 2c       	mov	r13, r12
     584:	cc 24       	eor	r12, r12
     586:	d7 94       	ror	r13
     588:	c7 94       	ror	r12
     58a:	9c 2d       	mov	r25, r12
     58c:	94 60       	ori	r25, 0x04	; 4
     58e:	93 b9       	out	0x03, r25	; 3
     590:	e9 e2       	ldi	r30, 0x29	; 41
     592:	f2 e0       	ldi	r31, 0x02	; 2
     594:	31 97       	sbiw	r30, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <SCMPLCF_SendMessageAddPacket+0xb8>
     598:	00 c0       	rjmp	.+0      	; 0x59a <SCMPLCF_SendMessageAddPacket+0xbe>
     59a:	00 00       	nop
     59c:	50 fb       	bst	r21, 0
     59e:	ee 24       	eor	r14, r14
     5a0:	e0 f8       	bld	r14, 0
     5a2:	f1 2c       	mov	r15, r1
     5a4:	f6 94       	lsr	r15
     5a6:	fe 2c       	mov	r15, r14
     5a8:	ee 24       	eor	r14, r14
     5aa:	f7 94       	ror	r15
     5ac:	e7 94       	ror	r14
     5ae:	9e 2d       	mov	r25, r14
     5b0:	94 60       	ori	r25, 0x04	; 4
     5b2:	93 b9       	out	0x03, r25	; 3
     5b4:	e9 e2       	ldi	r30, 0x29	; 41
     5b6:	f2 e0       	ldi	r31, 0x02	; 2
     5b8:	31 97       	sbiw	r30, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <SCMPLCF_SendMessageAddPacket+0xdc>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <SCMPLCF_SendMessageAddPacket+0xe2>
     5be:	00 00       	nop
     5c0:	51 fb       	bst	r21, 1
     5c2:	00 27       	eor	r16, r16
     5c4:	00 f9       	bld	r16, 0
     5c6:	10 e0       	ldi	r17, 0x00	; 0
     5c8:	16 95       	lsr	r17
     5ca:	10 2f       	mov	r17, r16
     5cc:	00 27       	eor	r16, r16
     5ce:	17 95       	ror	r17
     5d0:	07 95       	ror	r16
     5d2:	04 60       	ori	r16, 0x04	; 4
     5d4:	03 b9       	out	0x03, r16	; 3
     5d6:	e9 e2       	ldi	r30, 0x29	; 41
     5d8:	f2 e0       	ldi	r31, 0x02	; 2
     5da:	31 97       	sbiw	r30, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <SCMPLCF_SendMessageAddPacket+0xfe>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <SCMPLCF_SendMessageAddPacket+0x104>
     5e0:	00 00       	nop
     5e2:	52 fb       	bst	r21, 2
     5e4:	aa 27       	eor	r26, r26
     5e6:	a0 f9       	bld	r26, 0
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	b6 95       	lsr	r27
     5ec:	ba 2f       	mov	r27, r26
     5ee:	aa 27       	eor	r26, r26
     5f0:	b7 95       	ror	r27
     5f2:	a7 95       	ror	r26
     5f4:	a4 60       	ori	r26, 0x04	; 4
     5f6:	a3 b9       	out	0x03, r26	; 3
     5f8:	e9 e2       	ldi	r30, 0x29	; 41
     5fa:	f2 e0       	ldi	r31, 0x02	; 2
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <SCMPLCF_SendMessageAddPacket+0x120>
     600:	00 c0       	rjmp	.+0      	; 0x602 <SCMPLCF_SendMessageAddPacket+0x126>
     602:	00 00       	nop
     604:	53 fb       	bst	r21, 3
     606:	ee 27       	eor	r30, r30
     608:	e0 f9       	bld	r30, 0
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	f6 95       	lsr	r31
     60e:	fe 2f       	mov	r31, r30
     610:	ee 27       	eor	r30, r30
     612:	f7 95       	ror	r31
     614:	e7 95       	ror	r30
     616:	e4 60       	ori	r30, 0x04	; 4
     618:	e3 b9       	out	0x03, r30	; 3
     61a:	e9 e2       	ldi	r30, 0x29	; 41
     61c:	f2 e0       	ldi	r31, 0x02	; 2
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <SCMPLCF_SendMessageAddPacket+0x142>
     622:	00 c0       	rjmp	.+0      	; 0x624 <SCMPLCF_SendMessageAddPacket+0x148>
     624:	00 00       	nop
     626:	54 fb       	bst	r21, 4
     628:	22 27       	eor	r18, r18
     62a:	20 f9       	bld	r18, 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	36 95       	lsr	r19
     630:	32 2f       	mov	r19, r18
     632:	22 27       	eor	r18, r18
     634:	37 95       	ror	r19
     636:	27 95       	ror	r18
     638:	24 60       	ori	r18, 0x04	; 4
     63a:	23 b9       	out	0x03, r18	; 3
     63c:	e9 e2       	ldi	r30, 0x29	; 41
     63e:	f2 e0       	ldi	r31, 0x02	; 2
     640:	31 97       	sbiw	r30, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <SCMPLCF_SendMessageAddPacket+0x164>
     644:	00 c0       	rjmp	.+0      	; 0x646 <SCMPLCF_SendMessageAddPacket+0x16a>
     646:	00 00       	nop
     648:	55 fb       	bst	r21, 5
     64a:	66 24       	eor	r6, r6
     64c:	60 f8       	bld	r6, 0
     64e:	71 2c       	mov	r7, r1
     650:	93 01       	movw	r18, r6
     652:	36 95       	lsr	r19
     654:	32 2f       	mov	r19, r18
     656:	22 27       	eor	r18, r18
     658:	37 95       	ror	r19
     65a:	27 95       	ror	r18
     65c:	92 2f       	mov	r25, r18
     65e:	94 60       	ori	r25, 0x04	; 4
     660:	93 b9       	out	0x03, r25	; 3
     662:	e9 e2       	ldi	r30, 0x29	; 41
     664:	f2 e0       	ldi	r31, 0x02	; 2
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <SCMPLCF_SendMessageAddPacket+0x18a>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <SCMPLCF_SendMessageAddPacket+0x190>
     66c:	00 00       	nop
     66e:	56 fb       	bst	r21, 6
     670:	ff 27       	eor	r31, r31
     672:	f0 f9       	bld	r31, 0
     674:	fe 83       	std	Y+6, r31	; 0x06
     676:	1f 82       	std	Y+7, r1	; 0x07
     678:	2e 81       	ldd	r18, Y+6	; 0x06
     67a:	3f 81       	ldd	r19, Y+7	; 0x07
     67c:	36 95       	lsr	r19
     67e:	32 2f       	mov	r19, r18
     680:	22 27       	eor	r18, r18
     682:	37 95       	ror	r19
     684:	27 95       	ror	r18
     686:	24 60       	ori	r18, 0x04	; 4
     688:	23 b9       	out	0x03, r18	; 3
     68a:	e9 e2       	ldi	r30, 0x29	; 41
     68c:	f2 e0       	ldi	r31, 0x02	; 2
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <SCMPLCF_SendMessageAddPacket+0x1b2>
     692:	00 c0       	rjmp	.+0      	; 0x694 <SCMPLCF_SendMessageAddPacket+0x1b8>
     694:	00 00       	nop
     696:	55 1f       	adc	r21, r21
     698:	55 27       	eor	r21, r21
     69a:	55 1f       	adc	r21, r21
     69c:	25 2f       	mov	r18, r21
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	36 95       	lsr	r19
     6a2:	32 2f       	mov	r19, r18
     6a4:	22 27       	eor	r18, r18
     6a6:	37 95       	ror	r19
     6a8:	27 95       	ror	r18
     6aa:	24 60       	ori	r18, 0x04	; 4
     6ac:	23 b9       	out	0x03, r18	; 3
     6ae:	e9 e2       	ldi	r30, 0x29	; 41
     6b0:	f2 e0       	ldi	r31, 0x02	; 2
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <SCMPLCF_SendMessageAddPacket+0x1d6>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <SCMPLCF_SendMessageAddPacket+0x1dc>
     6b8:	00 00       	nop
     6ba:	f6 2f       	mov	r31, r22
     6bc:	f1 70       	andi	r31, 0x01	; 1
     6be:	f8 87       	std	Y+8, r31	; 0x08
     6c0:	19 86       	std	Y+9, r1	; 0x09
     6c2:	28 85       	ldd	r18, Y+8	; 0x08
     6c4:	39 85       	ldd	r19, Y+9	; 0x09
     6c6:	36 95       	lsr	r19
     6c8:	32 2f       	mov	r19, r18
     6ca:	22 27       	eor	r18, r18
     6cc:	37 95       	ror	r19
     6ce:	27 95       	ror	r18
     6d0:	24 60       	ori	r18, 0x04	; 4
     6d2:	23 b9       	out	0x03, r18	; 3
     6d4:	e9 e2       	ldi	r30, 0x29	; 41
     6d6:	f2 e0       	ldi	r31, 0x02	; 2
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <SCMPLCF_SendMessageAddPacket+0x1fc>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <SCMPLCF_SendMessageAddPacket+0x202>
     6de:	00 00       	nop
     6e0:	61 fb       	bst	r22, 1
     6e2:	ff 27       	eor	r31, r31
     6e4:	f0 f9       	bld	r31, 0
     6e6:	fa 87       	std	Y+10, r31	; 0x0a
     6e8:	1b 86       	std	Y+11, r1	; 0x0b
     6ea:	2a 85       	ldd	r18, Y+10	; 0x0a
     6ec:	3b 85       	ldd	r19, Y+11	; 0x0b
     6ee:	36 95       	lsr	r19
     6f0:	32 2f       	mov	r19, r18
     6f2:	22 27       	eor	r18, r18
     6f4:	37 95       	ror	r19
     6f6:	27 95       	ror	r18
     6f8:	24 60       	ori	r18, 0x04	; 4
     6fa:	23 b9       	out	0x03, r18	; 3
     6fc:	e9 e2       	ldi	r30, 0x29	; 41
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <SCMPLCF_SendMessageAddPacket+0x224>
     704:	00 c0       	rjmp	.+0      	; 0x706 <SCMPLCF_SendMessageAddPacket+0x22a>
     706:	00 00       	nop
     708:	62 fb       	bst	r22, 2
     70a:	ff 27       	eor	r31, r31
     70c:	f0 f9       	bld	r31, 0
     70e:	fc 87       	std	Y+12, r31	; 0x0c
     710:	1d 86       	std	Y+13, r1	; 0x0d
     712:	2c 85       	ldd	r18, Y+12	; 0x0c
     714:	3d 85       	ldd	r19, Y+13	; 0x0d
     716:	36 95       	lsr	r19
     718:	32 2f       	mov	r19, r18
     71a:	22 27       	eor	r18, r18
     71c:	37 95       	ror	r19
     71e:	27 95       	ror	r18
     720:	24 60       	ori	r18, 0x04	; 4
     722:	23 b9       	out	0x03, r18	; 3
     724:	e9 e2       	ldi	r30, 0x29	; 41
     726:	f2 e0       	ldi	r31, 0x02	; 2
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <SCMPLCF_SendMessageAddPacket+0x24c>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <SCMPLCF_SendMessageAddPacket+0x252>
     72e:	00 00       	nop
     730:	63 fb       	bst	r22, 3
     732:	ff 27       	eor	r31, r31
     734:	f0 f9       	bld	r31, 0
     736:	fe 87       	std	Y+14, r31	; 0x0e
     738:	1f 86       	std	Y+15, r1	; 0x0f
     73a:	2e 85       	ldd	r18, Y+14	; 0x0e
     73c:	3f 85       	ldd	r19, Y+15	; 0x0f
     73e:	36 95       	lsr	r19
     740:	32 2f       	mov	r19, r18
     742:	22 27       	eor	r18, r18
     744:	37 95       	ror	r19
     746:	27 95       	ror	r18
     748:	24 60       	ori	r18, 0x04	; 4
     74a:	23 b9       	out	0x03, r18	; 3
     74c:	e9 e2       	ldi	r30, 0x29	; 41
     74e:	f2 e0       	ldi	r31, 0x02	; 2
     750:	31 97       	sbiw	r30, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <SCMPLCF_SendMessageAddPacket+0x274>
     754:	00 c0       	rjmp	.+0      	; 0x756 <SCMPLCF_SendMessageAddPacket+0x27a>
     756:	00 00       	nop
     758:	64 fb       	bst	r22, 4
     75a:	ff 27       	eor	r31, r31
     75c:	f0 f9       	bld	r31, 0
     75e:	f8 8b       	std	Y+16, r31	; 0x10
     760:	19 8a       	std	Y+17, r1	; 0x11
     762:	28 89       	ldd	r18, Y+16	; 0x10
     764:	39 89       	ldd	r19, Y+17	; 0x11
     766:	36 95       	lsr	r19
     768:	32 2f       	mov	r19, r18
     76a:	22 27       	eor	r18, r18
     76c:	37 95       	ror	r19
     76e:	27 95       	ror	r18
     770:	24 60       	ori	r18, 0x04	; 4
     772:	23 b9       	out	0x03, r18	; 3
     774:	e9 e2       	ldi	r30, 0x29	; 41
     776:	f2 e0       	ldi	r31, 0x02	; 2
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <SCMPLCF_SendMessageAddPacket+0x29c>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <SCMPLCF_SendMessageAddPacket+0x2a2>
     77e:	00 00       	nop
     780:	65 fb       	bst	r22, 5
     782:	ff 27       	eor	r31, r31
     784:	f0 f9       	bld	r31, 0
     786:	fa 8b       	std	Y+18, r31	; 0x12
     788:	1b 8a       	std	Y+19, r1	; 0x13
     78a:	2a 89       	ldd	r18, Y+18	; 0x12
     78c:	3b 89       	ldd	r19, Y+19	; 0x13
     78e:	36 95       	lsr	r19
     790:	32 2f       	mov	r19, r18
     792:	22 27       	eor	r18, r18
     794:	37 95       	ror	r19
     796:	27 95       	ror	r18
     798:	24 60       	ori	r18, 0x04	; 4
     79a:	23 b9       	out	0x03, r18	; 3
     79c:	e9 e2       	ldi	r30, 0x29	; 41
     79e:	f2 e0       	ldi	r31, 0x02	; 2
     7a0:	31 97       	sbiw	r30, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <SCMPLCF_SendMessageAddPacket+0x2c4>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <SCMPLCF_SendMessageAddPacket+0x2ca>
     7a6:	00 00       	nop
     7a8:	66 fb       	bst	r22, 6
     7aa:	ff 27       	eor	r31, r31
     7ac:	f0 f9       	bld	r31, 0
     7ae:	fc 8b       	std	Y+20, r31	; 0x14
     7b0:	1d 8a       	std	Y+21, r1	; 0x15
     7b2:	2c 89       	ldd	r18, Y+20	; 0x14
     7b4:	3d 89       	ldd	r19, Y+21	; 0x15
     7b6:	36 95       	lsr	r19
     7b8:	32 2f       	mov	r19, r18
     7ba:	22 27       	eor	r18, r18
     7bc:	37 95       	ror	r19
     7be:	27 95       	ror	r18
     7c0:	24 60       	ori	r18, 0x04	; 4
     7c2:	23 b9       	out	0x03, r18	; 3
     7c4:	e9 e2       	ldi	r30, 0x29	; 41
     7c6:	f2 e0       	ldi	r31, 0x02	; 2
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <SCMPLCF_SendMessageAddPacket+0x2ec>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <SCMPLCF_SendMessageAddPacket+0x2f2>
     7ce:	00 00       	nop
     7d0:	66 1f       	adc	r22, r22
     7d2:	66 27       	eor	r22, r22
     7d4:	66 1f       	adc	r22, r22
     7d6:	26 2f       	mov	r18, r22
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	36 95       	lsr	r19
     7dc:	32 2f       	mov	r19, r18
     7de:	22 27       	eor	r18, r18
     7e0:	37 95       	ror	r19
     7e2:	27 95       	ror	r18
     7e4:	24 60       	ori	r18, 0x04	; 4
     7e6:	23 b9       	out	0x03, r18	; 3
     7e8:	e9 e2       	ldi	r30, 0x29	; 41
     7ea:	f2 e0       	ldi	r31, 0x02	; 2
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <SCMPLCF_SendMessageAddPacket+0x310>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <SCMPLCF_SendMessageAddPacket+0x316>
     7f2:	00 00       	nop
     7f4:	f7 2f       	mov	r31, r23
     7f6:	f1 70       	andi	r31, 0x01	; 1
     7f8:	fe 8b       	std	Y+22, r31	; 0x16
     7fa:	1f 8a       	std	Y+23, r1	; 0x17
     7fc:	2e 89       	ldd	r18, Y+22	; 0x16
     7fe:	3f 89       	ldd	r19, Y+23	; 0x17
     800:	36 95       	lsr	r19
     802:	32 2f       	mov	r19, r18
     804:	22 27       	eor	r18, r18
     806:	37 95       	ror	r19
     808:	27 95       	ror	r18
     80a:	24 60       	ori	r18, 0x04	; 4
     80c:	23 b9       	out	0x03, r18	; 3
     80e:	e9 e2       	ldi	r30, 0x29	; 41
     810:	f2 e0       	ldi	r31, 0x02	; 2
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <SCMPLCF_SendMessageAddPacket+0x336>
     816:	00 c0       	rjmp	.+0      	; 0x818 <SCMPLCF_SendMessageAddPacket+0x33c>
     818:	00 00       	nop
     81a:	71 fb       	bst	r23, 1
     81c:	ff 27       	eor	r31, r31
     81e:	f0 f9       	bld	r31, 0
     820:	f8 8f       	std	Y+24, r31	; 0x18
     822:	19 8e       	std	Y+25, r1	; 0x19
     824:	28 8d       	ldd	r18, Y+24	; 0x18
     826:	39 8d       	ldd	r19, Y+25	; 0x19
     828:	36 95       	lsr	r19
     82a:	32 2f       	mov	r19, r18
     82c:	22 27       	eor	r18, r18
     82e:	37 95       	ror	r19
     830:	27 95       	ror	r18
     832:	24 60       	ori	r18, 0x04	; 4
     834:	23 b9       	out	0x03, r18	; 3
     836:	e9 e2       	ldi	r30, 0x29	; 41
     838:	f2 e0       	ldi	r31, 0x02	; 2
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <SCMPLCF_SendMessageAddPacket+0x35e>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <SCMPLCF_SendMessageAddPacket+0x364>
     840:	00 00       	nop
     842:	72 fb       	bst	r23, 2
     844:	ff 27       	eor	r31, r31
     846:	f0 f9       	bld	r31, 0
     848:	fa 8f       	std	Y+26, r31	; 0x1a
     84a:	1b 8e       	std	Y+27, r1	; 0x1b
     84c:	2a 8d       	ldd	r18, Y+26	; 0x1a
     84e:	3b 8d       	ldd	r19, Y+27	; 0x1b
     850:	36 95       	lsr	r19
     852:	32 2f       	mov	r19, r18
     854:	22 27       	eor	r18, r18
     856:	37 95       	ror	r19
     858:	27 95       	ror	r18
     85a:	24 60       	ori	r18, 0x04	; 4
     85c:	23 b9       	out	0x03, r18	; 3
     85e:	e9 e2       	ldi	r30, 0x29	; 41
     860:	f2 e0       	ldi	r31, 0x02	; 2
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <SCMPLCF_SendMessageAddPacket+0x386>
     866:	00 c0       	rjmp	.+0      	; 0x868 <SCMPLCF_SendMessageAddPacket+0x38c>
     868:	00 00       	nop
     86a:	73 fb       	bst	r23, 3
     86c:	ff 27       	eor	r31, r31
     86e:	f0 f9       	bld	r31, 0
     870:	fc 8f       	std	Y+28, r31	; 0x1c
     872:	1d 8e       	std	Y+29, r1	; 0x1d
     874:	2c 8d       	ldd	r18, Y+28	; 0x1c
     876:	3d 8d       	ldd	r19, Y+29	; 0x1d
     878:	36 95       	lsr	r19
     87a:	32 2f       	mov	r19, r18
     87c:	22 27       	eor	r18, r18
     87e:	37 95       	ror	r19
     880:	27 95       	ror	r18
     882:	24 60       	ori	r18, 0x04	; 4
     884:	23 b9       	out	0x03, r18	; 3
     886:	e9 e2       	ldi	r30, 0x29	; 41
     888:	f2 e0       	ldi	r31, 0x02	; 2
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <SCMPLCF_SendMessageAddPacket+0x3ae>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <SCMPLCF_SendMessageAddPacket+0x3b4>
     890:	00 00       	nop
     892:	74 fb       	bst	r23, 4
     894:	ff 27       	eor	r31, r31
     896:	f0 f9       	bld	r31, 0
     898:	fe 8f       	std	Y+30, r31	; 0x1e
     89a:	1f 8e       	std	Y+31, r1	; 0x1f
     89c:	2e 8d       	ldd	r18, Y+30	; 0x1e
     89e:	3f 8d       	ldd	r19, Y+31	; 0x1f
     8a0:	36 95       	lsr	r19
     8a2:	32 2f       	mov	r19, r18
     8a4:	22 27       	eor	r18, r18
     8a6:	37 95       	ror	r19
     8a8:	27 95       	ror	r18
     8aa:	24 60       	ori	r18, 0x04	; 4
     8ac:	23 b9       	out	0x03, r18	; 3
     8ae:	e9 e2       	ldi	r30, 0x29	; 41
     8b0:	f2 e0       	ldi	r31, 0x02	; 2
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <SCMPLCF_SendMessageAddPacket+0x3d6>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <SCMPLCF_SendMessageAddPacket+0x3dc>
     8b8:	00 00       	nop
     8ba:	75 fb       	bst	r23, 5
     8bc:	ff 27       	eor	r31, r31
     8be:	f0 f9       	bld	r31, 0
     8c0:	f8 a3       	std	Y+32, r31	; 0x20
     8c2:	19 a2       	std	Y+33, r1	; 0x21
     8c4:	28 a1       	ldd	r18, Y+32	; 0x20
     8c6:	39 a1       	ldd	r19, Y+33	; 0x21
     8c8:	36 95       	lsr	r19
     8ca:	32 2f       	mov	r19, r18
     8cc:	22 27       	eor	r18, r18
     8ce:	37 95       	ror	r19
     8d0:	27 95       	ror	r18
     8d2:	24 60       	ori	r18, 0x04	; 4
     8d4:	23 b9       	out	0x03, r18	; 3
     8d6:	e9 e2       	ldi	r30, 0x29	; 41
     8d8:	f2 e0       	ldi	r31, 0x02	; 2
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <SCMPLCF_SendMessageAddPacket+0x3fe>
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <SCMPLCF_SendMessageAddPacket+0x404>
     8e0:	00 00       	nop
     8e2:	76 fb       	bst	r23, 6
     8e4:	ff 27       	eor	r31, r31
     8e6:	f0 f9       	bld	r31, 0
     8e8:	fa a3       	std	Y+34, r31	; 0x22
     8ea:	1b a2       	std	Y+35, r1	; 0x23
     8ec:	2a a1       	ldd	r18, Y+34	; 0x22
     8ee:	3b a1       	ldd	r19, Y+35	; 0x23
     8f0:	36 95       	lsr	r19
     8f2:	32 2f       	mov	r19, r18
     8f4:	22 27       	eor	r18, r18
     8f6:	37 95       	ror	r19
     8f8:	27 95       	ror	r18
     8fa:	24 60       	ori	r18, 0x04	; 4
     8fc:	23 b9       	out	0x03, r18	; 3
     8fe:	e9 e2       	ldi	r30, 0x29	; 41
     900:	f2 e0       	ldi	r31, 0x02	; 2
     902:	31 97       	sbiw	r30, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <SCMPLCF_SendMessageAddPacket+0x426>
     906:	00 c0       	rjmp	.+0      	; 0x908 <SCMPLCF_SendMessageAddPacket+0x42c>
     908:	00 00       	nop
     90a:	77 1f       	adc	r23, r23
     90c:	77 27       	eor	r23, r23
     90e:	77 1f       	adc	r23, r23
     910:	27 2f       	mov	r18, r23
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	36 95       	lsr	r19
     916:	32 2f       	mov	r19, r18
     918:	22 27       	eor	r18, r18
     91a:	37 95       	ror	r19
     91c:	27 95       	ror	r18
     91e:	24 60       	ori	r18, 0x04	; 4
     920:	23 b9       	out	0x03, r18	; 3
     922:	e9 e2       	ldi	r30, 0x29	; 41
     924:	f2 e0       	ldi	r31, 0x02	; 2
     926:	31 97       	sbiw	r30, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <SCMPLCF_SendMessageAddPacket+0x44a>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <SCMPLCF_SendMessageAddPacket+0x450>
     92c:	00 00       	nop
     92e:	f8 2f       	mov	r31, r24
     930:	f1 70       	andi	r31, 0x01	; 1
     932:	fc a3       	std	Y+36, r31	; 0x24
     934:	1d a2       	std	Y+37, r1	; 0x25
     936:	2c a1       	ldd	r18, Y+36	; 0x24
     938:	3d a1       	ldd	r19, Y+37	; 0x25
     93a:	36 95       	lsr	r19
     93c:	32 2f       	mov	r19, r18
     93e:	22 27       	eor	r18, r18
     940:	37 95       	ror	r19
     942:	27 95       	ror	r18
     944:	24 60       	ori	r18, 0x04	; 4
     946:	23 b9       	out	0x03, r18	; 3
     948:	e9 e2       	ldi	r30, 0x29	; 41
     94a:	f2 e0       	ldi	r31, 0x02	; 2
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <SCMPLCF_SendMessageAddPacket+0x470>
     950:	00 c0       	rjmp	.+0      	; 0x952 <SCMPLCF_SendMessageAddPacket+0x476>
     952:	00 00       	nop
     954:	81 fb       	bst	r24, 1
     956:	ff 27       	eor	r31, r31
     958:	f0 f9       	bld	r31, 0
     95a:	fe a3       	std	Y+38, r31	; 0x26
     95c:	1f a2       	std	Y+39, r1	; 0x27
     95e:	2e a1       	ldd	r18, Y+38	; 0x26
     960:	3f a1       	ldd	r19, Y+39	; 0x27
     962:	36 95       	lsr	r19
     964:	32 2f       	mov	r19, r18
     966:	22 27       	eor	r18, r18
     968:	37 95       	ror	r19
     96a:	27 95       	ror	r18
     96c:	24 60       	ori	r18, 0x04	; 4
     96e:	23 b9       	out	0x03, r18	; 3
     970:	e9 e2       	ldi	r30, 0x29	; 41
     972:	f2 e0       	ldi	r31, 0x02	; 2
     974:	31 97       	sbiw	r30, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <SCMPLCF_SendMessageAddPacket+0x498>
     978:	00 c0       	rjmp	.+0      	; 0x97a <SCMPLCF_SendMessageAddPacket+0x49e>
     97a:	00 00       	nop
     97c:	82 fb       	bst	r24, 2
     97e:	ff 27       	eor	r31, r31
     980:	f0 f9       	bld	r31, 0
     982:	f8 a7       	std	Y+40, r31	; 0x28
     984:	19 a6       	std	Y+41, r1	; 0x29
     986:	28 a5       	ldd	r18, Y+40	; 0x28
     988:	39 a5       	ldd	r19, Y+41	; 0x29
     98a:	36 95       	lsr	r19
     98c:	32 2f       	mov	r19, r18
     98e:	22 27       	eor	r18, r18
     990:	37 95       	ror	r19
     992:	27 95       	ror	r18
     994:	24 60       	ori	r18, 0x04	; 4
     996:	23 b9       	out	0x03, r18	; 3
     998:	e9 e2       	ldi	r30, 0x29	; 41
     99a:	f2 e0       	ldi	r31, 0x02	; 2
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <SCMPLCF_SendMessageAddPacket+0x4c0>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <SCMPLCF_SendMessageAddPacket+0x4c6>
     9a2:	00 00       	nop
     9a4:	83 fb       	bst	r24, 3
     9a6:	ff 27       	eor	r31, r31
     9a8:	f0 f9       	bld	r31, 0
     9aa:	fa a7       	std	Y+42, r31	; 0x2a
     9ac:	1b a6       	std	Y+43, r1	; 0x2b
     9ae:	2a a5       	ldd	r18, Y+42	; 0x2a
     9b0:	3b a5       	ldd	r19, Y+43	; 0x2b
     9b2:	36 95       	lsr	r19
     9b4:	32 2f       	mov	r19, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	37 95       	ror	r19
     9ba:	27 95       	ror	r18
     9bc:	24 60       	ori	r18, 0x04	; 4
     9be:	23 b9       	out	0x03, r18	; 3
     9c0:	e9 e2       	ldi	r30, 0x29	; 41
     9c2:	f2 e0       	ldi	r31, 0x02	; 2
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <SCMPLCF_SendMessageAddPacket+0x4e8>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <SCMPLCF_SendMessageAddPacket+0x4ee>
     9ca:	00 00       	nop
     9cc:	84 fb       	bst	r24, 4
     9ce:	ff 27       	eor	r31, r31
     9d0:	f0 f9       	bld	r31, 0
     9d2:	fc a7       	std	Y+44, r31	; 0x2c
     9d4:	1d a6       	std	Y+45, r1	; 0x2d
     9d6:	2c a5       	ldd	r18, Y+44	; 0x2c
     9d8:	3d a5       	ldd	r19, Y+45	; 0x2d
     9da:	36 95       	lsr	r19
     9dc:	32 2f       	mov	r19, r18
     9de:	22 27       	eor	r18, r18
     9e0:	37 95       	ror	r19
     9e2:	27 95       	ror	r18
     9e4:	24 60       	ori	r18, 0x04	; 4
     9e6:	23 b9       	out	0x03, r18	; 3
     9e8:	e9 e2       	ldi	r30, 0x29	; 41
     9ea:	f2 e0       	ldi	r31, 0x02	; 2
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <SCMPLCF_SendMessageAddPacket+0x510>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <SCMPLCF_SendMessageAddPacket+0x516>
     9f2:	00 00       	nop
     9f4:	85 fb       	bst	r24, 5
     9f6:	44 24       	eor	r4, r4
     9f8:	40 f8       	bld	r4, 0
     9fa:	51 2c       	mov	r5, r1
     9fc:	92 01       	movw	r18, r4
     9fe:	36 95       	lsr	r19
     a00:	32 2f       	mov	r19, r18
     a02:	22 27       	eor	r18, r18
     a04:	37 95       	ror	r19
     a06:	27 95       	ror	r18
     a08:	24 60       	ori	r18, 0x04	; 4
     a0a:	23 b9       	out	0x03, r18	; 3
     a0c:	e9 e2       	ldi	r30, 0x29	; 41
     a0e:	f2 e0       	ldi	r31, 0x02	; 2
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <SCMPLCF_SendMessageAddPacket+0x534>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <SCMPLCF_SendMessageAddPacket+0x53a>
     a16:	00 00       	nop
     a18:	86 fb       	bst	r24, 6
     a1a:	22 24       	eor	r2, r2
     a1c:	20 f8       	bld	r2, 0
     a1e:	31 2c       	mov	r3, r1
     a20:	91 01       	movw	r18, r2
     a22:	36 95       	lsr	r19
     a24:	32 2f       	mov	r19, r18
     a26:	22 27       	eor	r18, r18
     a28:	37 95       	ror	r19
     a2a:	27 95       	ror	r18
     a2c:	24 60       	ori	r18, 0x04	; 4
     a2e:	23 b9       	out	0x03, r18	; 3
     a30:	e9 e2       	ldi	r30, 0x29	; 41
     a32:	f2 e0       	ldi	r31, 0x02	; 2
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <SCMPLCF_SendMessageAddPacket+0x558>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <SCMPLCF_SendMessageAddPacket+0x55e>
     a3a:	00 00       	nop
     a3c:	88 1f       	adc	r24, r24
     a3e:	88 27       	eor	r24, r24
     a40:	88 1f       	adc	r24, r24
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	96 95       	lsr	r25
     a46:	98 2f       	mov	r25, r24
     a48:	88 27       	eor	r24, r24
     a4a:	97 95       	ror	r25
     a4c:	87 95       	ror	r24
     a4e:	84 60       	ori	r24, 0x04	; 4
     a50:	83 b9       	out	0x03, r24	; 3
     a52:	89 e2       	ldi	r24, 0x29	; 41
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <SCMPLCF_SendMessageAddPacket+0x57a>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <SCMPLCF_SendMessageAddPacket+0x580>
     a5c:	00 00       	nop
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	83 b9       	out	0x03, r24	; 3
     a62:	e0 96       	adiw	r28, 0x30	; 48
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	9f 90       	pop	r9
     a84:	8f 90       	pop	r8
     a86:	7f 90       	pop	r7
     a88:	6f 90       	pop	r6
     a8a:	5f 90       	pop	r5
     a8c:	4f 90       	pop	r4
     a8e:	3f 90       	pop	r3
     a90:	2f 90       	pop	r2
     a92:	08 95       	ret

00000a94 <SCMPLCF_SendMessageCntlPacket>:
     a94:	2f 92       	push	r2
     a96:	3f 92       	push	r3
     a98:	4f 92       	push	r4
     a9a:	5f 92       	push	r5
     a9c:	6f 92       	push	r6
     a9e:	7f 92       	push	r7
     aa0:	8f 92       	push	r8
     aa2:	9f 92       	push	r9
     aa4:	af 92       	push	r10
     aa6:	bf 92       	push	r11
     aa8:	cf 92       	push	r12
     aaa:	df 92       	push	r13
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	63 97       	sbiw	r28, 0x13	; 19
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	24 e8       	ldi	r18, 0x84	; 132
     aca:	23 b9       	out	0x03, r18	; 3
     acc:	e9 e2       	ldi	r30, 0x29	; 41
     ace:	f2 e0       	ldi	r31, 0x02	; 2
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <SCMPLCF_SendMessageCntlPacket+0x3c>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <SCMPLCF_SendMessageCntlPacket+0x42>
     ad6:	00 00       	nop
     ad8:	60 fb       	bst	r22, 0
     ada:	aa 24       	eor	r10, r10
     adc:	a0 f8       	bld	r10, 0
     ade:	b1 2c       	mov	r11, r1
     ae0:	b6 94       	lsr	r11
     ae2:	ba 2c       	mov	r11, r10
     ae4:	aa 24       	eor	r10, r10
     ae6:	b7 94       	ror	r11
     ae8:	a7 94       	ror	r10
     aea:	fa 2d       	mov	r31, r10
     aec:	f4 60       	ori	r31, 0x04	; 4
     aee:	f3 b9       	out	0x03, r31	; 3
     af0:	e9 e2       	ldi	r30, 0x29	; 41
     af2:	f2 e0       	ldi	r31, 0x02	; 2
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <SCMPLCF_SendMessageCntlPacket+0x60>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <SCMPLCF_SendMessageCntlPacket+0x66>
     afa:	00 00       	nop
     afc:	61 fb       	bst	r22, 1
     afe:	cc 24       	eor	r12, r12
     b00:	c0 f8       	bld	r12, 0
     b02:	d1 2c       	mov	r13, r1
     b04:	d6 94       	lsr	r13
     b06:	dc 2c       	mov	r13, r12
     b08:	cc 24       	eor	r12, r12
     b0a:	d7 94       	ror	r13
     b0c:	c7 94       	ror	r12
     b0e:	fc 2d       	mov	r31, r12
     b10:	f4 60       	ori	r31, 0x04	; 4
     b12:	f3 b9       	out	0x03, r31	; 3
     b14:	e9 e2       	ldi	r30, 0x29	; 41
     b16:	f2 e0       	ldi	r31, 0x02	; 2
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <SCMPLCF_SendMessageCntlPacket+0x84>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <SCMPLCF_SendMessageCntlPacket+0x8a>
     b1e:	00 00       	nop
     b20:	62 fb       	bst	r22, 2
     b22:	ee 24       	eor	r14, r14
     b24:	e0 f8       	bld	r14, 0
     b26:	f1 2c       	mov	r15, r1
     b28:	f6 94       	lsr	r15
     b2a:	fe 2c       	mov	r15, r14
     b2c:	ee 24       	eor	r14, r14
     b2e:	f7 94       	ror	r15
     b30:	e7 94       	ror	r14
     b32:	6e 2d       	mov	r22, r14
     b34:	64 60       	ori	r22, 0x04	; 4
     b36:	63 b9       	out	0x03, r22	; 3
     b38:	e9 e2       	ldi	r30, 0x29	; 41
     b3a:	f2 e0       	ldi	r31, 0x02	; 2
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <SCMPLCF_SendMessageCntlPacket+0xa8>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <SCMPLCF_SendMessageCntlPacket+0xae>
     b42:	00 00       	nop
     b44:	07 2f       	mov	r16, r23
     b46:	01 70       	andi	r16, 0x01	; 1
     b48:	10 e0       	ldi	r17, 0x00	; 0
     b4a:	16 95       	lsr	r17
     b4c:	10 2f       	mov	r17, r16
     b4e:	00 27       	eor	r16, r16
     b50:	17 95       	ror	r17
     b52:	07 95       	ror	r16
     b54:	04 60       	ori	r16, 0x04	; 4
     b56:	03 b9       	out	0x03, r16	; 3
     b58:	e9 e2       	ldi	r30, 0x29	; 41
     b5a:	f2 e0       	ldi	r31, 0x02	; 2
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <SCMPLCF_SendMessageCntlPacket+0xc8>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <SCMPLCF_SendMessageCntlPacket+0xce>
     b62:	00 00       	nop
     b64:	71 fb       	bst	r23, 1
     b66:	ff 27       	eor	r31, r31
     b68:	f0 f9       	bld	r31, 0
     b6a:	fa 8b       	std	Y+18, r31	; 0x12
     b6c:	1b 8a       	std	Y+19, r1	; 0x13
     b6e:	2a 89       	ldd	r18, Y+18	; 0x12
     b70:	3b 89       	ldd	r19, Y+19	; 0x13
     b72:	36 95       	lsr	r19
     b74:	32 2f       	mov	r19, r18
     b76:	22 27       	eor	r18, r18
     b78:	37 95       	ror	r19
     b7a:	27 95       	ror	r18
     b7c:	3b 8b       	std	Y+19, r19	; 0x13
     b7e:	2a 8b       	std	Y+18, r18	; 0x12
     b80:	24 60       	ori	r18, 0x04	; 4
     b82:	23 b9       	out	0x03, r18	; 3
     b84:	e9 e2       	ldi	r30, 0x29	; 41
     b86:	f2 e0       	ldi	r31, 0x02	; 2
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <SCMPLCF_SendMessageCntlPacket+0xf4>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <SCMPLCF_SendMessageCntlPacket+0xfa>
     b8e:	00 00       	nop
     b90:	72 fb       	bst	r23, 2
     b92:	aa 27       	eor	r26, r26
     b94:	a0 f9       	bld	r26, 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	b6 95       	lsr	r27
     b9a:	ba 2f       	mov	r27, r26
     b9c:	aa 27       	eor	r26, r26
     b9e:	b7 95       	ror	r27
     ba0:	a7 95       	ror	r26
     ba2:	a4 60       	ori	r26, 0x04	; 4
     ba4:	a3 b9       	out	0x03, r26	; 3
     ba6:	e9 e2       	ldi	r30, 0x29	; 41
     ba8:	f2 e0       	ldi	r31, 0x02	; 2
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <SCMPLCF_SendMessageCntlPacket+0x116>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <SCMPLCF_SendMessageCntlPacket+0x11c>
     bb0:	00 00       	nop
     bb2:	73 fb       	bst	r23, 3
     bb4:	ee 27       	eor	r30, r30
     bb6:	e0 f9       	bld	r30, 0
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	f6 95       	lsr	r31
     bbc:	fe 2f       	mov	r31, r30
     bbe:	ee 27       	eor	r30, r30
     bc0:	f7 95       	ror	r31
     bc2:	e7 95       	ror	r30
     bc4:	e4 60       	ori	r30, 0x04	; 4
     bc6:	e3 b9       	out	0x03, r30	; 3
     bc8:	e9 e2       	ldi	r30, 0x29	; 41
     bca:	f2 e0       	ldi	r31, 0x02	; 2
     bcc:	31 97       	sbiw	r30, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <SCMPLCF_SendMessageCntlPacket+0x138>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <SCMPLCF_SendMessageCntlPacket+0x13e>
     bd2:	00 00       	nop
     bd4:	74 fb       	bst	r23, 4
     bd6:	44 27       	eor	r20, r20
     bd8:	40 f9       	bld	r20, 0
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	56 95       	lsr	r21
     bde:	54 2f       	mov	r21, r20
     be0:	44 27       	eor	r20, r20
     be2:	57 95       	ror	r21
     be4:	47 95       	ror	r20
     be6:	44 60       	ori	r20, 0x04	; 4
     be8:	43 b9       	out	0x03, r20	; 3
     bea:	e9 e2       	ldi	r30, 0x29	; 41
     bec:	f2 e0       	ldi	r31, 0x02	; 2
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <SCMPLCF_SendMessageCntlPacket+0x15a>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <SCMPLCF_SendMessageCntlPacket+0x160>
     bf4:	00 00       	nop
     bf6:	75 fb       	bst	r23, 5
     bf8:	22 27       	eor	r18, r18
     bfa:	20 f9       	bld	r18, 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	36 95       	lsr	r19
     c00:	32 2f       	mov	r19, r18
     c02:	22 27       	eor	r18, r18
     c04:	37 95       	ror	r19
     c06:	27 95       	ror	r18
     c08:	24 60       	ori	r18, 0x04	; 4
     c0a:	23 b9       	out	0x03, r18	; 3
     c0c:	e9 e2       	ldi	r30, 0x29	; 41
     c0e:	f2 e0       	ldi	r31, 0x02	; 2
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <SCMPLCF_SendMessageCntlPacket+0x17c>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <SCMPLCF_SendMessageCntlPacket+0x182>
     c16:	00 00       	nop
     c18:	76 fb       	bst	r23, 6
     c1a:	88 24       	eor	r8, r8
     c1c:	80 f8       	bld	r8, 0
     c1e:	91 2c       	mov	r9, r1
     c20:	94 01       	movw	r18, r8
     c22:	36 95       	lsr	r19
     c24:	32 2f       	mov	r19, r18
     c26:	22 27       	eor	r18, r18
     c28:	37 95       	ror	r19
     c2a:	27 95       	ror	r18
     c2c:	24 60       	ori	r18, 0x04	; 4
     c2e:	23 b9       	out	0x03, r18	; 3
     c30:	e9 e2       	ldi	r30, 0x29	; 41
     c32:	f2 e0       	ldi	r31, 0x02	; 2
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <SCMPLCF_SendMessageCntlPacket+0x1a0>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <SCMPLCF_SendMessageCntlPacket+0x1a6>
     c3a:	00 00       	nop
     c3c:	77 1f       	adc	r23, r23
     c3e:	77 27       	eor	r23, r23
     c40:	77 1f       	adc	r23, r23
     c42:	27 2f       	mov	r18, r23
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	36 95       	lsr	r19
     c48:	32 2f       	mov	r19, r18
     c4a:	22 27       	eor	r18, r18
     c4c:	37 95       	ror	r19
     c4e:	27 95       	ror	r18
     c50:	24 60       	ori	r18, 0x04	; 4
     c52:	23 b9       	out	0x03, r18	; 3
     c54:	e9 e2       	ldi	r30, 0x29	; 41
     c56:	f2 e0       	ldi	r31, 0x02	; 2
     c58:	31 97       	sbiw	r30, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <SCMPLCF_SendMessageCntlPacket+0x1c4>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <SCMPLCF_SendMessageCntlPacket+0x1ca>
     c5e:	00 00       	nop
     c60:	80 fb       	bst	r24, 0
     c62:	66 24       	eor	r6, r6
     c64:	60 f8       	bld	r6, 0
     c66:	71 2c       	mov	r7, r1
     c68:	93 01       	movw	r18, r6
     c6a:	36 95       	lsr	r19
     c6c:	32 2f       	mov	r19, r18
     c6e:	22 27       	eor	r18, r18
     c70:	37 95       	ror	r19
     c72:	27 95       	ror	r18
     c74:	24 60       	ori	r18, 0x04	; 4
     c76:	23 b9       	out	0x03, r18	; 3
     c78:	e9 e2       	ldi	r30, 0x29	; 41
     c7a:	f2 e0       	ldi	r31, 0x02	; 2
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <SCMPLCF_SendMessageCntlPacket+0x1e8>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <SCMPLCF_SendMessageCntlPacket+0x1ee>
     c82:	00 00       	nop
     c84:	81 fb       	bst	r24, 1
     c86:	44 24       	eor	r4, r4
     c88:	40 f8       	bld	r4, 0
     c8a:	51 2c       	mov	r5, r1
     c8c:	92 01       	movw	r18, r4
     c8e:	36 95       	lsr	r19
     c90:	32 2f       	mov	r19, r18
     c92:	22 27       	eor	r18, r18
     c94:	37 95       	ror	r19
     c96:	27 95       	ror	r18
     c98:	24 60       	ori	r18, 0x04	; 4
     c9a:	23 b9       	out	0x03, r18	; 3
     c9c:	e9 e2       	ldi	r30, 0x29	; 41
     c9e:	f2 e0       	ldi	r31, 0x02	; 2
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <SCMPLCF_SendMessageCntlPacket+0x20c>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <SCMPLCF_SendMessageCntlPacket+0x212>
     ca6:	00 00       	nop
     ca8:	82 fb       	bst	r24, 2
     caa:	ff 27       	eor	r31, r31
     cac:	f0 f9       	bld	r31, 0
     cae:	f9 83       	std	Y+1, r31	; 0x01
     cb0:	1a 82       	std	Y+2, r1	; 0x02
     cb2:	29 81       	ldd	r18, Y+1	; 0x01
     cb4:	3a 81       	ldd	r19, Y+2	; 0x02
     cb6:	36 95       	lsr	r19
     cb8:	32 2f       	mov	r19, r18
     cba:	22 27       	eor	r18, r18
     cbc:	37 95       	ror	r19
     cbe:	27 95       	ror	r18
     cc0:	24 60       	ori	r18, 0x04	; 4
     cc2:	23 b9       	out	0x03, r18	; 3
     cc4:	e9 e2       	ldi	r30, 0x29	; 41
     cc6:	f2 e0       	ldi	r31, 0x02	; 2
     cc8:	31 97       	sbiw	r30, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <SCMPLCF_SendMessageCntlPacket+0x234>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <SCMPLCF_SendMessageCntlPacket+0x23a>
     cce:	00 00       	nop
     cd0:	83 fb       	bst	r24, 3
     cd2:	88 27       	eor	r24, r24
     cd4:	80 f9       	bld	r24, 0
     cd6:	8b 83       	std	Y+3, r24	; 0x03
     cd8:	1c 82       	std	Y+4, r1	; 0x04
     cda:	2b 81       	ldd	r18, Y+3	; 0x03
     cdc:	3c 81       	ldd	r19, Y+4	; 0x04
     cde:	36 95       	lsr	r19
     ce0:	32 2f       	mov	r19, r18
     ce2:	22 27       	eor	r18, r18
     ce4:	37 95       	ror	r19
     ce6:	27 95       	ror	r18
     ce8:	24 60       	ori	r18, 0x04	; 4
     cea:	23 b9       	out	0x03, r18	; 3
     cec:	e9 e2       	ldi	r30, 0x29	; 41
     cee:	f2 e0       	ldi	r31, 0x02	; 2
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <SCMPLCF_SendMessageCntlPacket+0x25c>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <SCMPLCF_SendMessageCntlPacket+0x262>
     cf6:	00 00       	nop
     cf8:	f9 2f       	mov	r31, r25
     cfa:	f1 70       	andi	r31, 0x01	; 1
     cfc:	fd 83       	std	Y+5, r31	; 0x05
     cfe:	1e 82       	std	Y+6, r1	; 0x06
     d00:	2d 81       	ldd	r18, Y+5	; 0x05
     d02:	3e 81       	ldd	r19, Y+6	; 0x06
     d04:	36 95       	lsr	r19
     d06:	32 2f       	mov	r19, r18
     d08:	22 27       	eor	r18, r18
     d0a:	37 95       	ror	r19
     d0c:	27 95       	ror	r18
     d0e:	24 60       	ori	r18, 0x04	; 4
     d10:	23 b9       	out	0x03, r18	; 3
     d12:	e9 e2       	ldi	r30, 0x29	; 41
     d14:	f2 e0       	ldi	r31, 0x02	; 2
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <SCMPLCF_SendMessageCntlPacket+0x282>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <SCMPLCF_SendMessageCntlPacket+0x288>
     d1c:	00 00       	nop
     d1e:	91 fb       	bst	r25, 1
     d20:	ff 27       	eor	r31, r31
     d22:	f0 f9       	bld	r31, 0
     d24:	ff 83       	std	Y+7, r31	; 0x07
     d26:	18 86       	std	Y+8, r1	; 0x08
     d28:	2f 81       	ldd	r18, Y+7	; 0x07
     d2a:	38 85       	ldd	r19, Y+8	; 0x08
     d2c:	36 95       	lsr	r19
     d2e:	32 2f       	mov	r19, r18
     d30:	22 27       	eor	r18, r18
     d32:	37 95       	ror	r19
     d34:	27 95       	ror	r18
     d36:	24 60       	ori	r18, 0x04	; 4
     d38:	23 b9       	out	0x03, r18	; 3
     d3a:	e9 e2       	ldi	r30, 0x29	; 41
     d3c:	f2 e0       	ldi	r31, 0x02	; 2
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <SCMPLCF_SendMessageCntlPacket+0x2aa>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <SCMPLCF_SendMessageCntlPacket+0x2b0>
     d44:	00 00       	nop
     d46:	92 fb       	bst	r25, 2
     d48:	ff 27       	eor	r31, r31
     d4a:	f0 f9       	bld	r31, 0
     d4c:	f9 87       	std	Y+9, r31	; 0x09
     d4e:	1a 86       	std	Y+10, r1	; 0x0a
     d50:	29 85       	ldd	r18, Y+9	; 0x09
     d52:	3a 85       	ldd	r19, Y+10	; 0x0a
     d54:	36 95       	lsr	r19
     d56:	32 2f       	mov	r19, r18
     d58:	22 27       	eor	r18, r18
     d5a:	37 95       	ror	r19
     d5c:	27 95       	ror	r18
     d5e:	24 60       	ori	r18, 0x04	; 4
     d60:	23 b9       	out	0x03, r18	; 3
     d62:	e9 e2       	ldi	r30, 0x29	; 41
     d64:	f2 e0       	ldi	r31, 0x02	; 2
     d66:	31 97       	sbiw	r30, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <SCMPLCF_SendMessageCntlPacket+0x2d2>
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <SCMPLCF_SendMessageCntlPacket+0x2d8>
     d6c:	00 00       	nop
     d6e:	93 fb       	bst	r25, 3
     d70:	ff 27       	eor	r31, r31
     d72:	f0 f9       	bld	r31, 0
     d74:	fb 87       	std	Y+11, r31	; 0x0b
     d76:	1c 86       	std	Y+12, r1	; 0x0c
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	36 95       	lsr	r19
     d7e:	32 2f       	mov	r19, r18
     d80:	22 27       	eor	r18, r18
     d82:	37 95       	ror	r19
     d84:	27 95       	ror	r18
     d86:	24 60       	ori	r18, 0x04	; 4
     d88:	23 b9       	out	0x03, r18	; 3
     d8a:	e9 e2       	ldi	r30, 0x29	; 41
     d8c:	f2 e0       	ldi	r31, 0x02	; 2
     d8e:	31 97       	sbiw	r30, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <SCMPLCF_SendMessageCntlPacket+0x2fa>
     d92:	00 c0       	rjmp	.+0      	; 0xd94 <SCMPLCF_SendMessageCntlPacket+0x300>
     d94:	00 00       	nop
     d96:	94 fb       	bst	r25, 4
     d98:	ff 27       	eor	r31, r31
     d9a:	f0 f9       	bld	r31, 0
     d9c:	fd 87       	std	Y+13, r31	; 0x0d
     d9e:	1e 86       	std	Y+14, r1	; 0x0e
     da0:	2d 85       	ldd	r18, Y+13	; 0x0d
     da2:	3e 85       	ldd	r19, Y+14	; 0x0e
     da4:	36 95       	lsr	r19
     da6:	32 2f       	mov	r19, r18
     da8:	22 27       	eor	r18, r18
     daa:	37 95       	ror	r19
     dac:	27 95       	ror	r18
     dae:	24 60       	ori	r18, 0x04	; 4
     db0:	23 b9       	out	0x03, r18	; 3
     db2:	e9 e2       	ldi	r30, 0x29	; 41
     db4:	f2 e0       	ldi	r31, 0x02	; 2
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <SCMPLCF_SendMessageCntlPacket+0x322>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <SCMPLCF_SendMessageCntlPacket+0x328>
     dbc:	00 00       	nop
     dbe:	95 fb       	bst	r25, 5
     dc0:	ff 27       	eor	r31, r31
     dc2:	f0 f9       	bld	r31, 0
     dc4:	ff 87       	std	Y+15, r31	; 0x0f
     dc6:	18 8a       	std	Y+16, r1	; 0x10
     dc8:	2f 85       	ldd	r18, Y+15	; 0x0f
     dca:	38 89       	ldd	r19, Y+16	; 0x10
     dcc:	36 95       	lsr	r19
     dce:	32 2f       	mov	r19, r18
     dd0:	22 27       	eor	r18, r18
     dd2:	37 95       	ror	r19
     dd4:	27 95       	ror	r18
     dd6:	24 60       	ori	r18, 0x04	; 4
     dd8:	23 b9       	out	0x03, r18	; 3
     dda:	e9 e2       	ldi	r30, 0x29	; 41
     ddc:	f2 e0       	ldi	r31, 0x02	; 2
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <SCMPLCF_SendMessageCntlPacket+0x34a>
     de2:	00 c0       	rjmp	.+0      	; 0xde4 <SCMPLCF_SendMessageCntlPacket+0x350>
     de4:	00 00       	nop
     de6:	96 fb       	bst	r25, 6
     de8:	22 24       	eor	r2, r2
     dea:	20 f8       	bld	r2, 0
     dec:	31 2c       	mov	r3, r1
     dee:	91 01       	movw	r18, r2
     df0:	36 95       	lsr	r19
     df2:	32 2f       	mov	r19, r18
     df4:	22 27       	eor	r18, r18
     df6:	37 95       	ror	r19
     df8:	27 95       	ror	r18
     dfa:	24 60       	ori	r18, 0x04	; 4
     dfc:	23 b9       	out	0x03, r18	; 3
     dfe:	e9 e2       	ldi	r30, 0x29	; 41
     e00:	f2 e0       	ldi	r31, 0x02	; 2
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <SCMPLCF_SendMessageCntlPacket+0x36e>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <SCMPLCF_SendMessageCntlPacket+0x374>
     e08:	00 00       	nop
     e0a:	99 1f       	adc	r25, r25
     e0c:	99 27       	eor	r25, r25
     e0e:	99 1f       	adc	r25, r25
     e10:	89 2f       	mov	r24, r25
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	96 95       	lsr	r25
     e16:	98 2f       	mov	r25, r24
     e18:	88 27       	eor	r24, r24
     e1a:	97 95       	ror	r25
     e1c:	87 95       	ror	r24
     e1e:	84 60       	ori	r24, 0x04	; 4
     e20:	83 b9       	out	0x03, r24	; 3
     e22:	89 e2       	ldi	r24, 0x29	; 41
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <SCMPLCF_SendMessageCntlPacket+0x392>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <SCMPLCF_SendMessageCntlPacket+0x398>
     e2c:	00 00       	nop
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	83 b9       	out	0x03, r24	; 3
     e32:	63 96       	adiw	r28, 0x13	; 19
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	bf 90       	pop	r11
     e50:	af 90       	pop	r10
     e52:	9f 90       	pop	r9
     e54:	8f 90       	pop	r8
     e56:	7f 90       	pop	r7
     e58:	6f 90       	pop	r6
     e5a:	5f 90       	pop	r5
     e5c:	4f 90       	pop	r4
     e5e:	3f 90       	pop	r3
     e60:	2f 90       	pop	r2
     e62:	08 95       	ret

00000e64 <SCM485F_ExtMemInit>:
     e64:	85 b7       	in	r24, 0x35	; 53
     e66:	80 68       	ori	r24, 0x80	; 128
     e68:	85 bf       	out	0x35, r24	; 53
     e6a:	88 e6       	ldi	r24, 0x68	; 104
     e6c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     e70:	82 e8       	ldi	r24, 0x82	; 130
     e72:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     e76:	08 95       	ret

00000e78 <SCMEMF_WriteExtMemUSMAddr>:
}

void SCMEMF_WriteExtMemUSMAddr( uint8_t *data, uint8_t totalCnt)
{
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
	uint16_t i;
	
	for(i = 0; i<totalCnt; i++)
     e80:	a6 2f       	mov	r26, r22
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	10 97       	sbiw	r26, 0x00	; 0
     e86:	69 f1       	breq	.+90     	; 0xee2 <SCMEMF_WriteExtMemUSMAddr+0x6a>
     e88:	fc 01       	movw	r30, r24
     e8a:	31 96       	adiw	r30, 0x01	; 1
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
		//WRITE_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_OFFSET*i + USM_CNTLID_OFFSET) = data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE)]; //Control ID
		//for(j=MAX_CNTLID_BYTE; j<MAX_SN_BYTE+MAX_CNTLID_BYTE; j++)
		//{
			//WRITE_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_OFFSET*i+j-1) = data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + j];
		//}
		G_usmAdd[i] = ((uint32_t)data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + 1] <<16 ) | (data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + 2] << 8) | (data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + 3]);
     e90:	40 81       	ld	r20, Z
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	ba 01       	movw	r22, r20
     e9a:	55 27       	eor	r21, r21
     e9c:	44 27       	eor	r20, r20
     e9e:	22 81       	ldd	r18, Z+2	; 0x02
     ea0:	42 2b       	or	r20, r18
     ea2:	01 81       	ldd	r16, Z+1	; 0x01
     ea4:	10 e0       	ldi	r17, 0x00	; 0
     ea6:	10 2f       	mov	r17, r16
     ea8:	00 27       	eor	r16, r16
     eaa:	01 2e       	mov	r0, r17
     eac:	00 0c       	add	r0, r0
     eae:	22 0b       	sbc	r18, r18
     eb0:	33 0b       	sbc	r19, r19
     eb2:	40 2b       	or	r20, r16
     eb4:	51 2b       	or	r21, r17
     eb6:	62 2b       	or	r22, r18
     eb8:	73 2b       	or	r23, r19
     eba:	ec 01       	movw	r28, r24
     ebc:	cc 0f       	add	r28, r28
     ebe:	dd 1f       	adc	r29, r29
     ec0:	cc 0f       	add	r28, r28
     ec2:	dd 1f       	adc	r29, r29
     ec4:	c7 55       	subi	r28, 0x57	; 87
     ec6:	d9 4f       	sbci	r29, 0xF9	; 249
     ec8:	48 83       	st	Y, r20
     eca:	59 83       	std	Y+1, r21	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02
     ece:	7b 83       	std	Y+3, r23	; 0x03
		G_usmOPMode[i] = 0;
     ed0:	ec 01       	movw	r28, r24
     ed2:	c7 5e       	subi	r28, 0xE7	; 231
     ed4:	da 4f       	sbci	r29, 0xFA	; 250
     ed6:	18 82       	st	Y, r1

void SCMEMF_WriteExtMemUSMAddr( uint8_t *data, uint8_t totalCnt)
{
	uint16_t i;
	
	for(i = 0; i<totalCnt; i++)
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	34 96       	adiw	r30, 0x04	; 4
     edc:	8a 17       	cp	r24, r26
     ede:	9b 07       	cpc	r25, r27
     ee0:	b9 f6       	brne	.-82     	; 0xe90 <SCMEMF_WriteExtMemUSMAddr+0x18>
		//}
		//
		//WRITE_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_OFFSET*i + USM_LGMID_OFFSET) = 0; //USM to LGM ID init
	}

	G_SULCR |= UACF2;
     ee2:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
}
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <SCMEMF_WriteExtMemLGMAddr>:

void SCMEMF_WriteExtMemLGMAddr(volatile uint8_t *data, uint8_t totalCnt)
{
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
	uint16_t i;	
	for(i = 0; i<totalCnt; i++)
     f02:	a6 2f       	mov	r26, r22
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	10 97       	sbiw	r26, 0x00	; 0
     f08:	61 f1       	breq	.+88     	; 0xf62 <SCMEMF_WriteExtMemLGMAddr+0x6c>
     f0a:	fc 01       	movw	r30, r24
     f0c:	31 96       	adiw	r30, 0x01	; 1
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
		//WRITE_XMEM_ADDR(XMEM_BASE_ADDR_LGM + LGM_OFFSET*i + LGM_CNTLID_OFFSET) = data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE)]-128; //Control ID
		//for(j=MAX_CNTLID_BYTE; j<MAX_SN_BYTE+MAX_CNTLID_BYTE; j++)
		//{
			//WRITE_XMEM_ADDR(XMEM_BASE_ADDR_LGM + LGM_OFFSET*i+j-1) = data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + j];
		//}
		G_lgmAdd[i] = ((uint32_t)data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + 1] <<16 ) | (data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + 2] << 8) | (data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + 3]);
     f12:	30 81       	ld	r19, Z
     f14:	21 81       	ldd	r18, Z+1	; 0x01
     f16:	42 81       	ldd	r20, Z+2	; 0x02
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	6a 01       	movw	r12, r20
     f20:	7b 01       	movw	r14, r22
     f22:	e3 2a       	or	r14, r19
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	52 2f       	mov	r21, r18
     f28:	44 27       	eor	r20, r20
     f2a:	05 2e       	mov	r0, r21
     f2c:	00 0c       	add	r0, r0
     f2e:	66 0b       	sbc	r22, r22
     f30:	77 0b       	sbc	r23, r23
     f32:	4c 29       	or	r20, r12
     f34:	5d 29       	or	r21, r13
     f36:	6e 29       	or	r22, r14
     f38:	7f 29       	or	r23, r15
     f3a:	ec 01       	movw	r28, r24
     f3c:	cc 0f       	add	r28, r28
     f3e:	dd 1f       	adc	r29, r29
     f40:	cc 0f       	add	r28, r28
     f42:	dd 1f       	adc	r29, r29
     f44:	c7 5f       	subi	r28, 0xF7	; 247
     f46:	d9 4f       	sbci	r29, 0xF9	; 249
     f48:	48 83       	st	Y, r20
     f4a:	59 83       	std	Y+1, r21	; 0x01
     f4c:	6a 83       	std	Y+2, r22	; 0x02
     f4e:	7b 83       	std	Y+3, r23	; 0x03
		G_lgmOPMode[i] = 0;
     f50:	ec 01       	movw	r28, r24
     f52:	cf 50       	subi	r28, 0x0F	; 15
     f54:	db 4f       	sbci	r29, 0xFB	; 251
     f56:	18 82       	st	Y, r1
}

void SCMEMF_WriteExtMemLGMAddr(volatile uint8_t *data, uint8_t totalCnt)
{
	uint16_t i;	
	for(i = 0; i<totalCnt; i++)
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	34 96       	adiw	r30, 0x04	; 4
     f5c:	8a 17       	cp	r24, r26
     f5e:	9b 07       	cpc	r25, r27
     f60:	c1 f6       	brne	.-80     	; 0xf12 <SCMEMF_WriteExtMemLGMAddr+0x1c>
		G_lgmAdd[i] = ((uint32_t)data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + 1] <<16 ) | (data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + 2] << 8) | (data[i*(MAX_SN_BYTE+MAX_CNTLID_BYTE) + 3]);
		G_lgmOPMode[i] = 0;
		//WRITE_XMEM_ADDR(XMEM_BASE_ADDR_LGM + LGM_OFFSET*i + LGM_MODE_OFFSET) = 0; // Operation mode init
	}
	
	G_SULCR |= LACF3;
     f62:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
     f66:	88 60       	ori	r24, 0x08	; 8
     f68:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <SCMEMF_WriteExtMemUSMCntlID>:

void SCMEMF_WriteExtMemUSMCntlID(uint8_t totalCnt)
{
	uint16_t i;
	for(i = 0; i<totalCnt; i++)
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	61 f0       	breq	.+24     	; 0xf98 <SCMEMF_WriteExtMemUSMCntlID+0x1e>
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	e5 e0       	ldi	r30, 0x05	; 5
     f84:	f1 e1       	ldi	r31, 0x11	; 17
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	30 e0       	ldi	r19, 0x00	; 0
	{
		WRITE_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_OFFSET*i + USM_CNTLID_OFFSET) = i+1; //Control ID
     f8a:	20 83       	st	Z, r18
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	3a 96       	adiw	r30, 0x0a	; 10
}

void SCMEMF_WriteExtMemUSMCntlID(uint8_t totalCnt)
{
	uint16_t i;
	for(i = 0; i<totalCnt; i++)
     f92:	28 17       	cp	r18, r24
     f94:	39 07       	cpc	r19, r25
     f96:	c9 f7       	brne	.-14     	; 0xf8a <SCMEMF_WriteExtMemUSMCntlID+0x10>
     f98:	08 95       	ret

00000f9a <SCMEMF_WriteExtMemUSMOPMode>:
}

void SCMEMF_WriteExtMemUSMOPMode(volatile uint8_t *data, uint8_t totalCnt)
{
	uint16_t i, m=0;
	for(i = 0; i<totalCnt; i++)
     f9a:	46 2f       	mov	r20, r22
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	41 15       	cp	r20, r1
     fa0:	51 05       	cpc	r21, r1
     fa2:	79 f0       	breq	.+30     	; 0xfc2 <SCMEMF_WriteExtMemUSMOPMode+0x28>
     fa4:	fc 01       	movw	r30, r24
     fa6:	31 96       	adiw	r30, 0x01	; 1
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
	{
		//if(READ_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_CNTLID_OFFSET + USM_OFFSET*i) == data[m])
		//{
		//	WRITE_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_OFFSET*i + USM_MODE_OFFSET) = data[m + MAX_CNTLID_BYTE];
			G_usmOPMode[i] = data[m + MAX_CNTLID_BYTE];
     fac:	80 81       	ld	r24, Z
     fae:	d9 01       	movw	r26, r18
     fb0:	a7 5e       	subi	r26, 0xE7	; 231
     fb2:	ba 4f       	sbci	r27, 0xFA	; 250
     fb4:	8c 93       	st	X, r24
}

void SCMEMF_WriteExtMemUSMOPMode(volatile uint8_t *data, uint8_t totalCnt)
{
	uint16_t i, m=0;
	for(i = 0; i<totalCnt; i++)
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	32 96       	adiw	r30, 0x02	; 2
     fbc:	24 17       	cp	r18, r20
     fbe:	35 07       	cpc	r19, r21
     fc0:	a9 f7       	brne	.-22     	; 0xfac <SCMEMF_WriteExtMemUSMOPMode+0x12>
			G_usmOPMode[i] = data[m + MAX_CNTLID_BYTE];
			m=m+MAX_CNTLID_BYTE+MAX_OPMODE_BYTE;

		//}
	}
	G_SULCR |= UOCF5;
     fc2:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
     fc6:	80 62       	ori	r24, 0x20	; 32
     fc8:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
     fcc:	08 95       	ret

00000fce <SCMEMF_WriteExtMemLGMOPMode>:
}

void SCMEMF_WriteExtMemLGMOPMode(volatile uint8_t *data, uint8_t totalCnt)
{
		uint16_t i, m=0;
	for(i = 0; i<totalCnt; i++)
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	61 15       	cp	r22, r1
     fd2:	71 05       	cpc	r23, r1
     fd4:	79 f0       	breq	.+30     	; 0xff4 <SCMEMF_WriteExtMemLGMOPMode+0x26>
     fd6:	fc 01       	movw	r30, r24
     fd8:	31 96       	adiw	r30, 0x01	; 1
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
	{
		//if(READ_XMEM_ADDR(XMEM_BASE_ADDR_LGM + LGM_CNTLID_OFFSET + LGM_OFFSET*i) == data[m]-128)
		//{
			//WRITE_XMEM_ADDR(XMEM_BASE_ADDR_LGM +LGM_OFFSET*i+ LGM_MODE_OFFSET) = data[m + MAX_CNTLID_BYTE];
			G_lgmOPMode[i] = data[m + MAX_CNTLID_BYTE];
     fde:	80 81       	ld	r24, Z
     fe0:	d9 01       	movw	r26, r18
     fe2:	af 50       	subi	r26, 0x0F	; 15
     fe4:	bb 4f       	sbci	r27, 0xFB	; 251
     fe6:	8c 93       	st	X, r24
}

void SCMEMF_WriteExtMemLGMOPMode(volatile uint8_t *data, uint8_t totalCnt)
{
		uint16_t i, m=0;
	for(i = 0; i<totalCnt; i++)
     fe8:	2f 5f       	subi	r18, 0xFF	; 255
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	32 96       	adiw	r30, 0x02	; 2
     fee:	26 17       	cp	r18, r22
     ff0:	37 07       	cpc	r19, r23
     ff2:	a9 f7       	brne	.-22     	; 0xfde <SCMEMF_WriteExtMemLGMOPMode+0x10>
			m=m+MAX_CNTLID_BYTE+MAX_OPMODE_BYTE;
			
//		}
	}
	
	G_SULCR |= LOCF6;
     ff4:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
     ff8:	80 64       	ori	r24, 0x40	; 64
     ffa:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
     ffe:	08 95       	ret

00001000 <SCMEMF_WriteExtMemUSMParam>:
}

void SCMEMF_WriteExtMemUSMParam(volatile uint8_t *data, uint8_t totalCnt)
{
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
	uint16_t i, j, m=0;
	for(i = 0; i<totalCnt; i++)
    1004:	c6 2f       	mov	r28, r22
    1006:	d0 e0       	ldi	r29, 0x00	; 0
    1008:	20 97       	sbiw	r28, 0x00	; 0
    100a:	f9 f0       	breq	.+62     	; 0x104a <SCMEMF_WriteExtMemUSMParam+0x4a>
    100c:	bc 01       	movw	r22, r24
    100e:	6f 5f       	subi	r22, 0xFF	; 255
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	cc 0f       	add	r28, r28
    1014:	dd 1f       	adc	r29, r29
    1016:	cc 0f       	add	r28, r28
    1018:	dd 1f       	adc	r29, r29
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	10 c0       	rjmp	.+32     	; 0x1040 <SCMEMF_WriteExtMemUSMParam+0x40>
		//if(READ_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_CNTLID_OFFSET + USM_OFFSET*i) == data[m])
		//{
			for(j=MAX_CNTLID_BYTE; j<MAX_USM_PARAM_CNT+MAX_CNTLID_BYTE; j++)
			{
				//WRITE_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_OFFSET*i + USM_PARAM1_OFFSET+j-1) = data[m + j];
				G_usmParam[i*4+j-1] = data[m + j];
    1020:	91 91       	ld	r25, Z+
    1022:	d9 01       	movw	r26, r18
    1024:	af 5e       	subi	r26, 0xEF	; 239
    1026:	bc 4f       	sbci	r27, 0xFC	; 252
    1028:	9c 93       	st	X, r25
    102a:	2f 5f       	subi	r18, 0xFF	; 255
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t i, j, m=0;
	for(i = 0; i<totalCnt; i++)
	{
		//if(READ_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_CNTLID_OFFSET + USM_OFFSET*i) == data[m])
		//{
			for(j=MAX_CNTLID_BYTE; j<MAX_USM_PARAM_CNT+MAX_CNTLID_BYTE; j++)
    102e:	42 17       	cp	r20, r18
    1030:	53 07       	cpc	r21, r19
    1032:	b1 f7       	brne	.-20     	; 0x1020 <SCMEMF_WriteExtMemUSMParam+0x20>
    1034:	6b 5f       	subi	r22, 0xFB	; 251
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	9a 01       	movw	r18, r20
}

void SCMEMF_WriteExtMemUSMParam(volatile uint8_t *data, uint8_t totalCnt)
{
	uint16_t i, j, m=0;
	for(i = 0; i<totalCnt; i++)
    103a:	4c 17       	cp	r20, r28
    103c:	5d 07       	cpc	r21, r29
    103e:	29 f0       	breq	.+10     	; 0x104a <SCMEMF_WriteExtMemUSMParam+0x4a>
    1040:	a9 01       	movw	r20, r18
    1042:	4c 5f       	subi	r20, 0xFC	; 252
    1044:	5f 4f       	sbci	r21, 0xFF	; 255
	
	G_SULCR |= LOCF6;
}

void SCMEMF_WriteExtMemUSMParam(volatile uint8_t *data, uint8_t totalCnt)
{
    1046:	fb 01       	movw	r30, r22
    1048:	eb cf       	rjmp	.-42     	; 0x1020 <SCMEMF_WriteExtMemUSMParam+0x20>
			
			m=m+MAX_USM_PARAM_CNT+MAX_CNTLID_BYTE;
//		}
	}
	
	G_SULCR |= UPCF4;
    104a:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    104e:	80 61       	ori	r24, 0x10	; 16
    1050:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <SCMEMF_WriteExtMemUSMtoLGM>:

void SCMEMF_WriteExtMemUSMtoLGM(volatile uint8_t *data, uint8_t totalCnt)
{
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	ec 01       	movw	r28, r24
    1062:	16 2f       	mov	r17, r22
	uint16_t i, m=0;
	uint16_t tmpData;
	
	SCMPLCF_lgmTotalCntBuffInit();
    1064:	30 da       	rcall	.-2976   	; 0x4c6 <SCMPLCF_lgmTotalCntBuffInit>
	for(i = 0; i<totalCnt; i++)
    1066:	41 2f       	mov	r20, r17
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	41 15       	cp	r20, r1
    106c:	51 05       	cpc	r21, r1
    106e:	b1 f0       	breq	.+44     	; 0x109c <SCMEMF_WriteExtMemUSMtoLGM+0x42>
    1070:	de 01       	movw	r26, r28
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
	{
		//if(READ_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_CNTLID_OFFSET + USM_OFFSET*i) == data[m])
		//{
			//WRITE_XMEM_ADDR(XMEM_BASE_ADDR_USM + USM_OFFSET*i + USM_LGMID_OFFSET) = data[m + MAX_CNTLID_BYTE]-128;
			G_usmTolgm[i] = data[m + MAX_CNTLID_BYTE]-128;
    1078:	2c 91       	ld	r18, X
    107a:	20 58       	subi	r18, 0x80	; 128
    107c:	fc 01       	movw	r30, r24
    107e:	ef 56       	subi	r30, 0x6F	; 111
    1080:	fa 4f       	sbci	r31, 0xFA	; 250
    1082:	20 83       	st	Z, r18

			tmpData = data[m + MAX_CNTLID_BYTE] -128;
    1084:	ec 91       	ld	r30, X
    1086:	f0 e0       	ldi	r31, 0x00	; 0
			G_lgmTotalCnt[tmpData] ++;
    1088:	e5 5a       	subi	r30, 0xA5	; 165
    108a:	f2 4f       	sbci	r31, 0xF2	; 242
    108c:	20 81       	ld	r18, Z
    108e:	2f 5f       	subi	r18, 0xFF	; 255
    1090:	20 83       	st	Z, r18
{
	uint16_t i, m=0;
	uint16_t tmpData;
	
	SCMPLCF_lgmTotalCntBuffInit();
	for(i = 0; i<totalCnt; i++)
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	12 96       	adiw	r26, 0x02	; 2
    1096:	84 17       	cp	r24, r20
    1098:	95 07       	cpc	r25, r21
    109a:	71 f7       	brne	.-36     	; 0x1078 <SCMEMF_WriteExtMemUSMtoLGM+0x1e>
			G_lgmTotalCnt[tmpData] ++;

			m=m+MAX_USM_TO_LCM_CNT+MAX_CNTLID_BYTE;
//		}
	}
	G_SULCR |= ULCF7;
    109c:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    10a0:	80 68       	ori	r24, 0x80	; 128
    10a2:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
}
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	08 95       	ret

000010ae <main>:
#include "IGS_WSCM_Function_485.h"
#include "IGS_WSCM_Function_PLC.h"
#include "IGS_WSCM_Function_ExtMem.h"

int main(void)
{
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29

	uint8_t longCommandH, longCommandL;
	uint16_t ResLength;
	//SCMTF_SetClock();
	SCMTF_PortInit();
    10bc:	81 d8       	rcall	.-3838   	; 0x1c0 <SCMTF_PortInit>
	SCM485F_ExtMemInit();
    10be:	d2 de       	rcall	.-604    	; 0xe64 <SCM485F_ExtMemInit>
	
	
	G_idDipValue = SCMTF_ReadDipSwitchValueMYID();
    10c0:	93 d8       	rcall	.-3802   	; 0x1e8 <SCMTF_ReadDipSwitchValueMYID>
    10c2:	80 93 97 08 	sts	0x0897, r24	; 0x800897 <G_idDipValue>
	G_cntlmodeDipValue = SCMTF_ReadDipSwitchValueMode();
    10c6:	98 d8       	rcall	.-3792   	; 0x1f8 <SCMTF_ReadDipSwitchValueMode>
    10c8:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <G_cntlmodeDipValue>
	G_testmodeDipValue = SCMTF_ReadDipSwitchValueTest();
    10cc:	99 d8       	rcall	.-3790   	; 0x200 <SCMTF_ReadDipSwitchValueTest>
    10ce:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <G_testmodeDipValue>
    10d2:	10 92 8b 08 	sts	0x088B, r1	; 0x80088b <G_SULCR>

	G_SULCR = 0;
	
	
	if(G_cntlmodeDipValue == OFF) // CCM MODE
    10d6:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <G_cntlmodeDipValue>
    10da:	81 11       	cpse	r24, r1
	{
		SCM485F_USART0Init();
    10dc:	15 c0       	rjmp	.+42     	; 0x1108 <__stack+0x9>
    10de:	98 d8       	rcall	.-3792   	; 0x210 <SCM485F_USART0Init>
		SCM485F_RxCompleteTimerInit();
    10e0:	a1 d8       	rcall	.-3774   	; 0x224 <SCM485F_RxCompleteTimerInit>
    10e2:	10 92 b0 0d 	sts	0x0DB0, r1	; 0x800db0 <G_rxBuf485+0x1e3>
}

//initialize buffer
void SCM485F_BufferInit(volatile u8buf *buf)
{
	buf->index = 0;
    10e6:	10 92 af 0d 	sts	0x0DAF, r1	; 0x800daf <G_rxBuf485+0x1e2>
    10ea:	10 92 ae 0d 	sts	0x0DAE, r1	; 0x800dae <G_rxBuf485+0x1e1>
	buf->length = 0;
    10ee:	10 92 ad 0d 	sts	0x0DAD, r1	; 0x800dad <G_rxBuf485+0x1e0>
    10f2:	10 92 9f 0b 	sts	0x0B9F, r1	; 0x800b9f <G_txBuf485+0x1e3>
}

//initialize buffer
void SCM485F_BufferInit(volatile u8buf *buf)
{
	buf->index = 0;
    10f6:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <G_txBuf485+0x1e2>
	buf->length = 0;
    10fa:	10 92 9d 0b 	sts	0x0B9D, r1	; 0x800b9d <G_txBuf485+0x1e1>
    10fe:	10 92 9c 0b 	sts	0x0B9C, r1	; 0x800b9c <G_txBuf485+0x1e0>
		SCM485F_BufferInit(&G_rxBuf485);
		SCM485F_BufferInit(&G_txBuf485);
		
		SCMPLCF_StatusUSMBuffInit();
    1102:	ac d9       	rcall	.-3240   	; 0x45c <SCMPLCF_StatusUSMBuffInit>
		
		SCMPLCF_PLCTxTimerInit();
    1104:	a5 d9       	rcall	.-3254   	; 0x450 <SCMPLCF_PLCTxTimerInit>
    1106:	10 c0       	rjmp	.+32     	; 0x1128 <__stack+0x29>
    1108:	84 e6       	ldi	r24, 0x64	; 100
	}
	else // Only SCM Mode
	{

		G_totalUSMCnt = 100;
    110a:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <G_totalUSMCnt>
    110e:	c3 e0       	ldi	r28, 0x03	; 3
		G_SULCR = (UICF0 | LICF1);
    1110:	c0 93 8b 08 	sts	0x088B, r28	; 0x80088b <G_SULCR>
		
		G_usmSensingF = ON;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 8e 08 	sts	0x088E, r24	; 0x80088e <G_usmSensingF>
		G_txCntlBufPLC.type = 0x5;
    111a:	85 e0       	ldi	r24, 0x05	; 5
    111c:	80 93 98 08 	sts	0x0898, r24	; 0x800898 <G_txCntlBufPLC>

		
		SCMEMF_WriteExtMemUSMCntlID(G_totalUSMCnt);
    1120:	84 e6       	ldi	r24, 0x64	; 100
    1122:	2b df       	rcall	.-426    	; 0xf7a <SCMEMF_WriteExtMemUSMCntlID>
    1124:	95 d9       	rcall	.-3286   	; 0x450 <SCMPLCF_PLCTxTimerInit>
		SCMPLCF_PLCTxTimerInit();
    1126:	c5 bd       	out	0x25, r28	; 37
		
		TCCR2 = (0<<CS22)|(1<<CS21)|(1<<CS20);
    1128:	78 94       	sei
	}

	//SCMPLCF_PLCTxTimerInit();
	

	sei();
    112a:	dd 24       	eor	r13, r13
				else
					SCM485F_makeTxPacket(IDX_DT_RES_LGM_STAT, ResLength, G_StatusBufLGMtoSCM);
				G_RSCOMR = 0x0000;
			}
			if(longCommandL&RSCOMKL2){
				G_usmSensingF = ON;
    112c:	d3 94       	inc	r13
    112e:	0f 2e       	mov	r0, r31
				G_RSCOMR = 0x0000;	
			}
			if(longCommandH&RSCOMKH1){
				G_SULCR &= ~LICF1;
				SCMPLCF_StatusLGMBuffInit();
				G_totalLGMCnt = G_485Packet.data_length >> 2;
    1130:	f6 e0       	ldi	r31, 0x06	; 6
    1132:	ef 2e       	mov	r14, r31
    1134:	fe e0       	ldi	r31, 0x0E	; 14
    1136:	ff 2e       	mov	r15, r31
    1138:	f0 2d       	mov	r31, r0

	sei();
	
	while(1)
	{
		if(LOW == SCMTF_CheckOverCurrent())
    113a:	66 d8       	rcall	.-3892   	; 0x208 <SCMTF_CheckOverCurrent>
    113c:	81 11       	cpse	r24, r1
    113e:	0a c0       	rjmp	.+20     	; 0x1154 <__stack+0x55>
    1140:	87 ec       	ldi	r24, 0xC7	; 199
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <__stack+0x45>
    1148:	00 c0       	rjmp	.+0      	; 0x114a <__stack+0x4b>
    114a:	00 00       	nop
    114c:	5d d8       	rcall	.-3910   	; 0x208 <SCMTF_CheckOverCurrent>
		{
			_delay_us(100);
			if(LOW == SCMTF_CheckOverCurrent())
    114e:	88 23       	and	r24, r24
    1150:	09 f4       	brne	.+2      	; 0x1154 <__stack+0x55>
    1152:	ae c1       	rjmp	.+860    	; 0x14b0 <__stack+0x3b1>
    1154:	c0 91 92 08 	lds	r28, 0x0892	; 0x800892 <G_RSCOMR>
			}

		}

		// 485 Command Task 
		longCommandH = G_RSCOMR>>8;
    1158:	d0 91 93 08 	lds	r29, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    115c:	1d 2f       	mov	r17, r29
    115e:	dd 23       	and	r29, r29
		longCommandL = G_RSCOMR & 0x00FF;
		if(longCommandH){
    1160:	09 f4       	brne	.+2      	; 0x1164 <__stack+0x65>
    1162:	13 c1       	rjmp	.+550    	; 0x138a <__stack+0x28b>
    1164:	cd 2f       	mov	r28, r29
			if(longCommandH&RSCOMKH0){
    1166:	d0 ff       	sbrs	r29, 0
    1168:	2f c0       	rjmp	.+94     	; 0x11c8 <__stack+0xc9>
    116a:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
				
				G_SULCR &= ~UICF0;
    116e:	8e 7f       	andi	r24, 0xFE	; 254
    1170:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
    1174:	73 d9       	rcall	.-3354   	; 0x45c <SCMPLCF_StatusUSMBuffInit>
				SCMPLCF_StatusUSMBuffInit();
    1176:	f7 01       	movw	r30, r14
				G_totalUSMCnt = G_485Packet.data_length >> 2;
    1178:	66 81       	ldd	r22, Z+6	; 0x06
    117a:	77 81       	ldd	r23, Z+7	; 0x07
    117c:	76 95       	lsr	r23
    117e:	67 95       	ror	r22
    1180:	76 95       	lsr	r23
    1182:	67 95       	ror	r22
    1184:	60 93 96 08 	sts	0x0896, r22	; 0x800896 <G_totalUSMCnt>
    1188:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <G_StatusBufUSMtoSCM>
				G_StatusBufUSMtoSCM[0] = G_totalUSMCnt;
				SCMEMF_WriteExtMemUSMAddr(G_485Packet.data, G_totalUSMCnt);
    118c:	8e e0       	ldi	r24, 0x0E	; 14
    118e:	9e e0       	ldi	r25, 0x0E	; 14
    1190:	73 de       	rcall	.-794    	; 0xe78 <SCMEMF_WriteExtMemUSMAddr>
    1192:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
				if(G_totalUSMCnt ==0)
    1196:	81 11       	cpse	r24, r1
    1198:	07 c0       	rjmp	.+14     	; 0x11a8 <__stack+0xa9>
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	82 e4       	ldi	r24, 0x42	; 66
    11a4:	0d d9       	rcall	.-3558   	; 0x3c0 <SCM485F_makeTxPacket>
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <__stack+0xb5>
    11a8:	40 e0       	ldi	r20, 0x00	; 0
				else{
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	81 e3       	ldi	r24, 0x31	; 49
    11b2:	06 d9       	rcall	.-3572   	; 0x3c0 <SCM485F_makeTxPacket>
    11b4:	10 92 90 08 	sts	0x0890, r1	; 0x800890 <G_plcUSMCurrentIndex>
				}
				G_plcUSMCurrentIndex = 0;
    11b8:	10 92 8e 08 	sts	0x088E, r1	; 0x80088e <G_usmSensingF>
				G_usmSensingF = OFF;
    11bc:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <__data_end>
				G_LedOffFlag = 0;
    11c0:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
				G_RSCOMR = 0x0000;	
    11c4:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
    11c8:	c1 ff       	sbrs	r28, 1
			}
			if(longCommandH&RSCOMKH1){
    11ca:	2b c0       	rjmp	.+86     	; 0x1222 <__stack+0x123>
    11cc:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
				G_SULCR &= ~LICF1;
    11d0:	8d 7f       	andi	r24, 0xFD	; 253
    11d2:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
				SCMPLCF_StatusLGMBuffInit();
    11d6:	59 d9       	rcall	.-3406   	; 0x48a <SCMPLCF_StatusLGMBuffInit>
    11d8:	f7 01       	movw	r30, r14
				G_totalLGMCnt = G_485Packet.data_length >> 2;
    11da:	66 81       	ldd	r22, Z+6	; 0x06
    11dc:	77 81       	ldd	r23, Z+7	; 0x07
    11de:	76 95       	lsr	r23
    11e0:	67 95       	ror	r22
    11e2:	76 95       	lsr	r23
    11e4:	67 95       	ror	r22
    11e6:	60 93 95 08 	sts	0x0895, r22	; 0x800895 <G_totalLGMCnt>
				G_StatusBufLGMtoSCM[0] = G_totalLGMCnt;
    11ea:	60 93 1c 09 	sts	0x091C, r22	; 0x80091c <G_StatusBufLGMtoSCM>
				SCMEMF_WriteExtMemLGMAddr(G_485Packet.data, G_totalLGMCnt);
    11ee:	8e e0       	ldi	r24, 0x0E	; 14
    11f0:	9e e0       	ldi	r25, 0x0E	; 14
    11f2:	81 de       	rcall	.-766    	; 0xef6 <SCMEMF_WriteExtMemLGMAddr>
				if(G_totalUSMCnt ==0)
    11f4:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
    11f8:	81 11       	cpse	r24, r1
    11fa:	07 c0       	rjmp	.+14     	; 0x120a <__stack+0x10b>
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	82 e4       	ldi	r24, 0x42	; 66
    1206:	dc d8       	rcall	.-3656   	; 0x3c0 <SCM485F_makeTxPacket>
    1208:	06 c0       	rjmp	.+12     	; 0x1216 <__stack+0x117>
				else
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);	
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	81 e3       	ldi	r24, 0x31	; 49
    1214:	d5 d8       	rcall	.-3670   	; 0x3c0 <SCM485F_makeTxPacket>
    1216:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <G_plcLGMCurrentIndex>
				G_plcLGMCurrentIndex = 0;
				G_RSCOMR = 0x0000;					
    121a:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
    121e:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
			}
			if(longCommandH&RSCOMKH2){
    1222:	c2 ff       	sbrs	r28, 2
    1224:	1a c0       	rjmp	.+52     	; 0x125a <__stack+0x15b>
				SCMEMF_WriteExtMemUSMtoLGM(G_485Packet.data, G_totalUSMCnt);
    1226:	60 91 96 08 	lds	r22, 0x0896	; 0x800896 <G_totalUSMCnt>
    122a:	8e e0       	ldi	r24, 0x0E	; 14
    122c:	9e e0       	ldi	r25, 0x0E	; 14
    122e:	15 df       	rcall	.-470    	; 0x105a <SCMEMF_WriteExtMemUSMtoLGM>
				if(G_totalUSMCnt ==0)
    1230:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
    1234:	81 11       	cpse	r24, r1
    1236:	07 c0       	rjmp	.+14     	; 0x1246 <__stack+0x147>
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	82 e4       	ldi	r24, 0x42	; 66
    1242:	be d8       	rcall	.-3716   	; 0x3c0 <SCM485F_makeTxPacket>
				else
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);	
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <__stack+0x153>
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	81 e3       	ldi	r24, 0x31	; 49
				G_RSCOMR = 0x0000;						
    1250:	b7 d8       	rcall	.-3730   	; 0x3c0 <SCM485F_makeTxPacket>
    1252:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
    1256:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
			}
			if(longCommandH&RSCOMKH3){
    125a:	c3 ff       	sbrs	r28, 3
				G_usmOPModeOnF = ON;
    125c:	1d c0       	rjmp	.+58     	; 0x1298 <__stack+0x199>
				SCMEMF_WriteExtMemUSMOPMode(G_485Packet.data, G_totalUSMCnt);
    125e:	d0 92 8d 08 	sts	0x088D, r13	; 0x80088d <G_usmOPModeOnF>
    1262:	60 91 96 08 	lds	r22, 0x0896	; 0x800896 <G_totalUSMCnt>
    1266:	8e e0       	ldi	r24, 0x0E	; 14
    1268:	9e e0       	ldi	r25, 0x0E	; 14
				SCMPLCF_StatusUSMBuffInit();
    126a:	97 de       	rcall	.-722    	; 0xf9a <SCMEMF_WriteExtMemUSMOPMode>
    126c:	f7 d8       	rcall	.-3602   	; 0x45c <SCMPLCF_StatusUSMBuffInit>
				if(G_totalUSMCnt ==0)
    126e:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
    1272:	81 11       	cpse	r24, r1
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    1274:	07 c0       	rjmp	.+14     	; 0x1284 <__stack+0x185>
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	82 e4       	ldi	r24, 0x42	; 66
    1280:	9f d8       	rcall	.-3778   	; 0x3c0 <SCM485F_makeTxPacket>
				else
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);
    1282:	06 c0       	rjmp	.+12     	; 0x1290 <__stack+0x191>
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	81 e3       	ldi	r24, 0x31	; 49
				G_RSCOMR = 0x0000;	
    128e:	98 d8       	rcall	.-3792   	; 0x3c0 <SCM485F_makeTxPacket>
    1290:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
			}
			if(longCommandH&RSCOMKH4){
    1294:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
				G_lgmOPModeOnF = ON;
    1298:	c4 ff       	sbrs	r28, 4
    129a:	1d c0       	rjmp	.+58     	; 0x12d6 <__stack+0x1d7>
				SCMEMF_WriteExtMemLGMOPMode(G_485Packet.data, G_totalUSMCnt);
    129c:	d0 92 8c 08 	sts	0x088C, r13	; 0x80088c <G_lgmOPModeOnF>
    12a0:	60 91 96 08 	lds	r22, 0x0896	; 0x800896 <G_totalUSMCnt>
    12a4:	8e e0       	ldi	r24, 0x0E	; 14
    12a6:	9e e0       	ldi	r25, 0x0E	; 14
				SCMPLCF_StatusLGMBuffInit();
    12a8:	92 de       	rcall	.-732    	; 0xfce <SCMEMF_WriteExtMemLGMOPMode>
    12aa:	ef d8       	rcall	.-3618   	; 0x48a <SCMPLCF_StatusLGMBuffInit>
				if(G_totalUSMCnt ==0)
    12ac:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
    12b0:	81 11       	cpse	r24, r1
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <__stack+0x1c3>
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	82 e4       	ldi	r24, 0x42	; 66
    12be:	80 d8       	rcall	.-3840   	; 0x3c0 <SCM485F_makeTxPacket>
				else
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <__stack+0x1cf>
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	81 e3       	ldi	r24, 0x31	; 49
				G_RSCOMR = 0x0000;	
    12cc:	79 d8       	rcall	.-3854   	; 0x3c0 <SCM485F_makeTxPacket>
    12ce:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
			}
			if(longCommandH&RSCOMKH5){
    12d2:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
				EIMSK = (0<<INT6);
    12d6:	c5 ff       	sbrs	r28, 5
				G_usmSensingF = OFF;
    12d8:	22 c0       	rjmp	.+68     	; 0x131e <__stack+0x21f>
    12da:	19 be       	out	0x39, r1	; 57
				SCMEMF_WriteExtMemUSMParam(G_485Packet.data,G_totalUSMCnt);
    12dc:	10 92 8e 08 	sts	0x088E, r1	; 0x80088e <G_usmSensingF>
    12e0:	60 91 96 08 	lds	r22, 0x0896	; 0x800896 <G_totalUSMCnt>
    12e4:	8e e0       	ldi	r24, 0x0E	; 14
				ParamCnt = 0;
    12e6:	9e e0       	ldi	r25, 0x0E	; 14
    12e8:	8b de       	rcall	.-746    	; 0x1000 <SCMEMF_WriteExtMemUSMParam>
				G_plcUSMCurrentIndex = 0;
    12ea:	10 92 8a 08 	sts	0x088A, r1	; 0x80088a <ParamCnt>
				SCMPLCF_StatusUSMBuffInit();
    12ee:	10 92 90 08 	sts	0x0890, r1	; 0x800890 <G_plcUSMCurrentIndex>
				if(G_totalUSMCnt ==0)
    12f2:	b4 d8       	rcall	.-3736   	; 0x45c <SCMPLCF_StatusUSMBuffInit>
    12f4:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    12f8:	81 11       	cpse	r24, r1
    12fa:	07 c0       	rjmp	.+14     	; 0x130a <__stack+0x20b>
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	82 e4       	ldi	r24, 0x42	; 66
				else
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);
    1306:	5c d8       	rcall	.-3912   	; 0x3c0 <SCM485F_makeTxPacket>
    1308:	06 c0       	rjmp	.+12     	; 0x1316 <__stack+0x217>
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
				G_RSCOMR = 0x0000;	
    1312:	81 e3       	ldi	r24, 0x31	; 49
    1314:	55 d8       	rcall	.-3926   	; 0x3c0 <SCM485F_makeTxPacket>
    1316:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
			}
			if(longCommandH&RSCOMKH6){
    131a:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
				G_usmOPModeOnF = OFF;
    131e:	c6 ff       	sbrs	r28, 6
    1320:	18 c0       	rjmp	.+48     	; 0x1352 <__stack+0x253>
				SCMPLCF_StatusUSMBuffInit();
    1322:	10 92 8d 08 	sts	0x088D, r1	; 0x80088d <G_usmOPModeOnF>
				if(G_totalUSMCnt ==0)
    1326:	9a d8       	rcall	.-3788   	; 0x45c <SCMPLCF_StatusUSMBuffInit>
    1328:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    132c:	81 11       	cpse	r24, r1
    132e:	07 c0       	rjmp	.+14     	; 0x133e <__stack+0x23f>
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	82 e4       	ldi	r24, 0x42	; 66
				else
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);
    133a:	42 d8       	rcall	.-3964   	; 0x3c0 <SCM485F_makeTxPacket>
    133c:	06 c0       	rjmp	.+12     	; 0x134a <__stack+0x24b>
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	81 e3       	ldi	r24, 0x31	; 49
				
				G_RSCOMR = 0x0000;
    1348:	3b d8       	rcall	.-3978   	; 0x3c0 <SCM485F_makeTxPacket>
    134a:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
    134e:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
				
			}
			if(longCommandH&RSCOMKH7){
    1352:	11 23       	and	r17, r17
    1354:	0c f0       	brlt	.+2      	; 0x1358 <__stack+0x259>
				G_lgmOPModeOnF = OFF;
    1356:	f1 ce       	rjmp	.-542    	; 0x113a <__stack+0x3b>
    1358:	10 92 8c 08 	sts	0x088C, r1	; 0x80088c <G_lgmOPModeOnF>
				SCMPLCF_StatusLGMBuffInit();
				if(G_totalUSMCnt ==0)
    135c:	96 d8       	rcall	.-3796   	; 0x48a <SCMPLCF_StatusLGMBuffInit>
    135e:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
    1362:	81 11       	cpse	r24, r1
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    1364:	07 c0       	rjmp	.+14     	; 0x1374 <__stack+0x275>
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	82 e4       	ldi	r24, 0x42	; 66
    1370:	27 d8       	rcall	.-4018   	; 0x3c0 <SCM485F_makeTxPacket>
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <__stack+0x281>
				else
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	81 e3       	ldi	r24, 0x31	; 49
    137e:	20 d8       	rcall	.-4032   	; 0x3c0 <SCM485F_makeTxPacket>
    1380:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
					
				G_RSCOMR = 0x0000;
    1384:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
    1388:	d8 ce       	rjmp	.-592    	; 0x113a <__stack+0x3b>
    138a:	cc 23       	and	r28, r28
				
			}			
		}
		else if(longCommandL){
    138c:	09 f4       	brne	.+2      	; 0x1390 <__stack+0x291>
    138e:	d5 ce       	rjmp	.-598    	; 0x113a <__stack+0x3b>
    1390:	8e 01       	movw	r16, r28
			
			if(longCommandL&RSCOMKL0){
    1392:	11 27       	eor	r17, r17
    1394:	c0 ff       	sbrs	r28, 0
    1396:	1b c0       	rjmp	.+54     	; 0x13ce <__stack+0x2cf>
    1398:	60 91 96 08 	lds	r22, 0x0896	; 0x800896 <G_totalUSMCnt>
				ResLength = 1 + ((G_totalUSMCnt +1) >> 1);
    139c:	61 11       	cpse	r22, r1
				
				if(G_totalUSMCnt ==0){
    139e:	07 c0       	rjmp	.+14     	; 0x13ae <__stack+0x2af>
    13a0:	40 e0       	ldi	r20, 0x00	; 0
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	82 e4       	ldi	r24, 0x42	; 66
    13aa:	0a d8       	rcall	.-4076   	; 0x3c0 <SCM485F_makeTxPacket>
    13ac:	0c c0       	rjmp	.+24     	; 0x13c6 <__stack+0x2c7>
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	6f 5f       	subi	r22, 0xFF	; 255
				}
				else{
					SCM485F_makeTxPacket(IDX_DT_RES_USM_STAT, ResLength, G_StatusBufUSMtoSCM);
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	75 95       	asr	r23
    13b6:	67 95       	ror	r22
    13b8:	6f 5f       	subi	r22, 0xFF	; 255
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	44 e4       	ldi	r20, 0x44	; 68
    13be:	59 e0       	ldi	r21, 0x09	; 9
    13c0:	81 e1       	ldi	r24, 0x11	; 17
    13c2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SCM485F_makeTxPacket>
    13c6:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
				}
				G_RSCOMR = 0x0000;
    13ca:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
    13ce:	01 ff       	sbrs	r16, 1
    13d0:	1e c0       	rjmp	.+60     	; 0x140e <__stack+0x30f>
			}
			if(longCommandL&RSCOMKL1){
    13d2:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
				ResLength = 1 + ((G_totalLGMCnt +1) >> 1);
				if(G_totalUSMCnt ==0){
    13d6:	81 11       	cpse	r24, r1
    13d8:	08 c0       	rjmp	.+16     	; 0x13ea <__stack+0x2eb>
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	50 e0       	ldi	r21, 0x00	; 0
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	82 e4       	ldi	r24, 0x42	; 66
    13e4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SCM485F_makeTxPacket>
    13e8:	0e c0       	rjmp	.+28     	; 0x1406 <__stack+0x307>
    13ea:	60 91 95 08 	lds	r22, 0x0895	; 0x800895 <G_totalLGMCnt>
				}					
				else
					SCM485F_makeTxPacket(IDX_DT_RES_LGM_STAT, ResLength, G_StatusBufLGMtoSCM);
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	6f 5f       	subi	r22, 0xFF	; 255
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	75 95       	asr	r23
    13f6:	67 95       	ror	r22
    13f8:	6f 5f       	subi	r22, 0xFF	; 255
    13fa:	7f 4f       	sbci	r23, 0xFF	; 255
    13fc:	4c e1       	ldi	r20, 0x1C	; 28
    13fe:	59 e0       	ldi	r21, 0x09	; 9
    1400:	82 e1       	ldi	r24, 0x12	; 18
    1402:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SCM485F_makeTxPacket>
    1406:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
				G_RSCOMR = 0x0000;
    140a:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
    140e:	02 ff       	sbrs	r16, 2
    1410:	19 c0       	rjmp	.+50     	; 0x1444 <__stack+0x345>
			}
			if(longCommandL&RSCOMKL2){
    1412:	d0 92 8e 08 	sts	0x088E, r13	; 0x80088e <G_usmSensingF>
				G_usmSensingF = ON;
    1416:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
				if(G_totalUSMCnt ==0)
    141a:	81 11       	cpse	r24, r1
    141c:	08 c0       	rjmp	.+16     	; 0x142e <__stack+0x32f>
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	50 e0       	ldi	r21, 0x00	; 0
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	82 e4       	ldi	r24, 0x42	; 66
    1428:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SCM485F_makeTxPacket>
    142c:	07 c0       	rjmp	.+14     	; 0x143c <__stack+0x33d>
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	50 e0       	ldi	r21, 0x00	; 0
				else
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	81 e3       	ldi	r24, 0x31	; 49
    1438:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SCM485F_makeTxPacket>
    143c:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
				G_RSCOMR = 0x0000;	
    1440:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
    1444:	03 ff       	sbrs	r16, 3
    1446:	19 c0       	rjmp	.+50     	; 0x147a <__stack+0x37b>
			}
			if(longCommandL&RSCOMKL3){
    1448:	10 92 8e 08 	sts	0x088E, r1	; 0x80088e <G_usmSensingF>
				G_usmSensingF = OFF;
    144c:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
				if(G_totalUSMCnt ==0)
    1450:	81 11       	cpse	r24, r1
    1452:	08 c0       	rjmp	.+16     	; 0x1464 <__stack+0x365>
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	50 e0       	ldi	r21, 0x00	; 0
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	82 e4       	ldi	r24, 0x42	; 66
    145e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SCM485F_makeTxPacket>
    1462:	07 c0       	rjmp	.+14     	; 0x1472 <__stack+0x373>
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	50 e0       	ldi	r21, 0x00	; 0
				else
					SCM485F_makeTxPacket(IDX_DT_ACK, 0, (uint8_t *)0);				
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	81 e3       	ldi	r24, 0x31	; 49
    146e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SCM485F_makeTxPacket>
    1472:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
				G_RSCOMR = 0x0000;	
    1476:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
    147a:	cc 23       	and	r28, r28
    147c:	0c f0       	brlt	.+2      	; 0x1480 <__stack+0x381>
				
			}
			if(longCommandL&RSCOMKL6){
				
			}
			if(longCommandL&RSCOMKL7){
    147e:	5d ce       	rjmp	.-838    	; 0x113a <__stack+0x3b>
    1480:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
				if(G_totalUSMCnt ==0)
    1484:	81 11       	cpse	r24, r1
    1486:	08 c0       	rjmp	.+16     	; 0x1498 <__stack+0x399>
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	50 e0       	ldi	r21, 0x00	; 0
					SCM485F_makeTxPacket(IDX_DT_INIT, 0, (uint8_t *)0);
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	82 e4       	ldi	r24, 0x42	; 66
    1492:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SCM485F_makeTxPacket>
    1496:	07 c0       	rjmp	.+14     	; 0x14a6 <__stack+0x3a7>
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
				else
					SCM485F_makeTxPacket(IDX_DT_NACK, 0, (uint8_t *)0);				
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	81 e4       	ldi	r24, 0x41	; 65
    14a2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SCM485F_makeTxPacket>
    14a6:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <G_RSCOMR+0x1>
				G_RSCOMR = 0x0000;	
    14aa:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <G_RSCOMR>
    14ae:	45 ce       	rjmp	.-886    	; 0x113a <__stack+0x3b>
    14b0:	80 e1       	ldi	r24, 0x10	; 16
    14b2:	83 b9       	out	0x03, r24	; 3
		if(LOW == SCMTF_CheckOverCurrent())
		{
			_delay_us(100);
			if(LOW == SCMTF_CheckOverCurrent())
			{
				PORTE = (1<<PE4);
    14b4:	c4 98       	cbi	0x18, 4	; 24
    14b6:	80 e0       	ldi	r24, 0x00	; 0
				PORTB &= ~(1<<PB4);
    14b8:	90 e0       	ldi	r25, 0x00	; 0
					SCM485F_makeTxPacket(IDX_DT_NACK, 0, (uint8_t *)0);				
				G_RSCOMR = 0x0000;	
			}
		}
	}
}
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	08 95       	ret

000014ca <__vector_18>:
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0

ISR(USART0_RX_vect)
{
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
    14d4:	0b b6       	in	r0, 0x3b	; 59
    14d6:	0f 92       	push	r0
    14d8:	2f 93       	push	r18
    14da:	3f 93       	push	r19
    14dc:	4f 93       	push	r20
    14de:	5f 93       	push	r21
    14e0:	6f 93       	push	r22
    14e2:	7f 93       	push	r23
    14e4:	8f 93       	push	r24
    14e6:	9f 93       	push	r25
    14e8:	af 93       	push	r26
    14ea:	bf 93       	push	r27
    14ec:	ef 93       	push	r30
    14ee:	ff 93       	push	r31
	u8data = UDR0;
    14f0:	8c b1       	in	r24, 0x0c	; 12
    14f2:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <u8data>
	if(WRITE_FAIL == SCM485F_OneByteWrite_485(&G_rxBuf485, u8data))
    14f6:	60 91 ca 0b 	lds	r22, 0x0BCA	; 0x800bca <u8data>
    14fa:	8d ec       	ldi	r24, 0xCD	; 205
    14fc:	9b e0       	ldi	r25, 0x0B	; 11
    14fe:	0e 94 18 01 	call	0x230	; 0x230 <SCM485F_OneByteWrite_485>
    1502:	81 11       	cpse	r24, r1
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <__vector_18+0x4c>
}

//initialize buffer
void SCM485F_BufferInit(volatile u8buf *buf)
{
	buf->index = 0;
    1506:	10 92 b0 0d 	sts	0x0DB0, r1	; 0x800db0 <G_rxBuf485+0x1e3>
    150a:	10 92 af 0d 	sts	0x0DAF, r1	; 0x800daf <G_rxBuf485+0x1e2>
	buf->length = 0;
    150e:	10 92 ae 0d 	sts	0x0DAE, r1	; 0x800dae <G_rxBuf485+0x1e1>
    1512:	10 92 ad 0d 	sts	0x0DAD, r1	; 0x800dad <G_rxBuf485+0x1e0>
		// ERROR :: 485 Rx buffer overFlow
		SCM485F_BufferInit(&G_rxBuf485);
	}
	
	//485 Rx Data Complete Timer Setting
	TCNT0 = 0;
    1516:	12 be       	out	0x32, r1	; 50
	TCCR0 = (1<<CS02)|(0<<CS01)|(0<<CS00);//TIMSK |= (1<<TOIE0);
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	83 bf       	out	0x33, r24	; 51
	//G_485TimerOverFlowCnt =0;
	
	PORTB |= (1<<PB4);
    151c:	c4 9a       	sbi	0x18, 4	; 24
	PORTB |= (1<<PB5);
    151e:	c5 9a       	sbi	0x18, 5	; 24
	PORTB |= (1<<PB6);
    1520:	c6 9a       	sbi	0x18, 6	; 24
}
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0b be       	out	0x3b, r0	; 59
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti

00001548 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
    1548:	1f 92       	push	r1
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	0f 92       	push	r0
    1550:	11 24       	eor	r1, r1
    1552:	0b b6       	in	r0, 0x3b	; 59
    1554:	0f 92       	push	r0
    1556:	2f 93       	push	r18
    1558:	3f 93       	push	r19
    155a:	4f 93       	push	r20
    155c:	5f 93       	push	r21
    155e:	6f 93       	push	r22
    1560:	7f 93       	push	r23
    1562:	8f 93       	push	r24
    1564:	9f 93       	push	r25
    1566:	af 93       	push	r26
    1568:	bf 93       	push	r27
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
	TCNT0 = 0;
    156e:	12 be       	out	0x32, r1	; 50
	
	G_485TimerOverFlowCnt++;
    1570:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <G_485TimerOverFlowCnt>
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <G_485TimerOverFlowCnt>
	if(G_485TimerOverFlowCnt == 1 ) // 10ms 동안 RS485 Rx 가 없으면 Rx Complete
    157a:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <G_485TimerOverFlowCnt>
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	09 f0       	breq	.+2      	; 0x1584 <__vector_16+0x3c>
    1582:	ad c0       	rjmp	.+346    	; 0x16de <__vector_16+0x196>
	{
		
		TCCR0 = (0<<CS02)|(0<<CS01)|(0<<CS00);//TIMSK &= ~(1<<TOIE0); //Timer OverFlow Interrupt Disable
    1584:	13 be       	out	0x33, r1	; 51
}

//initialize buffer
void SCM485F_BufferInit(volatile u8buf *buf)
{
	buf->index = 0;
    1586:	10 92 b0 0d 	sts	0x0DB0, r1	; 0x800db0 <G_rxBuf485+0x1e3>
    158a:	10 92 af 0d 	sts	0x0DAF, r1	; 0x800daf <G_rxBuf485+0x1e2>
	buf->length = 0;
    158e:	10 92 ae 0d 	sts	0x0DAE, r1	; 0x800dae <G_rxBuf485+0x1e1>
    1592:	10 92 ad 0d 	sts	0x0DAD, r1	; 0x800dad <G_rxBuf485+0x1e0>
}

//initialize buffer
void SCM485F_BufferInit(volatile u8buf *buf)
{
	buf->index = 0;
    1596:	10 92 9f 0b 	sts	0x0B9F, r1	; 0x800b9f <G_txBuf485+0x1e3>
    159a:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <G_txBuf485+0x1e2>
	buf->length = 0;
    159e:	10 92 9d 0b 	sts	0x0B9D, r1	; 0x800b9d <G_txBuf485+0x1e1>
    15a2:	10 92 9c 0b 	sts	0x0B9C, r1	; 0x800b9c <G_txBuf485+0x1e0>
		SCM485F_BufferInit(&G_rxBuf485);
		SCM485F_BufferInit(&G_txBuf485);
		
		G_485TimerOverFlowCnt = 0;
    15a6:	10 92 94 08 	sts	0x0894, r1	; 0x800894 <G_485TimerOverFlowCnt>
		switch(SCM485F_getRxPacket()){
    15aa:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <SCM485F_getRxPacket>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	31 f0       	breq	.+12     	; 0x15be <__vector_16+0x76>
    15b2:	18 f0       	brcs	.+6      	; 0x15ba <__vector_16+0x72>
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	29 f0       	breq	.+10     	; 0x15c2 <__vector_16+0x7a>
    15b8:	92 c0       	rjmp	.+292    	; 0x16de <__vector_16+0x196>
			case RS485_RX_STX_ERROR :{
				PORTB &= ~(1<<PB6);
    15ba:	c6 98       	cbi	0x18, 6	; 24
				break;
    15bc:	90 c0       	rjmp	.+288    	; 0x16de <__vector_16+0x196>
			}
			case RS485_RX_CRC_ERROR :{
				PORTB &= ~(1<<PB6);
    15be:	c6 98       	cbi	0x18, 6	; 24
				break;
    15c0:	8e c0       	rjmp	.+284    	; 0x16de <__vector_16+0x196>
			}
			case RS485_RX_INVALID_ID :{
				break;
			}
			case RS485_RX_OK :{
				switch(G_485Packet.data_type){
    15c2:	e0 91 0b 0e 	lds	r30, 0x0E0B	; 0x800e0b <G_485Packet+0x5>
    15c6:	8e 2f       	mov	r24, r30
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	fc 01       	movw	r30, r24
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	e2 36       	cpi	r30, 0x62	; 98
    15d0:	f1 05       	cpc	r31, r1
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <__vector_16+0x8e>
    15d4:	7b c0       	rjmp	.+246    	; 0x16cc <__vector_16+0x184>
    15d6:	ea 5b       	subi	r30, 0xBA	; 186
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	ea c4       	rjmp	.+2516   	; 0x1fb0 <__tablejump2__>
					case IDX_DT_SET_USM_ADDRESS:{
						G_RSCOMR |= (RSCOMKH0<<8);
    15dc:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    15e0:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    15e4:	91 60       	ori	r25, 0x01	; 1
    15e6:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    15ea:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    15ee:	77 c0       	rjmp	.+238    	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_SET_LGM_ADDRESS:{
						G_RSCOMR |= (RSCOMKH1<<8);
    15f0:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    15f4:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    15f8:	92 60       	ori	r25, 0x02	; 2
    15fa:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    15fe:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    1602:	6d c0       	rjmp	.+218    	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_SET_USM_TO_LGM :{
						G_RSCOMR |= (RSCOMKH2<<8);
    1604:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    1608:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    160c:	94 60       	ori	r25, 0x04	; 4
    160e:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    1612:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    1616:	63 c0       	rjmp	.+198    	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_SET_USM_OP_MODE:{
						G_RSCOMR |= (RSCOMKH3<<8);
    1618:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    161c:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    1620:	98 60       	ori	r25, 0x08	; 8
    1622:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    1626:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    162a:	59 c0       	rjmp	.+178    	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_SET_LGM_OP_MODE:{
						G_RSCOMR |= (RSCOMKH4<<8);
    162c:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    1630:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    1634:	90 61       	ori	r25, 0x10	; 16
    1636:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    163a:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    163e:	4f c0       	rjmp	.+158    	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_SET_USM_PARAM:{
						G_RSCOMR |= (RSCOMKH5<<8);
    1640:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    1644:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    1648:	90 62       	ori	r25, 0x20	; 32
    164a:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    164e:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    1652:	45 c0       	rjmp	.+138    	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_SET_USM_OP_MODE_OFF :{
						G_RSCOMR |= (RSCOMKH6<<8);
    1654:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    1658:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    165c:	90 64       	ori	r25, 0x40	; 64
    165e:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    1662:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    1666:	3b c0       	rjmp	.+118    	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_SET_LGM_OP_MODE_OFF :{
						G_RSCOMR |= (RSCOMKH7<<8);
    1668:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    166c:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    1670:	90 68       	ori	r25, 0x80	; 128
    1672:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    1676:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    167a:	31 c0       	rjmp	.+98     	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_REQ_USM_STAT:{
						G_RSCOMR |= (RSCOMKL0);
    167c:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    1680:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    1684:	81 60       	ori	r24, 0x01	; 1
    1686:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    168a:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    168e:	27 c0       	rjmp	.+78     	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_REQ_LGM_STAT:{
						G_RSCOMR |= (RSCOMKL1);
    1690:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    1694:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    1698:	82 60       	ori	r24, 0x02	; 2
    169a:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    169e:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    16a2:	1d c0       	rjmp	.+58     	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_SENSING_ON:{
						G_RSCOMR |= (RSCOMKL2);
    16a4:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    16a8:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    16ac:	84 60       	ori	r24, 0x04	; 4
    16ae:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    16b2:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    16b6:	13 c0       	rjmp	.+38     	; 0x16de <__vector_16+0x196>
					}
					case IDX_DT_SENSING_OFF:{
						G_RSCOMR |= (RSCOMKL3);
    16b8:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    16bc:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    16c0:	88 60       	ori	r24, 0x08	; 8
    16c2:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    16c6:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
						break;
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <__vector_16+0x196>
					//case ReservedL3:{
						//G_RSCOMR |= (RSCOMKL6);
						//break;
					//}									
					default:{
						G_RSCOMR |= (RSCOMKL7);
    16cc:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <G_RSCOMR>
    16d0:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <G_RSCOMR+0x1>
    16d4:	80 68       	ori	r24, 0x80	; 128
    16d6:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <G_RSCOMR+0x1>
    16da:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <G_RSCOMR>
				break;
			}
		}
		
	}
}
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	4f 91       	pop	r20
    16f2:	3f 91       	pop	r19
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0b be       	out	0x3b, r0	; 59
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	0f 90       	pop	r0
    1700:	1f 90       	pop	r1
    1702:	18 95       	reti

00001704 <__vector_19>:

// RS485 : UDR0 Empty interrupt service routine
ISR(USART0_UDRE_vect)
{
    1704:	1f 92       	push	r1
    1706:	0f 92       	push	r0
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	0f 92       	push	r0
    170c:	11 24       	eor	r1, r1
    170e:	0b b6       	in	r0, 0x3b	; 59
    1710:	0f 92       	push	r0
    1712:	2f 93       	push	r18
    1714:	3f 93       	push	r19
    1716:	4f 93       	push	r20
    1718:	5f 93       	push	r21
    171a:	6f 93       	push	r22
    171c:	7f 93       	push	r23
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	af 93       	push	r26
    1724:	bf 93       	push	r27
    1726:	ef 93       	push	r30
    1728:	ff 93       	push	r31
	
	if(SCM485F_OneByteRead_485(&G_txBuf485, &UDR0) == 1)
    172a:	6c e2       	ldi	r22, 0x2C	; 44
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	8c eb       	ldi	r24, 0xBC	; 188
    1730:	99 e0       	ldi	r25, 0x09	; 9
    1732:	0e 94 2f 01 	call	0x25e	; 0x25e <SCM485F_OneByteRead_485>
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	11 f4       	brne	.+4      	; 0x173e <__vector_19+0x3a>
	{
		UCSR0B &= ~(1<<UDRIE0);
    173a:	55 98       	cbi	0x0a, 5	; 10
		UCSR0B |= (1<<TXCIE0);
    173c:	56 9a       	sbi	0x0a, 6	; 10
	}
}
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	7f 91       	pop	r23
    174c:	6f 91       	pop	r22
    174e:	5f 91       	pop	r21
    1750:	4f 91       	pop	r20
    1752:	3f 91       	pop	r19
    1754:	2f 91       	pop	r18
    1756:	0f 90       	pop	r0
    1758:	0b be       	out	0x3b, r0	; 59
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	0f 90       	pop	r0
    1760:	1f 90       	pop	r1
    1762:	18 95       	reti

00001764 <__vector_20>:
//
ISR(USART0_TX_vect)
{
    1764:	1f 92       	push	r1
    1766:	0f 92       	push	r0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	0f 92       	push	r0
    176c:	11 24       	eor	r1, r1
    176e:	8f 93       	push	r24
	UCSR0B &= ~(1<<TXCIE0);
    1770:	56 98       	cbi	0x0a, 6	; 10
	UCSR0B |= (1<<RXCIE0);
    1772:	57 9a       	sbi	0x0a, 7	; 10
	PORTE |= (1<<PE2); // Tx : PE2 low / Rx : PE2 high
    1774:	1a 9a       	sbi	0x03, 2	; 3
	TCCR2 = (0<<CS22)|(1<<CS21)|(1<<CS20);//TIMSK |= (1<<TOIE2);
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
    177a:	14 bc       	out	0x24, r1	; 36
	
}
    177c:	8f 91       	pop	r24
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <__vector_10>:


//PLC Tx : 8bit Timer : 2ms / 1loop
ISR(TIMER2_OVF_vect)
{
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	0b b6       	in	r0, 0x3b	; 59
    1794:	0f 92       	push	r0
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
	//uint32_t tmp = 0;
	TCNT2 = 0;
    17bc:	14 bc       	out	0x24, r1	; 36

	G_plcTimerOverFlowCnt++;
    17be:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <G_plcTimerOverFlowCnt>
    17c2:	8f 5f       	subi	r24, 0xFF	; 255
    17c4:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <G_plcTimerOverFlowCnt>
	
	//[S] OverFlow Function
	if(G_plcTimerOverFlowCnt > 30) // 60ms 마다 한번씩 Tx
    17c8:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <G_plcTimerOverFlowCnt>
    17cc:	8f 31       	cpi	r24, 0x1F	; 31
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <__vector_10+0x4a>
    17d0:	65 c3       	rjmp	.+1738   	; 0x1e9c <__vector_10+0x714>
	{
		
		G_plcTimerOverFlowCnt=0;
    17d2:	10 92 91 08 	sts	0x0891, r1	; 0x800891 <G_plcTimerOverFlowCnt>
		
		if(G_plcUSMCurrentIndex >= G_totalUSMCnt)
    17d6:	90 91 90 08 	lds	r25, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    17da:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
    17de:	98 17       	cp	r25, r24
    17e0:	10 f0       	brcs	.+4      	; 0x17e6 <__vector_10+0x5e>
		{
			G_plcUSMCurrentIndex = 0;
    17e2:	10 92 90 08 	sts	0x0890, r1	; 0x800890 <G_plcUSMCurrentIndex>
		}
		if(G_plcLGMCurrentIndex >= G_totalLGMCnt)
    17e6:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    17ea:	90 91 95 08 	lds	r25, 0x0895	; 0x800895 <G_totalLGMCnt>
    17ee:	89 17       	cp	r24, r25
    17f0:	10 f0       	brcs	.+4      	; 0x17f6 <__vector_10+0x6e>
		{
			G_plcLGMCurrentIndex = 0;
    17f2:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <G_plcLGMCurrentIndex>
		}

		//[S] Start Address Setting
		initialUSMF = G_SULCR & (1<<SULCR0);
    17f6:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    17fa:	81 70       	andi	r24, 0x01	; 1
    17fc:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <initialUSMF>
		initialLGMF = G_SULCR & (1<<SULCR1);
    1800:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    1804:	82 70       	andi	r24, 0x02	; 2
    1806:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <initialLGMF>
		paramCF = G_SULCR & (1<<SULCR4);
    180a:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    180e:	80 71       	andi	r24, 0x10	; 16
    1810:	80 93 cb 0b 	sts	0x0BCB, r24	; 0x800bcb <paramCF>

		if(UICF0 != initialUSMF || LICF1 != initialLGMF)
    1814:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <initialUSMF>
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	29 f4       	brne	.+10     	; 0x1826 <__vector_10+0x9e>
    181c:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <initialLGMF>
    1820:	82 30       	cpi	r24, 0x02	; 2
    1822:	09 f4       	brne	.+2      	; 0x1826 <__vector_10+0x9e>
    1824:	0d c1       	rjmp	.+538    	; 0x1a40 <__vector_10+0x2b8>
		{
			//[S] Start USM Address Setting
			uaddCF = G_SULCR & (1<<SULCR2);
    1826:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    182a:	84 70       	andi	r24, 0x04	; 4
    182c:	80 93 c8 0b 	sts	0x0BC8, r24	; 0x800bc8 <uaddCF>
			laddCF = G_SULCR & (1<<SULCR3);
    1830:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    1834:	88 70       	andi	r24, 0x08	; 8
    1836:	80 93 da 0d 	sts	0x0DDA, r24	; 0x800dda <laddCF>
			
			
			if(UACF2 == uaddCF)
    183a:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <uaddCF>
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	09 f0       	breq	.+2      	; 0x1844 <__vector_10+0xbc>
    1842:	8e c0       	rjmp	.+284    	; 0x1960 <__vector_10+0x1d8>
			{
				if(G_LedOffFlag == 0){
    1844:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <__data_end>
    1848:	81 11       	cpse	r24, r1
    184a:	1e c0       	rjmp	.+60     	; 0x1888 <__vector_10+0x100>
					G_txAddBufPLC.type = IDX_PCLTYPE_ADDR_SET_START;
    184c:	e5 e1       	ldi	r30, 0x15	; 21
    184e:	f9 e0       	ldi	r31, 0x09	; 9
    1850:	87 e0       	ldi	r24, 0x07	; 7
    1852:	80 83       	st	Z, r24
					G_txAddBufPLC.SerialNumber[0] = 0;
    1854:	11 82       	std	Z+1, r1	; 0x01
					G_txAddBufPLC.SerialNumber[1] = 0;
    1856:	12 82       	std	Z+2, r1	; 0x02
					G_txAddBufPLC.SerialNumber[2] = 0;
    1858:	13 82       	std	Z+3, r1	; 0x03
					G_txAddBufPLC.controlID =       0;
    185a:	14 82       	std	Z+4, r1	; 0x04
					SCMPLCF_SendMessageAddPacket(G_txAddBufPLC);
    185c:	40 91 15 09 	lds	r20, 0x0915	; 0x800915 <G_txAddBufPLC>
    1860:	50 91 16 09 	lds	r21, 0x0916	; 0x800916 <G_txAddBufPLC+0x1>
    1864:	60 91 17 09 	lds	r22, 0x0917	; 0x800917 <G_txAddBufPLC+0x2>
    1868:	70 91 18 09 	lds	r23, 0x0918	; 0x800918 <G_txAddBufPLC+0x3>
    186c:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <G_txAddBufPLC+0x4>
    1870:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SCMPLCF_SendMessageAddPacket>
					G_LedOffFlag = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    187a:	8f e1       	ldi	r24, 0x1F	; 31
    187c:	9e e4       	ldi	r25, 0x4E	; 78
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <__vector_10+0xf6>
    1882:	00 c0       	rjmp	.+0      	; 0x1884 <__vector_10+0xfc>
    1884:	00 00       	nop
    1886:	0a c3       	rjmp	.+1556   	; 0x1e9c <__vector_10+0x714>
					
					_delay_ms(10);
				}else{
					G_txAddBufPLC.type = IDX_PCLTYPE_CCM_USM_ADDR;
    1888:	a5 e1       	ldi	r26, 0x15	; 21
    188a:	b9 e0       	ldi	r27, 0x09	; 9
    188c:	1c 92       	st	X, r1
					G_txAddBufPLC.SerialNumber[0] = (G_usmAdd[G_plcUSMCurrentIndex] >> 16) & 0xFF;
    188e:	e0 91 90 08 	lds	r30, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	ee 0f       	add	r30, r30
    1896:	ff 1f       	adc	r31, r31
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	e7 55       	subi	r30, 0x57	; 87
    189e:	f9 4f       	sbci	r31, 0xF9	; 249
    18a0:	40 81       	ld	r20, Z
    18a2:	51 81       	ldd	r21, Z+1	; 0x01
    18a4:	62 81       	ldd	r22, Z+2	; 0x02
    18a6:	73 81       	ldd	r23, Z+3	; 0x03
    18a8:	ab 01       	movw	r20, r22
    18aa:	66 27       	eor	r22, r22
    18ac:	77 27       	eor	r23, r23
    18ae:	11 96       	adiw	r26, 0x01	; 1
    18b0:	4c 93       	st	X, r20
    18b2:	11 97       	sbiw	r26, 0x01	; 1
					G_txAddBufPLC.SerialNumber[1] = (G_usmAdd[G_plcUSMCurrentIndex] >>  8) & 0xFF;
    18b4:	e0 91 90 08 	lds	r30, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	e7 55       	subi	r30, 0x57	; 87
    18c4:	f9 4f       	sbci	r31, 0xF9	; 249
    18c6:	40 81       	ld	r20, Z
    18c8:	51 81       	ldd	r21, Z+1	; 0x01
    18ca:	62 81       	ldd	r22, Z+2	; 0x02
    18cc:	73 81       	ldd	r23, Z+3	; 0x03
    18ce:	45 2f       	mov	r20, r21
    18d0:	56 2f       	mov	r21, r22
    18d2:	67 2f       	mov	r22, r23
    18d4:	77 27       	eor	r23, r23
    18d6:	12 96       	adiw	r26, 0x02	; 2
    18d8:	4c 93       	st	X, r20
    18da:	12 97       	sbiw	r26, 0x02	; 2
					G_txAddBufPLC.SerialNumber[2] = (G_usmAdd[G_plcUSMCurrentIndex]      ) & 0xFF;
    18dc:	e0 91 90 08 	lds	r30, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	e7 55       	subi	r30, 0x57	; 87
    18ec:	f9 4f       	sbci	r31, 0xF9	; 249
    18ee:	40 81       	ld	r20, Z
    18f0:	51 81       	ldd	r21, Z+1	; 0x01
    18f2:	62 81       	ldd	r22, Z+2	; 0x02
    18f4:	73 81       	ldd	r23, Z+3	; 0x03
    18f6:	13 96       	adiw	r26, 0x03	; 3
    18f8:	4c 93       	st	X, r20
    18fa:	13 97       	sbiw	r26, 0x03	; 3
					G_txAddBufPLC.controlID =       G_plcUSMCurrentIndex+1;
    18fc:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1900:	8f 5f       	subi	r24, 0xFF	; 255
    1902:	14 96       	adiw	r26, 0x04	; 4
    1904:	8c 93       	st	X, r24
					PORTB &= ~(1<<PB5);
    1906:	c5 98       	cbi	0x18, 5	; 24
				
						
					if(G_plcUSMCurrentIndex == G_totalUSMCnt-1)
    1908:	20 91 90 08 	lds	r18, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	28 17       	cp	r18, r24
    1918:	39 07       	cpc	r19, r25
    191a:	71 f4       	brne	.+28     	; 0x1938 <__vector_10+0x1b0>
					{
						G_SULCR |= UICF0;
    191c:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    1920:	81 60       	ori	r24, 0x01	; 1
    1922:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
						G_SULCR &= ~UACF2;
    1926:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    192a:	8b 7f       	andi	r24, 0xFB	; 251
    192c:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
						G_plcUSMCurrentIndex = 0;
    1930:	10 92 90 08 	sts	0x0890, r1	; 0x800890 <G_plcUSMCurrentIndex>
						PORTB |= (1<<PB5);
    1934:	c5 9a       	sbi	0x18, 5	; 24
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <__vector_10+0x1ba>
					}
					else
					{
						G_plcUSMCurrentIndex++;
    1938:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <G_plcUSMCurrentIndex>
					}
				
					SCMPLCF_SendMessageAddPacket(G_txAddBufPLC);
    1942:	40 91 15 09 	lds	r20, 0x0915	; 0x800915 <G_txAddBufPLC>
    1946:	50 91 16 09 	lds	r21, 0x0916	; 0x800916 <G_txAddBufPLC+0x1>
    194a:	60 91 17 09 	lds	r22, 0x0917	; 0x800917 <G_txAddBufPLC+0x2>
    194e:	70 91 18 09 	lds	r23, 0x0918	; 0x800918 <G_txAddBufPLC+0x3>
    1952:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <G_txAddBufPLC+0x4>
    1956:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SCMPLCF_SendMessageAddPacket>
					EIMSK = (1<<INT6);
    195a:	80 e4       	ldi	r24, 0x40	; 64
    195c:	89 bf       	out	0x39, r24	; 57
    195e:	9e c2       	rjmp	.+1340   	; 0x1e9c <__vector_10+0x714>
				}
			}
			//[E] End USM Address Setting
			//[S] Start LGM Address SEtting
			else{
				if(LACF3 == laddCF){
    1960:	80 91 da 0d 	lds	r24, 0x0DDA	; 0x800dda <laddCF>
    1964:	88 30       	cpi	r24, 0x08	; 8
    1966:	09 f0       	breq	.+2      	; 0x196a <__vector_10+0x1e2>
    1968:	99 c2       	rjmp	.+1330   	; 0x1e9c <__vector_10+0x714>
					G_txAddBufPLC.type = IDX_PCLTYPE_CCM_LGM_ADDR;
    196a:	a5 e1       	ldi	r26, 0x15	; 21
    196c:	b9 e0       	ldi	r27, 0x09	; 9
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	8c 93       	st	X, r24
					G_txAddBufPLC.SerialNumber[0] = (G_lgmAdd[G_plcLGMCurrentIndex] >> 16) & 0xFF;
    1972:	e0 91 8f 08 	lds	r30, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	ee 0f       	add	r30, r30
    197a:	ff 1f       	adc	r31, r31
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	e7 5f       	subi	r30, 0xF7	; 247
    1982:	f9 4f       	sbci	r31, 0xF9	; 249
    1984:	40 81       	ld	r20, Z
    1986:	51 81       	ldd	r21, Z+1	; 0x01
    1988:	62 81       	ldd	r22, Z+2	; 0x02
    198a:	73 81       	ldd	r23, Z+3	; 0x03
    198c:	ab 01       	movw	r20, r22
    198e:	66 27       	eor	r22, r22
    1990:	77 27       	eor	r23, r23
    1992:	11 96       	adiw	r26, 0x01	; 1
    1994:	4c 93       	st	X, r20
    1996:	11 97       	sbiw	r26, 0x01	; 1
					G_txAddBufPLC.SerialNumber[1] = (G_lgmAdd[G_plcLGMCurrentIndex] >>  8) & 0xFF;
    1998:	e0 91 8f 08 	lds	r30, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	e7 5f       	subi	r30, 0xF7	; 247
    19a8:	f9 4f       	sbci	r31, 0xF9	; 249
    19aa:	40 81       	ld	r20, Z
    19ac:	51 81       	ldd	r21, Z+1	; 0x01
    19ae:	62 81       	ldd	r22, Z+2	; 0x02
    19b0:	73 81       	ldd	r23, Z+3	; 0x03
    19b2:	45 2f       	mov	r20, r21
    19b4:	56 2f       	mov	r21, r22
    19b6:	67 2f       	mov	r22, r23
    19b8:	77 27       	eor	r23, r23
    19ba:	12 96       	adiw	r26, 0x02	; 2
    19bc:	4c 93       	st	X, r20
    19be:	12 97       	sbiw	r26, 0x02	; 2
					G_txAddBufPLC.SerialNumber[2] = (G_lgmAdd[G_plcLGMCurrentIndex]      ) & 0xFF;
    19c0:	e0 91 8f 08 	lds	r30, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	ee 0f       	add	r30, r30
    19c8:	ff 1f       	adc	r31, r31
    19ca:	ee 0f       	add	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	e7 5f       	subi	r30, 0xF7	; 247
    19d0:	f9 4f       	sbci	r31, 0xF9	; 249
    19d2:	40 81       	ld	r20, Z
    19d4:	51 81       	ldd	r21, Z+1	; 0x01
    19d6:	62 81       	ldd	r22, Z+2	; 0x02
    19d8:	73 81       	ldd	r23, Z+3	; 0x03
    19da:	13 96       	adiw	r26, 0x03	; 3
    19dc:	4c 93       	st	X, r20
    19de:	13 97       	sbiw	r26, 0x03	; 3
					G_txAddBufPLC.controlID =       G_plcLGMCurrentIndex+1;
    19e0:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	14 96       	adiw	r26, 0x04	; 4
    19e8:	8c 93       	st	X, r24
					PORTB &= ~(1<<PB5);
    19ea:	c5 98       	cbi	0x18, 5	; 24

					if(G_plcLGMCurrentIndex == G_totalLGMCnt-1){
    19ec:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <G_totalLGMCnt>
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	28 17       	cp	r18, r24
    19fc:	39 07       	cpc	r19, r25
    19fe:	71 f4       	brne	.+28     	; 0x1a1c <__vector_10+0x294>
						G_SULCR |= LICF1;
    1a00:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    1a04:	82 60       	ori	r24, 0x02	; 2
    1a06:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
						G_SULCR &= ~LACF3;
    1a0a:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    1a0e:	87 7f       	andi	r24, 0xF7	; 247
    1a10:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
						G_plcLGMCurrentIndex = 0;
    1a14:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <G_plcLGMCurrentIndex>
						PORTB |= (1<<PB5);
    1a18:	c5 9a       	sbi	0x18, 5	; 24
    1a1a:	05 c0       	rjmp	.+10     	; 0x1a26 <__vector_10+0x29e>
					}
					else{
						G_plcLGMCurrentIndex++;
    1a1c:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    1a20:	8f 5f       	subi	r24, 0xFF	; 255
    1a22:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <G_plcLGMCurrentIndex>
					}
					
					SCMPLCF_SendMessageAddPacket(G_txAddBufPLC);
    1a26:	40 91 15 09 	lds	r20, 0x0915	; 0x800915 <G_txAddBufPLC>
    1a2a:	50 91 16 09 	lds	r21, 0x0916	; 0x800916 <G_txAddBufPLC+0x1>
    1a2e:	60 91 17 09 	lds	r22, 0x0917	; 0x800917 <G_txAddBufPLC+0x2>
    1a32:	70 91 18 09 	lds	r23, 0x0918	; 0x800918 <G_txAddBufPLC+0x3>
    1a36:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <G_txAddBufPLC+0x4>
    1a3a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SCMPLCF_SendMessageAddPacket>
    1a3e:	2e c2       	rjmp	.+1116   	; 0x1e9c <__vector_10+0x714>
				}
			}
			//[E]End LGM Address SEtting
		}
		//[E] End Address Setting
		else if(UICF0 == initialUSMF && LICF1 == initialLGMF && paramCF == UPCF4){
    1a40:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <initialUSMF>
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <__vector_10+0x2c2>
    1a48:	97 c0       	rjmp	.+302    	; 0x1b78 <__vector_10+0x3f0>
    1a4a:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <initialLGMF>
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <__vector_10+0x2cc>
    1a52:	92 c0       	rjmp	.+292    	; 0x1b78 <__vector_10+0x3f0>
    1a54:	80 91 cb 0b 	lds	r24, 0x0BCB	; 0x800bcb <paramCF>
    1a58:	80 31       	cpi	r24, 0x10	; 16
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <__vector_10+0x2d6>
    1a5c:	8d c0       	rjmp	.+282    	; 0x1b78 <__vector_10+0x3f0>
			PORTB &= ~(1<<PB5);
    1a5e:	c5 98       	cbi	0x18, 5	; 24
			G_txCntlBufPLC.type = IDX_PCLTYPE_CCM_USM_CNTL;
    1a60:	e8 e9       	ldi	r30, 0x98	; 152
    1a62:	f8 e0       	ldi	r31, 0x08	; 8
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	80 83       	st	Z, r24
			G_txCntlBufPLC.controlID = G_plcUSMCurrentIndex+1;
    1a68:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1a6c:	8f 5f       	subi	r24, 0xFF	; 255
    1a6e:	81 83       	std	Z+1, r24	; 0x01

			if(ParamCnt == 0){
    1a70:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <ParamCnt>
    1a74:	81 11       	cpse	r24, r1
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <__vector_10+0x30e>
				G_txCntlBufPLC.OperationMode = IDX_OPM_PARAM_SETTING_PARAM1;
    1a78:	df 01       	movw	r26, r30
    1a7a:	8c e0       	ldi	r24, 0x0C	; 12
    1a7c:	82 83       	std	Z+2, r24	; 0x02
				G_txCntlBufPLC.data = G_usmParam[G_plcUSMCurrentIndex*4+0];
    1a7e:	e0 91 90 08 	lds	r30, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1a82:	94 e0       	ldi	r25, 0x04	; 4
    1a84:	e9 9f       	mul	r30, r25
    1a86:	f0 01       	movw	r30, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	ef 5e       	subi	r30, 0xEF	; 239
    1a8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a8e:	80 81       	ld	r24, Z
    1a90:	13 96       	adiw	r26, 0x03	; 3
    1a92:	8c 93       	st	X, r24
    1a94:	41 c0       	rjmp	.+130    	; 0x1b18 <__vector_10+0x390>
			}
			else if(ParamCnt == 1){
    1a96:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <ParamCnt>
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	91 f4       	brne	.+36     	; 0x1ac2 <__vector_10+0x33a>
				G_txCntlBufPLC.OperationMode = IDX_OPM_PARAM_SETTING_PARAM2;
    1a9e:	a8 e9       	ldi	r26, 0x98	; 152
    1aa0:	b8 e0       	ldi	r27, 0x08	; 8
    1aa2:	8d e0       	ldi	r24, 0x0D	; 13
    1aa4:	12 96       	adiw	r26, 0x02	; 2
    1aa6:	8c 93       	st	X, r24
    1aa8:	12 97       	sbiw	r26, 0x02	; 2
				G_txCntlBufPLC.data = G_usmParam[G_plcUSMCurrentIndex*4+1];;
    1aaa:	e0 91 90 08 	lds	r30, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	e8 9f       	mul	r30, r24
    1ab2:	f0 01       	movw	r30, r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	ee 5e       	subi	r30, 0xEE	; 238
    1ab8:	fc 4f       	sbci	r31, 0xFC	; 252
    1aba:	80 81       	ld	r24, Z
    1abc:	13 96       	adiw	r26, 0x03	; 3
    1abe:	8c 93       	st	X, r24
    1ac0:	2b c0       	rjmp	.+86     	; 0x1b18 <__vector_10+0x390>
			}
			else if(ParamCnt == 2){
    1ac2:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <ParamCnt>
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	91 f4       	brne	.+36     	; 0x1aee <__vector_10+0x366>
				G_txCntlBufPLC.OperationMode = IDX_OPM_PARAM_SETTING_PARAM3;
    1aca:	a8 e9       	ldi	r26, 0x98	; 152
    1acc:	b8 e0       	ldi	r27, 0x08	; 8
    1ace:	8e e0       	ldi	r24, 0x0E	; 14
    1ad0:	12 96       	adiw	r26, 0x02	; 2
    1ad2:	8c 93       	st	X, r24
    1ad4:	12 97       	sbiw	r26, 0x02	; 2
				G_txCntlBufPLC.data = G_usmParam[G_plcUSMCurrentIndex*4+2];
    1ad6:	e0 91 90 08 	lds	r30, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1ada:	94 e0       	ldi	r25, 0x04	; 4
    1adc:	e9 9f       	mul	r30, r25
    1ade:	f0 01       	movw	r30, r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	ed 5e       	subi	r30, 0xED	; 237
    1ae4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ae6:	80 81       	ld	r24, Z
    1ae8:	13 96       	adiw	r26, 0x03	; 3
    1aea:	8c 93       	st	X, r24
    1aec:	15 c0       	rjmp	.+42     	; 0x1b18 <__vector_10+0x390>
			}
			else if(ParamCnt == 3){
    1aee:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <ParamCnt>
    1af2:	83 30       	cpi	r24, 0x03	; 3
    1af4:	89 f4       	brne	.+34     	; 0x1b18 <__vector_10+0x390>
				G_txCntlBufPLC.OperationMode = IDX_OPM_PARAM_SETTING_PARAM4;
    1af6:	a8 e9       	ldi	r26, 0x98	; 152
    1af8:	b8 e0       	ldi	r27, 0x08	; 8
    1afa:	8f e0       	ldi	r24, 0x0F	; 15
    1afc:	12 96       	adiw	r26, 0x02	; 2
    1afe:	8c 93       	st	X, r24
    1b00:	12 97       	sbiw	r26, 0x02	; 2
				G_txCntlBufPLC.data = G_usmParam[G_plcUSMCurrentIndex*4+3];
    1b02:	e0 91 90 08 	lds	r30, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1b06:	84 e0       	ldi	r24, 0x04	; 4
    1b08:	e8 9f       	mul	r30, r24
    1b0a:	f0 01       	movw	r30, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	ec 5e       	subi	r30, 0xEC	; 236
    1b10:	fc 4f       	sbci	r31, 0xFC	; 252
    1b12:	80 81       	ld	r24, Z
    1b14:	13 96       	adiw	r26, 0x03	; 3
    1b16:	8c 93       	st	X, r24
			}
			
			if(ParamCnt == 3){
    1b18:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <ParamCnt>
    1b1c:	83 30       	cpi	r24, 0x03	; 3
    1b1e:	41 f4       	brne	.+16     	; 0x1b30 <__vector_10+0x3a8>
				ParamCnt = 0;
    1b20:	10 92 8a 08 	sts	0x088A, r1	; 0x80088a <ParamCnt>
				G_plcUSMCurrentIndex+=1;
    1b24:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1b28:	8f 5f       	subi	r24, 0xFF	; 255
    1b2a:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <G_plcUSMCurrentIndex>
    1b2e:	05 c0       	rjmp	.+10     	; 0x1b3a <__vector_10+0x3b2>
			}
			else{
				ParamCnt+=1;
    1b30:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <ParamCnt>
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <ParamCnt>
			}

			if(G_plcUSMCurrentIndex == G_totalUSMCnt-1 ){
    1b3a:	20 91 90 08 	lds	r18, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	28 17       	cp	r18, r24
    1b4a:	39 07       	cpc	r19, r25
    1b4c:	51 f4       	brne	.+20     	; 0x1b62 <__vector_10+0x3da>
				PORTB |= (1<<PB5);
    1b4e:	c5 9a       	sbi	0x18, 5	; 24
				G_SULCR &= ~UPCF4;
    1b50:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <G_SULCR>
    1b54:	8f 7e       	andi	r24, 0xEF	; 239
    1b56:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <G_SULCR>
				ParamLoopCnt = 0;
    1b5a:	10 92 89 08 	sts	0x0889, r1	; 0x800889 <ParamLoopCnt>
				G_plcUSMCurrentIndex = 0;
    1b5e:	10 92 90 08 	sts	0x0890, r1	; 0x800890 <G_plcUSMCurrentIndex>
				//G_usmSensingF = ON;
			}
			
			SCMPLCF_SendMessageCntlPacket(G_txCntlBufPLC);
    1b62:	60 91 98 08 	lds	r22, 0x0898	; 0x800898 <G_txCntlBufPLC>
    1b66:	70 91 99 08 	lds	r23, 0x0899	; 0x800899 <G_txCntlBufPLC+0x1>
    1b6a:	80 91 9a 08 	lds	r24, 0x089A	; 0x80089a <G_txCntlBufPLC+0x2>
    1b6e:	90 91 9b 08 	lds	r25, 0x089B	; 0x80089b <G_txCntlBufPLC+0x3>
    1b72:	0e 94 4a 05 	call	0xa94	; 0xa94 <SCMPLCF_SendMessageCntlPacket>
    1b76:	92 c1       	rjmp	.+804    	; 0x1e9c <__vector_10+0x714>
			
			//_delay_ms(10);
		}
		//[S] Start Mode Control in Sensing mode
		else{
			if(G_usmSensingF == ON){
    1b78:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <G_usmSensingF>
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <__vector_10+0x3fa>
    1b80:	8d c1       	rjmp	.+794    	; 0x1e9c <__vector_10+0x714>
				uint8_t lop_mode, uop_mode;
				
				//[S] Start Update LGM
				if(G_cntlmodeDipValue == OFF){ // Only CCM Mode
    1b82:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <G_cntlmodeDipValue>
    1b86:	81 11       	cpse	r24, r1
    1b88:	4b c0       	rjmp	.+150    	; 0x1c20 <__vector_10+0x498>
					
					G_txCntlBufPLC.type = IDX_PCLTYPE_CCM_LGM_CNTL;
    1b8a:	e8 e9       	ldi	r30, 0x98	; 152
    1b8c:	f8 e0       	ldi	r31, 0x08	; 8
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	80 83       	st	Z, r24
					G_txCntlBufPLC.controlID = G_plcLGMCurrentIndex+1;
    1b92:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	81 83       	std	Z+1, r24	; 0x01
					

					//lopmodeCF = G_SULCR & (1<<SULCR6);
					lop_mode = IDX_OPM_FORC_LED_ON_GREEN;
					//if(lopmodeCF == LOCF6){
					if(G_lgmOPModeOnF == ON){
    1b9a:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <G_lgmOPModeOnF>
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	79 f4       	brne	.+30     	; 0x1bc0 <__vector_10+0x438>
						lop_mode = G_lgmOPMode[G_plcLGMCurrentIndex];
    1ba2:	e0 91 8f 08 	lds	r30, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	ef 50       	subi	r30, 0x0F	; 15
    1baa:	fb 4f       	sbci	r31, 0xFB	; 251
    1bac:	80 81       	ld	r24, Z
						if(lop_mode == 0){
    1bae:	81 11       	cpse	r24, r1
    1bb0:	0d c0       	rjmp	.+26     	; 0x1bcc <__vector_10+0x444>
							lop_mode = G_lgmStatusBuf[G_plcLGMCurrentIndex];
    1bb2:	e0 91 8f 08 	lds	r30, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	e0 56       	subi	r30, 0x60	; 96
    1bba:	f4 4f       	sbci	r31, 0xF4	; 244
    1bbc:	80 81       	ld	r24, Z
    1bbe:	06 c0       	rjmp	.+12     	; 0x1bcc <__vector_10+0x444>
						}
					}
					else{
							lop_mode = G_lgmStatusBuf[G_txCntlBufPLC.controlID-1];
    1bc0:	e0 91 99 08 	lds	r30, 0x0899	; 0x800899 <G_txCntlBufPLC+0x1>
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	e1 56       	subi	r30, 0x61	; 97
    1bc8:	f4 4f       	sbci	r31, 0xF4	; 244
    1bca:	80 81       	ld	r24, Z
					}
					if(G_testmodeDipValue == ON){
    1bcc:	20 91 1b 09 	lds	r18, 0x091B	; 0x80091b <G_testmodeDipValue>
    1bd0:	21 30       	cpi	r18, 0x01	; 1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <__vector_10+0x44e>
						lop_mode = IDX_OPM_FORC_LED_BLINKING;
    1bd4:	86 e0       	ldi	r24, 0x06	; 6
					}
					
					G_txCntlBufPLC.OperationMode = lop_mode;
    1bd6:	e8 e9       	ldi	r30, 0x98	; 152
    1bd8:	f8 e0       	ldi	r31, 0x08	; 8
    1bda:	82 83       	std	Z+2, r24	; 0x02
					G_txCntlBufPLC.data = 0x00;
    1bdc:	13 82       	std	Z+3, r1	; 0x03
					
					
					
					if(G_plcLGMCurrentIndex == G_totalLGMCnt-1){
    1bde:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	89 2f       	mov	r24, r25
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	28 17       	cp	r18, r24
    1bec:	39 07       	cpc	r19, r25
    1bee:	19 f4       	brne	.+6      	; 0x1bf6 <__vector_10+0x46e>
						G_plcLGMCurrentIndex = 0;
    1bf0:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <G_plcLGMCurrentIndex>
    1bf4:	05 c0       	rjmp	.+10     	; 0x1c00 <__vector_10+0x478>
					}
					else{
						G_plcLGMCurrentIndex++;
    1bf6:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <G_plcLGMCurrentIndex>
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <G_plcLGMCurrentIndex>
					}
					SCMPLCF_SendMessageCntlPacket(G_txCntlBufPLC);
    1c00:	60 91 98 08 	lds	r22, 0x0898	; 0x800898 <G_txCntlBufPLC>
    1c04:	70 91 99 08 	lds	r23, 0x0899	; 0x800899 <G_txCntlBufPLC+0x1>
    1c08:	80 91 9a 08 	lds	r24, 0x089A	; 0x80089a <G_txCntlBufPLC+0x2>
    1c0c:	90 91 9b 08 	lds	r25, 0x089B	; 0x80089b <G_txCntlBufPLC+0x3>
    1c10:	0e 94 4a 05 	call	0xa94	; 0xa94 <SCMPLCF_SendMessageCntlPacket>
    1c14:	ef e1       	ldi	r30, 0x1F	; 31
    1c16:	fe e4       	ldi	r31, 0x4E	; 78
    1c18:	31 97       	sbiw	r30, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <__vector_10+0x490>
    1c1c:	00 c0       	rjmp	.+0      	; 0x1c1e <__vector_10+0x496>
    1c1e:	00 00       	nop
				}
				//[E] End Update LGM

				
				//UMS Control
				G_txCntlBufPLC.type = (G_cntlmodeDipValue == OFF) ? IDX_PCLTYPE_CCM_USM_CNTL : IDX_PCLTYPE_SCM_USM_CNTL;
    1c20:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <G_cntlmodeDipValue>
    1c24:	88 23       	and	r24, r24
    1c26:	11 f0       	breq	.+4      	; 0x1c2c <__vector_10+0x4a4>
    1c28:	84 e0       	ldi	r24, 0x04	; 4
    1c2a:	01 c0       	rjmp	.+2      	; 0x1c2e <__vector_10+0x4a6>
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	e8 e9       	ldi	r30, 0x98	; 152
    1c30:	f8 e0       	ldi	r31, 0x08	; 8
    1c32:	80 83       	st	Z, r24
				G_txCntlBufPLC.controlID = G_plcUSMCurrentIndex+1;
    1c34:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1c38:	8f 5f       	subi	r24, 0xFF	; 255
    1c3a:	81 83       	std	Z+1, r24	; 0x01
				uop_mode = (G_cntlmodeDipValue == OFF) ? G_usmOPMode[G_plcUSMCurrentIndex] : 0;
    1c3c:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <G_cntlmodeDipValue>
    1c40:	81 11       	cpse	r24, r1
    1c42:	06 c0       	rjmp	.+12     	; 0x1c50 <__vector_10+0x4c8>
    1c44:	e0 91 90 08 	lds	r30, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	e7 5e       	subi	r30, 0xE7	; 231
    1c4c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c4e:	80 81       	ld	r24, Z
				G_usmCurrentCntlID = G_txCntlBufPLC.controlID;
    1c50:	80 91 99 08 	lds	r24, 0x0899	; 0x800899 <G_txCntlBufPLC+0x1>
    1c54:	80 93 c9 0b 	sts	0x0BC9, r24	; 0x800bc9 <G_usmCurrentCntlID>
				
				if(G_cntlmodeDipValue != OFF) PORTB &= ~(1<<PB5);
    1c58:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <G_cntlmodeDipValue>
    1c5c:	81 11       	cpse	r24, r1
    1c5e:	c5 98       	cbi	0x18, 5	; 24
						

				//uopmodeCF = G_SULCR & (1<<SULCR5);
				//if(uopmodeCF == UOCF5){
				if(G_usmOPModeOnF == ON){
    1c60:	80 91 8d 08 	lds	r24, 0x088D	; 0x80088d <G_usmOPModeOnF>
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <__vector_10+0x4e2>
    1c68:	13 c1       	rjmp	.+550    	; 0x1e90 <__vector_10+0x708>
					uop_mode = G_usmOPMode[G_plcUSMCurrentIndex];
    1c6a:	e0 91 90 08 	lds	r30, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	e7 5e       	subi	r30, 0xE7	; 231
    1c72:	fa 4f       	sbci	r31, 0xFA	; 250
    1c74:	80 81       	ld	r24, Z
				}
				else{
					uop_mode = 0;
				}
				if(G_testmodeDipValue == ON){
    1c76:	90 91 1b 09 	lds	r25, 0x091B	; 0x80091b <G_testmodeDipValue>
    1c7a:	91 30       	cpi	r25, 0x01	; 1
    1c7c:	d1 f0       	breq	.+52     	; 0x1cb2 <__vector_10+0x52a>
					uop_mode = IDX_OPM_FORC_LED_BLINKING;
				}

				switch(uop_mode)
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	f1 f0       	breq	.+60     	; 0x1cbe <__vector_10+0x536>
    1c82:	28 f4       	brcc	.+10     	; 0x1c8e <__vector_10+0x506>
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	09 f1       	breq	.+66     	; 0x1cca <__vector_10+0x542>
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	29 f1       	breq	.+74     	; 0x1cd6 <__vector_10+0x54e>
    1c8c:	2a c0       	rjmp	.+84     	; 0x1ce2 <__vector_10+0x55a>
    1c8e:	85 30       	cpi	r24, 0x05	; 5
    1c90:	51 f0       	breq	.+20     	; 0x1ca6 <__vector_10+0x51e>
    1c92:	18 f0       	brcs	.+6      	; 0x1c9a <__vector_10+0x512>
    1c94:	86 30       	cpi	r24, 0x06	; 6
    1c96:	29 f5       	brne	.+74     	; 0x1ce2 <__vector_10+0x55a>
    1c98:	0c c0       	rjmp	.+24     	; 0x1cb2 <__vector_10+0x52a>
				{
					case IDX_OPM_FORC_LED_ON_GREEN : {
						G_txCntlBufPLC.OperationMode = IDX_OPM_FORC_LED_ON_GREEN;
    1c9a:	e8 e9       	ldi	r30, 0x98	; 152
    1c9c:	f8 e0       	ldi	r31, 0x08	; 8
    1c9e:	84 e0       	ldi	r24, 0x04	; 4
    1ca0:	82 83       	std	Z+2, r24	; 0x02
						G_txCntlBufPLC.data = 0x00;
    1ca2:	13 82       	std	Z+3, r1	; 0x03
						break;
    1ca4:	23 c0       	rjmp	.+70     	; 0x1cec <__vector_10+0x564>
					}
					case IDX_OPM_FORC_LED_ON_RED :{
						G_txCntlBufPLC.OperationMode = IDX_OPM_FORC_LED_ON_RED;
    1ca6:	e8 e9       	ldi	r30, 0x98	; 152
    1ca8:	f8 e0       	ldi	r31, 0x08	; 8
    1caa:	85 e0       	ldi	r24, 0x05	; 5
    1cac:	82 83       	std	Z+2, r24	; 0x02
						G_txCntlBufPLC.data = 0x00;
    1cae:	13 82       	std	Z+3, r1	; 0x03
						break;
    1cb0:	1d c0       	rjmp	.+58     	; 0x1cec <__vector_10+0x564>
					}
					case IDX_OPM_FORC_LED_BLINKING : {
						G_txCntlBufPLC.OperationMode = IDX_OPM_FORC_LED_BLINKING;
    1cb2:	e8 e9       	ldi	r30, 0x98	; 152
    1cb4:	f8 e0       	ldi	r31, 0x08	; 8
    1cb6:	86 e0       	ldi	r24, 0x06	; 6
    1cb8:	82 83       	std	Z+2, r24	; 0x02
						G_txCntlBufPLC.data = 0x00;
    1cba:	13 82       	std	Z+3, r1	; 0x03
						break;
    1cbc:	17 c0       	rjmp	.+46     	; 0x1cec <__vector_10+0x564>
					}
					case IDX_OPM_FORC_LED_OFF : {
						G_txCntlBufPLC.OperationMode = IDX_OPM_FORC_LED_OFF;
    1cbe:	e8 e9       	ldi	r30, 0x98	; 152
    1cc0:	f8 e0       	ldi	r31, 0x08	; 8
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	82 83       	std	Z+2, r24	; 0x02
						G_txCntlBufPLC.data = 0x00;
    1cc6:	13 82       	std	Z+3, r1	; 0x03
						break;
    1cc8:	11 c0       	rjmp	.+34     	; 0x1cec <__vector_10+0x564>
					}
					case IDX_OPM_SENS_LED_ON_GREEN : {
						G_txCntlBufPLC.OperationMode = IDX_OPM_SENSING_ON;
    1cca:	e8 e9       	ldi	r30, 0x98	; 152
    1ccc:	f8 e0       	ldi	r31, 0x08	; 8
    1cce:	88 e0       	ldi	r24, 0x08	; 8
    1cd0:	82 83       	std	Z+2, r24	; 0x02
						G_txCntlBufPLC.data = 0x00;
    1cd2:	13 82       	std	Z+3, r1	; 0x03
						break;
    1cd4:	0b c0       	rjmp	.+22     	; 0x1cec <__vector_10+0x564>
					}
					case IDX_OPM_SENS_LED_ON_RED : {
						G_txCntlBufPLC.OperationMode = IDX_OPM_SENSING_ON;
    1cd6:	e8 e9       	ldi	r30, 0x98	; 152
    1cd8:	f8 e0       	ldi	r31, 0x08	; 8
    1cda:	88 e0       	ldi	r24, 0x08	; 8
    1cdc:	82 83       	std	Z+2, r24	; 0x02
						G_txCntlBufPLC.data = 0x00;
    1cde:	13 82       	std	Z+3, r1	; 0x03
						break;
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <__vector_10+0x564>
					}
					default:{
						G_txCntlBufPLC.OperationMode = IDX_OPM_SENSING_ON;
    1ce2:	e8 e9       	ldi	r30, 0x98	; 152
    1ce4:	f8 e0       	ldi	r31, 0x08	; 8
    1ce6:	88 e0       	ldi	r24, 0x08	; 8
    1ce8:	82 83       	std	Z+2, r24	; 0x02
						G_txCntlBufPLC.data = 0x00;
    1cea:	13 82       	std	Z+3, r1	; 0x03
						break;
					}
				}

				if(G_plcUSMCurrentIndex == G_totalUSMCnt-1){
    1cec:	20 91 90 08 	lds	r18, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <G_totalUSMCnt>
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	28 17       	cp	r18, r24
    1cfc:	39 07       	cpc	r19, r25
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <__vector_10+0x57a>
    1d00:	b5 c0       	rjmp	.+362    	; 0x1e6c <__vector_10+0x6e4>
					G_plcUSMCurrentIndex = 0;
    1d02:	10 92 90 08 	sts	0x0890, r1	; 0x800890 <G_plcUSMCurrentIndex>
					
					//Make USM LGM Status Stream Buffer
					uint8_t usmIdx,lgmIdx;
					uint8_t lgmID, lgmStatusFirst, lgmStatusSecond,lgmStatus, usmStatus;
					uint8_t bufIdx;
					SCMPLCF_lgmStatusBuffInit();
    1d06:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SCMPLCF_lgmStatusBuffInit>
					for(usmIdx=1; usmIdx<G_totalUSMCnt; usmIdx += 2 ){
    1d0a:	c0 91 96 08 	lds	r28, 0x0896	; 0x800896 <G_totalUSMCnt>
    1d0e:	c2 30       	cpi	r28, 0x02	; 2
    1d10:	d8 f1       	brcs	.+118    	; 0x1d88 <__vector_10+0x600>
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
						usmStatus = ((G_usmStatusBuffer[usmIdx-1]<<4)&0xF0) | (G_usmStatusBuffer[usmIdx]&0x0F);
    1d16:	ac 01       	movw	r20, r24
    1d18:	bc 01       	movw	r22, r24
    1d1a:	61 50       	subi	r22, 0x01	; 1
    1d1c:	71 09       	sbc	r23, r1
    1d1e:	db 01       	movw	r26, r22
    1d20:	a0 51       	subi	r26, 0x10	; 16
    1d22:	b0 4f       	sbci	r27, 0xF0	; 240
    1d24:	3c 91       	ld	r19, X
    1d26:	fc 01       	movw	r30, r24
    1d28:	e0 51       	subi	r30, 0x10	; 16
    1d2a:	f0 4f       	sbci	r31, 0xF0	; 240
    1d2c:	e0 81       	ld	r30, Z
    1d2e:	f0 e1       	ldi	r31, 0x10	; 16
    1d30:	3f 9f       	mul	r19, r31
    1d32:	90 01       	movw	r18, r0
    1d34:	11 24       	eor	r1, r1
    1d36:	3e 2f       	mov	r19, r30
    1d38:	3f 70       	andi	r19, 0x0F	; 15
    1d3a:	23 2b       	or	r18, r19
						bufIdx = usmIdx>>1;	
						G_StatusBufUSMtoSCM[1+bufIdx] = usmStatus;
    1d3c:	e8 2f       	mov	r30, r24
    1d3e:	e6 95       	lsr	r30
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	eb 5b       	subi	r30, 0xBB	; 187
    1d44:	f6 4f       	sbci	r31, 0xF6	; 246
    1d46:	20 83       	st	Z, r18
			
						lgmID = G_usmTolgm[usmIdx-1];
    1d48:	fb 01       	movw	r30, r22
    1d4a:	ef 56       	subi	r30, 0x6F	; 111
    1d4c:	fa 4f       	sbci	r31, 0xFA	; 250
    1d4e:	e0 81       	ld	r30, Z
						if(G_usmStatusBuffer[usmIdx-1] != 1)
    1d50:	2c 91       	ld	r18, X
    1d52:	21 30       	cpi	r18, 0x01	; 1
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <__vector_10+0x5da>
						{
							G_lgmStatusCnt[lgmID]+=1;
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	ee 54       	subi	r30, 0x4E	; 78
    1d5a:	f2 4f       	sbci	r31, 0xF2	; 242
    1d5c:	20 81       	ld	r18, Z
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	20 83       	st	Z, r18
						}
						lgmID = G_usmTolgm[usmIdx];
    1d62:	fa 01       	movw	r30, r20
    1d64:	ef 56       	subi	r30, 0x6F	; 111
    1d66:	fa 4f       	sbci	r31, 0xFA	; 250
    1d68:	e0 81       	ld	r30, Z
						if(G_usmStatusBuffer[usmIdx] != 1)
    1d6a:	da 01       	movw	r26, r20
    1d6c:	a0 51       	subi	r26, 0x10	; 16
    1d6e:	b0 4f       	sbci	r27, 0xF0	; 240
    1d70:	2c 91       	ld	r18, X
    1d72:	21 30       	cpi	r18, 0x01	; 1
    1d74:	31 f0       	breq	.+12     	; 0x1d82 <__vector_10+0x5fa>
						{
							G_lgmStatusCnt[lgmID]+=1;
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	ee 54       	subi	r30, 0x4E	; 78
    1d7a:	f2 4f       	sbci	r31, 0xF2	; 242
    1d7c:	20 81       	ld	r18, Z
    1d7e:	2f 5f       	subi	r18, 0xFF	; 255
    1d80:	20 83       	st	Z, r18
    1d82:	02 96       	adiw	r24, 0x02	; 2
					//Make USM LGM Status Stream Buffer
					uint8_t usmIdx,lgmIdx;
					uint8_t lgmID, lgmStatusFirst, lgmStatusSecond,lgmStatus, usmStatus;
					uint8_t bufIdx;
					SCMPLCF_lgmStatusBuffInit();
					for(usmIdx=1; usmIdx<G_totalUSMCnt; usmIdx += 2 ){
    1d84:	8c 17       	cp	r24, r28
    1d86:	38 f2       	brcs	.-114    	; 0x1d16 <__vector_10+0x58e>
						{
							G_lgmStatusCnt[lgmID]+=1;
						}
					}
		
					for(lgmIdx=1; lgmIdx<G_totalLGMCnt; lgmIdx += 2 ){
    1d88:	10 91 95 08 	lds	r17, 0x0895	; 0x800895 <G_totalLGMCnt>
    1d8c:	12 30       	cpi	r17, 0x02	; 2
    1d8e:	08 f4       	brcc	.+2      	; 0x1d92 <__vector_10+0x60a>
    1d90:	72 c0       	rjmp	.+228    	; 0x1e76 <__vector_10+0x6ee>
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
			
						if(G_lgmStatusCnt[lgmIdx] < G_lgmTotalCnt[lgmIdx])
							lgmStatusFirst = IDX_OPM_FORC_LED_ON_GREEN;
    1d9a:	68 94       	set
    1d9c:	ee 24       	eor	r14, r14
    1d9e:	e2 f8       	bld	r14, 2
						else
							lgmStatusFirst = IDX_OPM_FORC_LED_ON_RED;
    1da0:	0f 2e       	mov	r0, r31
    1da2:	f5 e0       	ldi	r31, 0x05	; 5
    1da4:	ff 2e       	mov	r15, r31
    1da6:	f0 2d       	mov	r31, r0
							lgmStatusSecond = IDX_OPM_FORC_LED_ON_GREEN;
						else
							lgmStatusSecond = IDX_OPM_FORC_LED_ON_RED;
				
						if(G_usmPLCInterruptF[lgmIdx] == 0)
							lgmStatusFirst = 0;
    1da8:	00 e0       	ldi	r16, 0x00	; 0
    1daa:	d8 2e       	mov	r13, r24
						}
					}
		
					for(lgmIdx=1; lgmIdx<G_totalLGMCnt; lgmIdx += 2 ){
			
						if(G_lgmStatusCnt[lgmIdx] < G_lgmTotalCnt[lgmIdx])
    1dac:	ac 01       	movw	r20, r24
    1dae:	dc 01       	movw	r26, r24
    1db0:	ae 54       	subi	r26, 0x4E	; 78
    1db2:	b2 4f       	sbci	r27, 0xF2	; 242
    1db4:	7c 91       	ld	r23, X
    1db6:	dc 01       	movw	r26, r24
    1db8:	a5 52       	subi	r26, 0x25	; 37
    1dba:	b2 4f       	sbci	r27, 0xF2	; 242
    1dbc:	6c 91       	ld	r22, X
    1dbe:	76 17       	cp	r23, r22
    1dc0:	10 f0       	brcs	.+4      	; 0x1dc6 <__vector_10+0x63e>
							lgmStatusFirst = IDX_OPM_FORC_LED_ON_GREEN;
						else
							lgmStatusFirst = IDX_OPM_FORC_LED_ON_RED;
    1dc2:	df 2d       	mov	r29, r15
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <__vector_10+0x640>
					}
		
					for(lgmIdx=1; lgmIdx<G_totalLGMCnt; lgmIdx += 2 ){
			
						if(G_lgmStatusCnt[lgmIdx] < G_lgmTotalCnt[lgmIdx])
							lgmStatusFirst = IDX_OPM_FORC_LED_ON_GREEN;
    1dc6:	de 2d       	mov	r29, r14
    1dc8:	b9 01       	movw	r22, r18
    1dca:	6e 5f       	subi	r22, 0xFE	; 254
    1dcc:	7f 4f       	sbci	r23, 0xFF	; 255
						else
							lgmStatusFirst = IDX_OPM_FORC_LED_ON_RED;
				
						if(G_lgmStatusCnt[lgmIdx+1] < G_lgmTotalCnt[lgmIdx+1])
    1dce:	db 01       	movw	r26, r22
    1dd0:	ae 54       	subi	r26, 0x4E	; 78
    1dd2:	b2 4f       	sbci	r27, 0xF2	; 242
    1dd4:	ac 91       	ld	r26, X
    1dd6:	fb 01       	movw	r30, r22
    1dd8:	e5 52       	subi	r30, 0x25	; 37
    1dda:	f2 4f       	sbci	r31, 0xF2	; 242
    1ddc:	f0 81       	ld	r31, Z
    1dde:	af 17       	cp	r26, r31
    1de0:	10 f0       	brcs	.+4      	; 0x1de6 <__vector_10+0x65e>
							lgmStatusSecond = IDX_OPM_FORC_LED_ON_GREEN;
						else
							lgmStatusSecond = IDX_OPM_FORC_LED_ON_RED;
    1de2:	cf 2d       	mov	r28, r15
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <__vector_10+0x660>
							lgmStatusFirst = IDX_OPM_FORC_LED_ON_GREEN;
						else
							lgmStatusFirst = IDX_OPM_FORC_LED_ON_RED;
				
						if(G_lgmStatusCnt[lgmIdx+1] < G_lgmTotalCnt[lgmIdx+1])
							lgmStatusSecond = IDX_OPM_FORC_LED_ON_GREEN;
    1de6:	ce 2d       	mov	r28, r14
						else
							lgmStatusSecond = IDX_OPM_FORC_LED_ON_RED;
				
						if(G_usmPLCInterruptF[lgmIdx] == 0)
    1de8:	da 01       	movw	r26, r20
    1dea:	a3 56       	subi	r26, 0x63	; 99
    1dec:	b7 4f       	sbci	r27, 0xF7	; 247
    1dee:	fc 91       	ld	r31, X
    1df0:	f1 11       	cpse	r31, r1
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <__vector_10+0x66e>
							lgmStatusFirst = 0;
    1df4:	d0 2f       	mov	r29, r16
						if(G_usmPLCInterruptF[lgmIdx+1] == 0)
    1df6:	db 01       	movw	r26, r22
    1df8:	a3 56       	subi	r26, 0x63	; 99
    1dfa:	b7 4f       	sbci	r27, 0xF7	; 247
    1dfc:	fc 91       	ld	r31, X
    1dfe:	f1 11       	cpse	r31, r1
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <__vector_10+0x67c>
							lgmStatusSecond = 0;
    1e02:	c0 2f       	mov	r28, r16
			
						//lopmodeCF = G_SULCR & (1<<SULCR6);
						//if(lopmodeCF == LOCF6){
						if(G_lgmOPModeOnF == ON){
    1e04:	f0 91 8c 08 	lds	r31, 0x088C	; 0x80088c <G_lgmOPModeOnF>
    1e08:	f1 30       	cpi	r31, 0x01	; 1
    1e0a:	a1 f4       	brne	.+40     	; 0x1e34 <__vector_10+0x6ac>
							if(G_lgmOPMode[lgmIdx-1] != 0)
    1e0c:	d9 01       	movw	r26, r18
    1e0e:	af 50       	subi	r26, 0x0F	; 15
    1e10:	bb 4f       	sbci	r27, 0xFB	; 251
    1e12:	fc 91       	ld	r31, X
    1e14:	ff 23       	and	r31, r31
    1e16:	21 f0       	breq	.+8      	; 0x1e20 <__vector_10+0x698>
								lgmStatusFirst = G_lgmOPMode[lgmIdx-1];
    1e18:	d9 01       	movw	r26, r18
    1e1a:	af 50       	subi	r26, 0x0F	; 15
    1e1c:	bb 4f       	sbci	r27, 0xFB	; 251
    1e1e:	dc 91       	ld	r29, X
							if(G_lgmOPMode[lgmIdx] != 0)
    1e20:	da 01       	movw	r26, r20
    1e22:	af 50       	subi	r26, 0x0F	; 15
    1e24:	bb 4f       	sbci	r27, 0xFB	; 251
    1e26:	fc 91       	ld	r31, X
    1e28:	ff 23       	and	r31, r31
    1e2a:	21 f0       	breq	.+8      	; 0x1e34 <__vector_10+0x6ac>
								lgmStatusSecond = G_lgmOPMode[lgmIdx];
    1e2c:	da 01       	movw	r26, r20
    1e2e:	af 50       	subi	r26, 0x0F	; 15
    1e30:	bb 4f       	sbci	r27, 0xFB	; 251
    1e32:	cc 91       	ld	r28, X
						}
			
						lgmStatus = ((lgmStatusFirst<<4)&0xF0) | (lgmStatusSecond&0x0F);
    1e34:	e0 e1       	ldi	r30, 0x10	; 16
    1e36:	de 9f       	mul	r29, r30
    1e38:	d0 01       	movw	r26, r0
    1e3a:	11 24       	eor	r1, r1
    1e3c:	fc 2f       	mov	r31, r28
    1e3e:	ff 70       	andi	r31, 0x0F	; 15
    1e40:	af 2b       	or	r26, r31
						bufIdx = 1+(lgmIdx>>1);		
						G_StatusBufLGMtoSCM[bufIdx] = 	lgmStatus;	
    1e42:	ed 2d       	mov	r30, r13
    1e44:	e6 95       	lsr	r30
    1e46:	ef 5f       	subi	r30, 0xFF	; 255
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	e4 5e       	subi	r30, 0xE4	; 228
    1e4c:	f6 4f       	sbci	r31, 0xF6	; 246
    1e4e:	a0 83       	st	Z, r26
						G_lgmStatusBuf[lgmIdx-1] = lgmStatusFirst ;
    1e50:	f9 01       	movw	r30, r18
    1e52:	e0 56       	subi	r30, 0x60	; 96
    1e54:	f4 4f       	sbci	r31, 0xF4	; 244
    1e56:	d0 83       	st	Z, r29
						G_lgmStatusBuf[lgmIdx] = lgmStatusSecond ;
    1e58:	fa 01       	movw	r30, r20
    1e5a:	e0 56       	subi	r30, 0x60	; 96
    1e5c:	f4 4f       	sbci	r31, 0xF4	; 244
    1e5e:	c0 83       	st	Z, r28
    1e60:	02 96       	adiw	r24, 0x02	; 2
    1e62:	9b 01       	movw	r18, r22
						{
							G_lgmStatusCnt[lgmID]+=1;
						}
					}
		
					for(lgmIdx=1; lgmIdx<G_totalLGMCnt; lgmIdx += 2 ){
    1e64:	81 17       	cp	r24, r17
    1e66:	08 f4       	brcc	.+2      	; 0x1e6a <__vector_10+0x6e2>
    1e68:	a0 cf       	rjmp	.-192    	; 0x1daa <__vector_10+0x622>
    1e6a:	05 c0       	rjmp	.+10     	; 0x1e76 <__vector_10+0x6ee>
						G_lgmStatusBuf[lgmIdx-1] = lgmStatusFirst ;
						G_lgmStatusBuf[lgmIdx] = lgmStatusSecond ;
					}
				}
				else{
					G_plcUSMCurrentIndex++;
    1e6c:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <G_plcUSMCurrentIndex>
    1e70:	8f 5f       	subi	r24, 0xFF	; 255
    1e72:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <G_plcUSMCurrentIndex>
//				G_txCntlBufPLC.data = 0xAA;
//				G_txCntlBufPLC.OperationMode = 0xAA;
//				G_txCntlBufPLC.type = 0xAA;
				////PLC TEST [E]
				
				SCMPLCF_SendMessageCntlPacket(G_txCntlBufPLC);
    1e76:	60 91 98 08 	lds	r22, 0x0898	; 0x800898 <G_txCntlBufPLC>
    1e7a:	70 91 99 08 	lds	r23, 0x0899	; 0x800899 <G_txCntlBufPLC+0x1>
    1e7e:	80 91 9a 08 	lds	r24, 0x089A	; 0x80089a <G_txCntlBufPLC+0x2>
    1e82:	90 91 9b 08 	lds	r25, 0x089B	; 0x80089b <G_txCntlBufPLC+0x3>
    1e86:	0e 94 4a 05 	call	0xa94	; 0xa94 <SCMPLCF_SendMessageCntlPacket>
				EIMSK = (1<<INT6);
    1e8a:	80 e4       	ldi	r24, 0x40	; 64
    1e8c:	89 bf       	out	0x39, r24	; 57
			}//[E] Start Mode Control in Sensing mode
		}
	}		//[E] OverFlow Function
}
    1e8e:	06 c0       	rjmp	.+12     	; 0x1e9c <__vector_10+0x714>
					uop_mode = G_usmOPMode[G_plcUSMCurrentIndex];
				}
				else{
					uop_mode = 0;
				}
				if(G_testmodeDipValue == ON){
    1e90:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <G_testmodeDipValue>
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <__vector_10+0x712>
    1e98:	0c cf       	rjmp	.-488    	; 0x1cb2 <__vector_10+0x52a>
    1e9a:	23 cf       	rjmp	.-442    	; 0x1ce2 <__vector_10+0x55a>
				SCMPLCF_SendMessageCntlPacket(G_txCntlBufPLC);
				EIMSK = (1<<INT6);
			}//[E] Start Mode Control in Sensing mode
		}
	}		//[E] OverFlow Function
}
    1e9c:	ff 91       	pop	r31
    1e9e:	ef 91       	pop	r30
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	bf 91       	pop	r27
    1ea6:	af 91       	pop	r26
    1ea8:	9f 91       	pop	r25
    1eaa:	8f 91       	pop	r24
    1eac:	7f 91       	pop	r23
    1eae:	6f 91       	pop	r22
    1eb0:	5f 91       	pop	r21
    1eb2:	4f 91       	pop	r20
    1eb4:	3f 91       	pop	r19
    1eb6:	2f 91       	pop	r18
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	0f 90       	pop	r0
    1ec4:	0b be       	out	0x3b, r0	; 59
    1ec6:	0f 90       	pop	r0
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	0f 90       	pop	r0
    1ecc:	1f 90       	pop	r1
    1ece:	18 95       	reti

00001ed0 <__vector_7>:


//PLC RX Interrupt Service Routine
ISR(INT6_vect)
{
    1ed0:	1f 92       	push	r1
    1ed2:	0f 92       	push	r0
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	0f 92       	push	r0
    1ed8:	11 24       	eor	r1, r1
    1eda:	0b b6       	in	r0, 0x3b	; 59
    1edc:	0f 92       	push	r0
    1ede:	2f 93       	push	r18
    1ee0:	8f 93       	push	r24
    1ee2:	9f 93       	push	r25
    1ee4:	af 93       	push	r26
    1ee6:	bf 93       	push	r27
    1ee8:	ef 93       	push	r30
    1eea:	ff 93       	push	r31
	uint8_t mask = 0x00;
	uint8_t bitvalue;
	uint8_t lgmID;
	PORTB &= ~(1<<PB4);
    1eec:	c4 98       	cbi	0x18, 4	; 24
	
	G_rxBufPLC.sensor_status = 0xF8;
    1eee:	e4 e0       	ldi	r30, 0x04	; 4
    1ef0:	fe e0       	ldi	r31, 0x0E	; 14
    1ef2:	88 ef       	ldi	r24, 0xF8	; 248
    1ef4:	81 83       	std	Z+1, r24	; 0x01
	PLC_RX_ONE_BIT(0,PLC_RX_DELAY_INIT,mask,bitvalue);
    1ef6:	81 b1       	in	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ef8:	87 eb       	ldi	r24, 0xB7	; 183
    1efa:	9b e0       	ldi	r25, 0x0B	; 11
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <__vector_7+0x2c>
    1f00:	00 c0       	rjmp	.+0      	; 0x1f02 <__vector_7+0x32>
    1f02:	00 00       	nop

	PLC_RX_ONE_BIT(0,PLC_RX_DELAY,G_rxBufPLC.sensor_status,bitvalue);
    1f04:	81 b1       	in	r24, 0x01	; 1
    1f06:	91 81       	ldd	r25, Z+1	; 0x01
    1f08:	86 fb       	bst	r24, 6
    1f0a:	88 27       	eor	r24, r24
    1f0c:	80 f9       	bld	r24, 0
    1f0e:	89 0f       	add	r24, r25
    1f10:	81 83       	std	Z+1, r24	; 0x01
    1f12:	8f ec       	ldi	r24, 0xCF	; 207
    1f14:	97 e0       	ldi	r25, 0x07	; 7
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <__vector_7+0x46>
    1f1a:	00 c0       	rjmp	.+0      	; 0x1f1c <__vector_7+0x4c>
    1f1c:	00 00       	nop
	PLC_RX_ONE_BIT(1,PLC_RX_DELAY,G_rxBufPLC.sensor_status,bitvalue);
    1f1e:	91 b1       	in	r25, 0x01	; 1
    1f20:	21 81       	ldd	r18, Z+1	; 0x01
    1f22:	96 fb       	bst	r25, 6
    1f24:	88 27       	eor	r24, r24
    1f26:	80 f9       	bld	r24, 0
    1f28:	88 0f       	add	r24, r24
    1f2a:	82 0f       	add	r24, r18
    1f2c:	81 83       	std	Z+1, r24	; 0x01
    1f2e:	8f ec       	ldi	r24, 0xCF	; 207
    1f30:	97 e0       	ldi	r25, 0x07	; 7
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <__vector_7+0x62>
    1f36:	00 c0       	rjmp	.+0      	; 0x1f38 <__vector_7+0x68>
    1f38:	00 00       	nop
	PLC_RX_ONE_BIT(2,PLC_RX_DELAY,G_rxBufPLC.sensor_status,bitvalue);
    1f3a:	91 b1       	in	r25, 0x01	; 1
    1f3c:	21 81       	ldd	r18, Z+1	; 0x01
    1f3e:	96 fb       	bst	r25, 6
    1f40:	88 27       	eor	r24, r24
    1f42:	80 f9       	bld	r24, 0
    1f44:	88 0f       	add	r24, r24
    1f46:	88 0f       	add	r24, r24
    1f48:	82 0f       	add	r24, r18
    1f4a:	81 83       	std	Z+1, r24	; 0x01
    1f4c:	8f ec       	ldi	r24, 0xCF	; 207
    1f4e:	97 e0       	ldi	r25, 0x07	; 7
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <__vector_7+0x80>
    1f54:	00 c0       	rjmp	.+0      	; 0x1f56 <__vector_7+0x86>
    1f56:	00 00       	nop

	G_usmStatusBuffer[G_usmCurrentCntlID-1] = ~G_rxBufPLC.sensor_status;
    1f58:	a0 91 c9 0b 	lds	r26, 0x0BC9	; 0x800bc9 <G_usmCurrentCntlID>
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	81 81       	ldd	r24, Z+1	; 0x01
    1f60:	80 95       	com	r24
    1f62:	a1 51       	subi	r26, 0x11	; 17
    1f64:	b0 4f       	sbci	r27, 0xF0	; 240
    1f66:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f68:	8f e1       	ldi	r24, 0x1F	; 31
    1f6a:	9e e4       	ldi	r25, 0x4E	; 78
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <__vector_7+0x9c>
    1f70:	00 c0       	rjmp	.+0      	; 0x1f72 <__vector_7+0xa2>
    1f72:	00 00       	nop
	
	_delay_ms(10);
	
	lgmID = G_usmTolgm[G_usmCurrentCntlID-1];
    1f74:	a0 91 c9 0b 	lds	r26, 0x0BC9	; 0x800bc9 <G_usmCurrentCntlID>
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	a0 57       	subi	r26, 0x70	; 112
    1f7c:	ba 4f       	sbci	r27, 0xFA	; 250
    1f7e:	ac 91       	ld	r26, X
	G_usmPLCInterruptF[lgmID] = 1;
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	a3 56       	subi	r26, 0x63	; 99
    1f84:	b7 4f       	sbci	r27, 0xF7	; 247
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	8c 93       	st	X, r24
	bitvalue = ~G_rxBufPLC.sensor_status;
    1f8a:	81 81       	ldd	r24, Z+1	; 0x01
	if(bitvalue == 0x07)
    1f8c:	88 3f       	cpi	r24, 0xF8	; 248
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <__vector_7+0xc2>
		PORTB |= (1<<PB4);
    1f90:	c4 9a       	sbi	0x18, 4	; 24
	
	EIMSK = (0<<INT6);
    1f92:	19 be       	out	0x39, r1	; 57
    1f94:	ff 91       	pop	r31
    1f96:	ef 91       	pop	r30
    1f98:	bf 91       	pop	r27
    1f9a:	af 91       	pop	r26
    1f9c:	9f 91       	pop	r25
    1f9e:	8f 91       	pop	r24
    1fa0:	2f 91       	pop	r18
    1fa2:	0f 90       	pop	r0
    1fa4:	0b be       	out	0x3b, r0	; 59
    1fa6:	0f 90       	pop	r0
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	0f 90       	pop	r0
    1fac:	1f 90       	pop	r1
    1fae:	18 95       	reti

00001fb0 <__tablejump2__>:
    1fb0:	ee 0f       	add	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
    1fb4:	00 24       	eor	r0, r0
    1fb6:	00 1c       	adc	r0, r0
    1fb8:	0b be       	out	0x3b, r0	; 59
    1fba:	07 90       	elpm	r0, Z+
    1fbc:	f6 91       	elpm	r31, Z
    1fbe:	e0 2d       	mov	r30, r0
    1fc0:	09 94       	ijmp

00001fc2 <_exit>:
    1fc2:	f8 94       	cli

00001fc4 <__stop_program>:
    1fc4:	ff cf       	rjmp	.-2      	; 0x1fc4 <__stop_program>
