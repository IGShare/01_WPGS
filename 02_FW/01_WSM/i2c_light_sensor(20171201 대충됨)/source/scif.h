/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     I2C Light Sensor
  * - <b>Project file</b>:     E:/igs_svn_data/PROJECT_01/02_FW/01_WSM/04_I2C_GMS/i2c_light_sensor/i2c_light_sensor.scp
  * - <b>Code prefix</b>:      -
  * - <b>Operating system</b>: TI-RTOS
  * - <b>Tool version</b>:     1.3.0.42428
  * - <b>Tool patches</b>:     None
  * - <b>Target chip</b>:      CC2650, revision -, package QFN48 7x7 RGZ
  * - <b>Created</b>:          2017-02-14 14:57:48.691
  * - <b>Computer</b>:         DESKTOP-IGSHARE
  * - <b>User</b>:             myeom
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (i.e. Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * Demonstrates use of the bit-banged I2C master interface by sampling the OPT3001 light sensor on the
  * CC2650 SensorTag.
  * 
  * The application is woken if the light sensor output value changes by more than a configurable amount:
  * - If decreasing, the application blinks the red LED on the SensorTag.
  * - If increasing, the application blinks the green LED on the SensorTag.
  * 
  * See the header in the application source file ("main.c" or similar) for further details and
  * instructions. This file is located in the source code output directory.
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - I2C Light Sensor:
  *     - <b>O: LED 01</b>: DIO25
  *     - <b>O: LED 02</b>: DIO27
  *     - <b>I2C SCL</b>: DIO6
  *     - <b>I2C SDA</b>: DIO7
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_i2c_light_sensor I2C Light Sensor
  * Samples the OPT3001 light sensor on the CC2650 SensorTag. This light sensor integrates over longer
  * periods of time to minimize the effect of 50 and 60 Hz noise sources.
  * 
  * Each iteration of the I2C Light Sensor task:
  * - Runs the Execution Code: The light sensor configured for 100 ms integration, and a single
  * measurement is started. The timer based event trigger is enabled (100 ms + margin).
  * - Runs the Event Handler Code: The light sensor value is read and processed.
  * 
  * The light sensor output is converted from floating-point (12-bit mantissa, 4-bit exponent) to
  * fixed-point (16-bit). The system CPU is alerted if the value is above or below configurable
  * thresholds.
  * 
  * Note that OPT3001 implements a timeout for I2C accesses, and will NACK I2C TX operations if a task
  * debugging session halts execution in the middle of an I2C transaction.
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     I2C Light Sensor
  * - <b>Code prefix</b>:      -
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  *
  * @{
  */
#ifndef SCIF_H
#define SCIF_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_tirtos.h"


/// Target chip name
#define SCIF_TARGET_CHIP_NAME_CC2650
/// Target chip package
#define SCIF_TARGET_CHIP_PACKAGE_QFN48_7X7_RGZ

/// Number of tasks implemented by this driver
#define SCIF_TASK_COUNT 1

/// I2C Light Sensor: Task ID
#define SCIF_I2C_LIGHT_SENSOR_TASK_ID 0


/// I2C Light Sensor: OPT3001 configuration triggering 100 ms single conversion
#define SCIF_I2C_LIGHT_SENSOR_ALS_CFG_ONE_SHOT 49680
/// I2C Light Sensor: OPT3001 configuration at reset (shutdown)
#define SCIF_I2C_LIGHT_SENSOR_ALS_CFG_RESET 51216
/// I2C Light Sensor: OPT3001 I2C address
#define SCIF_I2C_LIGHT_SENSOR_ALS_I2C_ADDR 56
/// I2C Light Sensor: OPT3001 configuration register
#define SCIF_I2C_LIGHT_SENSOR_ALS_REG_CFG 1
/// I2C Light Sensor: OPT3001 result register
#define SCIF_I2C_LIGHT_SENSOR_ALS_REG_RESULT 0
/// I2C Light Sensor: Control Register 1
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_CTRL_REG1_ADDR 32
/// I2C Light Sensor: Control Register 2
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_CTRL_REG2_ADDR 33
/// I2C Light Sensor: Control Register 3
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_CTRL_REG3_ADDR 34
/// I2C Light Sensor: Control Register 4
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_CTRL_REG4_ADDR 35
/// I2C Light Sensor: Control Register 5
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_CTRL_REG5_ADDR 36
/// I2C Light Sensor: 
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_INT_CFG_ADDR 48
/// I2C Light Sensor: 
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_INT_SRC_ADDR 49
/// I2C Light Sensor: 
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_INT_THS_H 51
/// I2C Light Sensor: 
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_INT_THS_L 50
/// I2C Light Sensor: Sensor Output x-axis High bit value address
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_OUT_X_H_ADDR 41
/// I2C Light Sensor: Sensor Output x-axis Low value address
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_OUT_X_L_ADDR 40
/// I2C Light Sensor: Sensor Output y-axis High bit value address
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_OUT_Y_H_ADDR 43
/// I2C Light Sensor: Sensor Output y-axis Low bit value address
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_OUT_Y_L_ADDR 42
/// I2C Light Sensor: Sensor Output z-axis High bit value address
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_OUT_Z_H_ADDR 45
/// I2C Light Sensor: Sensor Output z-axis Low bit value address
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_OUT_Z_L_ADDR 44
/// I2C Light Sensor: status register address
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_STATUS_REG_ADDR 39
/// I2C Light Sensor: 
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_TEMP_OUT_H_ADDR 47
/// I2C Light Sensor: 
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_TEMP_OUT_L_ADDR 46
/// I2C Light Sensor: TEST_REGISTER_ADDRESS
#define SCIF_I2C_LIGHT_SENSOR_LIS3MDL_WHO_AM_I_ADDR 15
/// I2C Light Sensor I/O mapping: LED 01
#define SCIF_I2C_LIGHT_SENSOR_DIO_O_LED_01 25
/// I2C Light Sensor I/O mapping: LED 02
#define SCIF_I2C_LIGHT_SENSOR_DIO_O_LED_02 27
/// I2C Light Sensor I/O mapping: I2C SCL
#define SCIF_I2C_LIGHT_SENSOR_DIO_I2C_SCL 6
/// I2C Light Sensor I/O mapping: I2C SDA
#define SCIF_I2C_LIGHT_SENSOR_DIO_I2C_SDA 7


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// I2C Light Sensor: Task configuration structure
typedef struct {
    uint16_t isInitialSetting; ///< Initial Setting Complete Flag
} SCIF_I2C_LIGHT_SENSOR_CFG_T;


/// I2C Light Sensor: Task output data structure
typedef struct {
    int16_t  initXVal; ///< Initial X axis Value
    int16_t  initYVal; ///< Initial Y axis Value
    int16_t  initZVal; ///< Initial Z axis Value
    int16_t  xHigh;    ///< LIS3MDL Magnetic sensor output value X high byte
    int16_t  xLow;     ///< LIS3MDL Magnetic sensor output value X low byte
    int16_t  yHigh;    ///< LIS3MDL Magnetic sensor output value Y high byte
    int16_t  yLow;     ///< LIS3MDL Magnetic sensor output value Y low byte
    int16_t  zHigh;    ///< LIS3MDL Magnetic sensor output value Z high byte
    int16_t  zLow;     ///< LIS3MDL Magnetic sensor output value Z low byte
} SCIF_I2C_LIGHT_SENSOR_OUTPUT_T;


/// I2C Light Sensor: Task state structure
typedef struct {
    uint16_t i2cStatus; ///< I2C master status
} SCIF_I2C_LIGHT_SENSOR_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_I2C_LIGHT_SENSOR_CFG_T cfg;
        SCIF_I2C_LIGHT_SENSOR_OUTPUT_T output;
        SCIF_I2C_LIGHT_SENSOR_STATE_T state;
    } i2cLightSensor;
} SCIF_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifTaskData    (*((volatile SCIF_TASK_DATA_T*) 0x400E00E6))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifReinitTaskIo(uint32_t bvTaskIds);


// RTC-based tick generation control
void scifStartRtcTicks(uint32_t tickStart, uint32_t tickPeriod);
void scifStartRtcTicksNow(uint32_t tickPeriod);
void scifStopRtcTicks(void);


#endif
//@}


// Generated by DESKTOP-IGSHARE at 2017-02-14 14:57:48.691
