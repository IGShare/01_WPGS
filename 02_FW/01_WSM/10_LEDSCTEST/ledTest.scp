<?xml version="1.0"?>
<project name="TEST" version="2.0.0.324">
    <desc><![CDATA[]]></desc>
    <pattr name="Apply default power mode">0</pattr>
    <pattr name="Board">None</pattr>
    <pattr name="Chip name">CC1310</pattr>
    <pattr name="Chip package">QFN48 7x7 RGZ</pattr>
    <pattr name="Chip revision">-</pattr>
    <pattr name="Clock in active mode">0</pattr>
    <pattr name="Code prefix"></pattr>
    <pattr name="Default power mode">0</pattr>
    <pattr name="Operating system">TI-RTOS</pattr>
    <pattr name="Output directory">D:/GIT/01_WPGS/02_FW/01_WSM/10_LEDSCTEST</pattr>
    <pattr name="RTC tick interval (16.16 format)">2000</pattr>
    <pattr name="Run-time logging UART RX pin"></pattr>
    <pattr name="Run-time logging UART TX pin"></pattr>
    <task name="New task">
        <desc><![CDATA[]]></desc>
        <tattr name="I2C_BASE_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0038</tattr>
        <tattr name="LIS3MDL_CTRL_REG1_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0020</tattr>
        <tattr name="LIS3MDL_CTRL_REG2_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0021</tattr>
        <tattr name="LIS3MDL_CTRL_REG3_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0022</tattr>
        <tattr name="LIS3MDL_CTRL_REG4_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0023</tattr>
        <tattr name="LIS3MDL_CTRL_REG5_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0024</tattr>
        <tattr name="LIS3MDL_OUT_X_H_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0029</tattr>
        <tattr name="LIS3MDL_OUT_X_L_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0028</tattr>
        <tattr name="LIS3MDL_OUT_Y_H_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">002b</tattr>
        <tattr name="LIS3MDL_OUT_Y_L_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">002a</tattr>
        <tattr name="LIS3MDL_OUT_Z_H_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">002d</tattr>
        <tattr name="LIS3MDL_OUT_Z_L_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">002c</tattr>
        <tattr name="LIS3MDL_STATUS_REG_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0027</tattr>
        <tattr name="LIS3MDL_WHO_AM_I_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">000f</tattr>
        <tattr name="output.dataX" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.dataY" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.dataZ" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.diffData" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.initX" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.initY" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.initZ" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="state.isInitialValF" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <resource_ref name="ADC" enabled="0"/>
        <resource_ref name="AON Domain Functionality" enabled="0"/>
        <resource_ref name="Accumulator-Based Math" enabled="0"/>
        <resource_ref name="Analog Open-Drain Pins" enabled="0"/>
        <resource_ref name="Analog Open-Source Pins" enabled="0"/>
        <resource_ref name="Analog Pins" enabled="0"/>
        <resource_ref name="COMPA" enabled="0"/>
        <resource_ref name="COMPA Event Trigger" enabled="0"/>
        <resource_ref name="COMPB" enabled="0"/>
        <resource_ref name="COMPB Event Trigger" enabled="0"/>
        <resource_ref name="Delay Insertion" enabled="1"/>
        <resource_ref name="Differential Output Pins" enabled="0"/>
        <resource_ref name="Digital Input Pins" enabled="0"/>
        <resource_ref name="Digital Open-Drain Pins" enabled="0"/>
        <resource_ref name="Digital Open-Source Pins" enabled="0"/>
        <resource_ref name="Digital Output Pins" enabled="1">
            <io_usage name="LED" label="LED">
                <uattr name="Configuration on uninitialization">-1</uattr>
                <uattr name="Output value on initialization">0</uattr>
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO25</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Dynamic Power Control" enabled="0"/>
        <resource_ref name="GPIO Event Trigger" enabled="0"/>
        <resource_ref name="I2C Master" enabled="1">
            <rattr name="SCL frequency">0</rattr>
            <rattr name="SCL stretch timeout">1</rattr>
            <io_usage>
                <uattr name="SCL pin/0000">DIO6</uattr>
                <uattr name="SDA pin/0000">DIO7</uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="ISRC" enabled="0"/>
        <resource_ref name="Math and Logic" enabled="0"/>
        <resource_ref name="Multi-Buffered Output Data Exchange" enabled="0">
            <rattr name="Buffer count">2</rattr>
            <rattr name="Indicate overflow at buffer check">1</rattr>
            <rattr name="Indicate overflow at buffer switch">0</rattr>
            <rattr name="Prevent overflow at buffer switch">1</rattr>
        </resource_ref>
        <resource_ref name="Peripheral Sharing" enabled="0"/>
        <resource_ref name="Pulse Counter" enabled="0"/>
        <resource_ref name="RTC Multi-Event Capture" enabled="0"/>
        <resource_ref name="RTC-Based Execution Scheduling" enabled="1"/>
        <resource_ref name="Reference DAC" enabled="0"/>
        <resource_ref name="Run-Time Logging" enabled="0"/>
        <resource_ref name="SPI Chip Select" enabled="0"/>
        <resource_ref name="SPI Data Transfer" enabled="0">
            <rattr name="Bit rate">0</rattr>
            <rattr name="MISO configuration when inactive">-1</rattr>
            <rattr name="MOSI configuration on initialization">0</rattr>
            <rattr name="MOSI configuration on uninitialization">0</rattr>
            <rattr name="SCLK configuration on initialization">0</rattr>
            <rattr name="SCLK configuration on uninitialization">0</rattr>
            <io_usage>
                <uattr name="MISO pin/0000"></uattr>
                <uattr name="MOSI pin/0000"></uattr>
                <uattr name="SCLK pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Signal Observation" enabled="0"/>
        <resource_ref name="System CPU Alert" enabled="1"/>
        <resource_ref name="System Event Trigger" enabled="0"/>
        <resource_ref name="TDC" enabled="0"/>
        <resource_ref name="Timer 0" enabled="0"/>
        <resource_ref name="Timer 0 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 1" enabled="0"/>
        <resource_ref name="Timer 1 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 2" enabled="0"/>
        <resource_ref name="Timer 2 Event Trigger" enabled="0"/>
        <resource_ref name="UART Emulator" enabled="0">
            <rattr name="RX buffer size">64</rattr>
            <rattr name="Required idle period before enabling RX">11</rattr>
            <rattr name="TX buffer size">64</rattr>
            <io_usage>
                <uattr name="RX pin/0000"></uattr>
                <uattr name="TX pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <sccode name="event0" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event1" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event2" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event3" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="execute" init_power_mode="0"><![CDATA[U16 StatusValue = 0;
S16 dataXL = 0;
S16 dataYL = 0;
S16 dataZL = 0;
S16 dataXH = 0;
S16 dataYH = 0;
S16 dataZH = 0;
S16 diffTmp = 0;

i2cStart();
i2cTx(I2C_BASE_ADDR | I2C_OP_WRITE);
i2cTx(LIS3MDL_STATUS_REG_ADDR);

if(state.i2cStatus != 0x0000){
    i2cStop();
    i2cStart();
    i2cTx(I2C_BASE_ADDR | I2C_OP_WRITE);
    i2cTx(LIS3MDL_STATUS_REG_ADDR);
    //gpioSetOutput(AUXIO_O_LED);
}

if(state.i2cStatus == 0x0000){
    //gpioClearOutput(AUXIO_O_LED);
    i2cRepeatedStart();
    i2cTx(I2C_BASE_ADDR | I2C_OP_READ);
    i2cRxAck(StatusValue);

    StatusValue = StatusValue & 0x0008;
    if(StatusValue == 0x0008){
        i2cRxAck(dataXL);
        i2cRxAck(dataXH);
        i2cRxAck(dataYL);
        i2cRxAck(dataYH);
        i2cRxAck(dataZL);
        i2cRxAck(dataZH);
        //gpioClearOutput(AUXIO_O_LED);

        output.dataX = (dataXH << 8) | dataXL;
        output.dataY = (dataYH << 8) | dataYL;
        output.dataZ = (dataZH << 8) | dataZL;
        if(state.isInitialValF == 0){
            output.initX = output.dataX;
            output.initY = output.dataY;
            output.initZ = output.dataZ;
            state.isInitialValF = 1;
        }
        if(state.isInitialValF == 1){
            output.diffData = 0;
            diffTmp = output.dataX - output.initX;
            if(diffTmp<0){
                diffTmp = -diffTmp;
            }
            output.diffData += diffTmp;

            diffTmp = output.dataY - output.initY;
            if(diffTmp<0){
                diffTmp = -diffTmp;
            }
            output.diffData += diffTmp;

            diffTmp = output.dataZ - output.initZ;
            if(diffTmp<0){
                diffTmp = -diffTmp;
            }
            output.diffData += diffTmp;

             if(output.diffData > 1000){
                gpioSetOutput(AUXIO_O_LED);
             }
             if(output.diffData < 1000){
                gpioClearOutput(AUXIO_O_LED);
             }
        }
    }
}


i2cStop();

fwDelayUs(100, FW_DELAY_RANGE_500_US);

fwScheduleTask(1);]]></sccode>
        <sccode name="initialize" init_power_mode="0"><![CDATA[U16 WhoAmI_Value = 0;

i2cStart();
i2cTx(I2C_BASE_ADDR | I2C_OP_WRITE);
i2cTx(LIS3MDL_WHO_AM_I_ADDR);
//i2cStop();

if(state.i2cStatus != 0){
    i2cStop();
   // fwDelayUs(100, FW_DELAY_RANGE_100_MS);
    i2cStart();
    i2cTx(I2C_BASE_ADDR | I2C_OP_WRITE);
    i2cTx(LIS3MDL_WHO_AM_I_ADDR);
}

if(state.i2cStatus == 0){
    i2cRepeatedStart();
    i2cTx(I2C_BASE_ADDR | I2C_OP_READ);
    i2cRxAck(WhoAmI_Value);
    i2cStop();
    gpioSetOutput(AUXIO_O_LED);
}

if(WhoAmI_Value == 0x3D){

    i2cStart();
    i2cTx(I2C_BASE_ADDR | I2C_OP_WRITE);
    i2cTx(LIS3MDL_CTRL_REG1_ADDR);
    i2cTx(0x00);
    i2cStop();


    i2cStart();
    i2cTx(I2C_BASE_ADDR | I2C_OP_WRITE);
    i2cTx(LIS3MDL_CTRL_REG2_ADDR);
    i2cTx(0x00);
    i2cStop();

    i2cStart();
    i2cTx(I2C_BASE_ADDR | I2C_OP_WRITE);
    i2cTx(LIS3MDL_CTRL_REG3_ADDR);
    i2cTx(0x20);
    i2cStop();

    i2cStart();
    i2cTx(I2C_BASE_ADDR | I2C_OP_WRITE);
    i2cTx(LIS3MDL_CTRL_REG4_ADDR);
    i2cTx(0x00);
    i2cStop();



}



i2cStop();

fwScheduleTask(1);]]></sccode>
        <sccode name="terminate" init_power_mode="0"><![CDATA[]]></sccode>
        <event_trigger active_count="1">0,1,2,3</event_trigger>
        <tt_iter>run_execute</tt_iter>
        <tt_struct>output.dataX,output.dataY,output.dataZ,output.diffData</tt_struct>
        <rtl_struct></rtl_struct>
        <rtl_task_sel en="1" struct_log_list="output"/>
    </task>
</project>
