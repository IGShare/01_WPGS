<?xml version="1.0"?>
<project name="ADC Data Logger for SmartRF06EB" version="1.3.0.42428">
    <desc><![CDATA[Demonstrates periodical ADC sampling with storage in a circular buffer.
The ADC input is by default connected to the SmartRF06EB light sensor. Note that the light sensor must be powered separately through ALS_PWR to be operational.

The Sensor Controller does not notify the System CPU application about the state of the sample buffer. Instead, the System CPU wakes up periodically at a very low rate, and fetches the new samples from the circular buffer.
The System CPU application transfers the ADC data + basic statistical information over UART, so that the data can be logged and processed on the PC.

See the header in the application source file ("main.c" or similar) for further details and instructions. This file is located in the source code output directory.]]></desc>
    <pattr name="Board">SmartRF06EB + CC2650EM-7ID</pattr>
    <pattr name="Chip name">CC2650</pattr>
    <pattr name="Chip package">QFN48 7x7 RGZ</pattr>
    <pattr name="Chip revision">-</pattr>
    <pattr name="Code prefix"></pattr>
    <pattr name="Operating system">TI-RTOS</pattr>
    <pattr name="Output directory">./source</pattr>
    <task name="ADC Data Logger">
        <desc><![CDATA[Samples a single ADC channel at low rate and stores the values in a circular buffer without notifying the System CPU application.

The System CPU application must wake up periodically, compare the new value of output.head against the previous, and then fetch the latest samples from output.pSamples[].]]></desc>
        <tattr name="BUFFER_SIZE" desc="ADC sample buffer size" type="dec" content="const" scope="task" min="0" max="65535">400</tattr>
        <tattr name="PULSER_TIME_PERIOD" desc="PULSER_TIME_PERIOD" type="dec" content="const" scope="task" min="0" max="65535">151</tattr>
        <tattr name="output.head" desc="ADC sample buffer (input) head index" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.pSamples" desc="ADC sample buffer" size="BUFFER_SIZE" type="dec" content="struct_array" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.tail" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <resource_ref name="ADC" enabled="1"/>
        <resource_ref name="Analog Open-Drain Pins" enabled="0"/>
        <resource_ref name="Analog Open-Source Pins" enabled="0"/>
        <resource_ref name="Analog Pins" enabled="1">
            <io_usage name="SENSOR_OUTPUT" label="Analog sensor output">
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO29</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="COMPA" enabled="0"/>
        <resource_ref name="COMPB" enabled="0"/>
        <resource_ref name="COMPB Event Trigger" enabled="0"/>
        <resource_ref name="Delay Insertion" enabled="1"/>
        <resource_ref name="Differential Output Pins" enabled="0"/>
        <resource_ref name="Digital Input Pins" enabled="0"/>
        <resource_ref name="Digital Open-Drain Pins" enabled="0"/>
        <resource_ref name="Digital Open-Source Pins" enabled="0"/>
        <resource_ref name="Digital Output Pins" enabled="1">
            <io_usage name="LED_01" label="LED 01">
                <uattr name="Configuration on uninitialization">-1</uattr>
                <uattr name="Output value on initialization">1</uattr>
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO25</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
            </io_usage>
            <io_usage name="US_TX_TRIG" label="US TX TRIG">
                <uattr name="Configuration on uninitialization">-1</uattr>
                <uattr name="Output value on initialization">0</uattr>
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO28</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
            </io_usage>
            <io_usage name="LED_02" label="LED 02">
                <uattr name="Configuration on uninitialization">-1</uattr>
                <uattr name="Output value on initialization">0</uattr>
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO27</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="GPIO Event Trigger" enabled="0"/>
        <resource_ref name="I2C Master" enabled="0">
            <rattr name="SCL frequency">400</rattr>
            <rattr name="SCL stretch timeout">1</rattr>
            <io_usage>
                <uattr name="SCL pin/0000"></uattr>
                <uattr name="SDA pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="ISRC" enabled="0"/>
        <resource_ref name="Math and Logic" enabled="1"/>
        <resource_ref name="Multi-Buffered Output Data Exchange" enabled="0">
            <rattr name="Buffer count">2</rattr>
            <rattr name="Indicate overflow at buffer check">0</rattr>
            <rattr name="Indicate overflow at buffer switch">0</rattr>
            <rattr name="Prevent overflow at buffer switch">0</rattr>
        </resource_ref>
        <resource_ref name="Peripheral Sharing" enabled="0"/>
        <resource_ref name="RTC Multi-Event Capture" enabled="0"/>
        <resource_ref name="RTC-Based Execution Scheduling" enabled="1"/>
        <resource_ref name="SPI Chip Select" enabled="0"/>
        <resource_ref name="SPI Data Transfer" enabled="0">
            <rattr name="Bit rate">0</rattr>
            <rattr name="MISO configuration when inactive">-1</rattr>
            <rattr name="MOSI configuration on initialization">0</rattr>
            <rattr name="MOSI configuration on uninitialization">0</rattr>
            <rattr name="SCLK configuration on initialization">0</rattr>
            <rattr name="SCLK configuration on uninitialization">0</rattr>
            <io_usage>
                <uattr name="MISO pin/0000"></uattr>
                <uattr name="MOSI pin/0000"></uattr>
                <uattr name="SCLK pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="System CPU Alert" enabled="0"/>
        <resource_ref name="TDC" enabled="0"/>
        <resource_ref name="Timer 0" enabled="0"/>
        <resource_ref name="Timer Event Trigger" enabled="0"/>
        <resource_ref name="UART Emulator" enabled="0">
            <rattr name="RX buffer size">64</rattr>
            <rattr name="Required idle period before enabling RX">11</rattr>
            <rattr name="TX buffer size">64</rattr>
            <io_usage>
                <uattr name="RX pin/0000"></uattr>
                <uattr name="TX pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <sccode name="event0"><![CDATA[]]></sccode>
        <sccode name="execute"><![CDATA[gpioSetOutput(AUXIO_O_LED_01);
gpioGenPulseTrain(AUXIO_O_US_TX_TRIG, 1, PULSER_TIME_PERIOD, PULSER_TIME_PERIOD, 10);
fwDelayUs(2500, FW_DELAY_RANGE_100_MS);

// Enable the ADC
adcSelectGpioInput(AUXIO_A_SENSOR_OUTPUT);
adcEnableSync(ADC_REF_VDDS_REL, ADC_SAMPLE_TIME_10P6_US, ADC_TRIGGER_AUX_TIMER0);

// Start ADC trigger timer at 80 kHz
adcStartAuxTimer0Trigger(12);
S16 count=0;
U16 adcValCnt=0;
while (count < 340) {

    U16 n = output.head;
    adcReadFifo(output.pSamples[n]);

    if(output.pSamples[n]>3000){
        adcValCnt = adcValCnt+1;
    }


    // Update the head index
    utilIncrAndWrap(n, BUFFER_SIZE; output.head);

    // Calculate the number of samples currently stored
    count = output.head - output.tail;
    if (count < 0) {
        count += BUFFER_SIZE;
    }
}

adcStopAuxTimer0Trigger();
// Disable the ADC
adcDisable();


if(adcValCnt> 5){
    gpioSetOutput(AUXIO_O_LED_02);
    fwDelayUs(10000, FW_DELAY_RANGE_100_MS);
}
gpioClearOutput(AUXIO_O_LED_01);
gpioClearOutput(AUXIO_O_LED_02);
// Schedule the next execution
fwScheduleTask(10);]]></sccode>
        <sccode name="initialize"><![CDATA[// Select ADC input
adcSelectGpioInput(AUXIO_A_SENSOR_OUTPUT);

// Schedule the first execution
fwScheduleTask(1);]]></sccode>
        <sccode name="terminate"><![CDATA[]]></sccode>
        <tt_iter>run_execute</tt_iter>
        <tt_struct></tt_struct>
    </task>
</project>
