
IGS_WLGM_AT_V_0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800100  00800100  00000768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001605  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000808  00000000  00000000  00001e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae6  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  0000317c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070a  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e20  00000000  00000000  000039ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000047da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	88 c2       	rjmp	.+1296   	; 0x514 <__vector_1>
   4:	f3 c2       	rjmp	.+1510   	; 0x5ec <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	69 c2       	rjmp	.+1234   	; 0x4f4 <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 31       	cpi	r26, 0x15	; 21
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	70 d1       	rcall	.+736    	; 0x332 <main>
  52:	4e c3       	rjmp	.+1692   	; 0x6f0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z18igs_wlgm_port_initv>:
	/* LED POSITION
	*  D27 D26 D21 D20 D25
	*  D24 D23 D29 D28 D22 
	*/
	
	DDRB = (0<<DDB7)|(0<<DDB6)|(0<<DDB5)|(0<<DDB4)|(0<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
  56:	87 e0       	ldi	r24, 0x07	; 7
  58:	84 b9       	out	0x04, r24	; 4
	DDRC =			 (0<<DDC6)|(1<<DDC5)|(1<<DDC4)|(1<<DDC3)|(1<<DDC2)|(1<<DDC1)|(1<<DDC0);
  5a:	8f e3       	ldi	r24, 0x3F	; 63
  5c:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(0<<DDD4)|(0<<DDD3)|(0<<DDD2)|(0<<DDD1)|(0<<DDD0);
  5e:	80 ee       	ldi	r24, 0xE0	; 224
  60:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0x00;
  62:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
  64:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
  66:	1b b8       	out	0x0b, r1	; 11
  68:	08 95       	ret

0000006a <_Z22igs_wlgm_led_port_testv>:
}

void igs_wlgm_led_port_test()
{
  6a:	82 e0       	ldi	r24, 0x02	; 2
  6c:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	for(i=0; i<2; i++){
		//Status LED Test (ON)
		PORTD &= ~(1<<PORTD7);_delay_ms(100);
  6e:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	e7 ea       	ldi	r30, 0xA7	; 167
  72:	f1 e6       	ldi	r31, 0x61	; 97
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <_Z22igs_wlgm_led_port_testv+0xa>
  78:	00 c0       	rjmp	.+0      	; 0x7a <_Z22igs_wlgm_led_port_testv+0x10>
  7a:	00 00       	nop
		PORTD &= ~(1<<PORTD6);_delay_ms(100);
  7c:	5e 98       	cbi	0x0b, 6	; 11
  7e:	e7 ea       	ldi	r30, 0xA7	; 167
  80:	f1 e6       	ldi	r31, 0x61	; 97
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <_Z22igs_wlgm_led_port_testv+0x18>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_Z22igs_wlgm_led_port_testv+0x1e>
  88:	00 00       	nop
		PORTB &= ~(1<<PORTB1);_delay_ms(100);
  8a:	29 98       	cbi	0x05, 1	; 5
  8c:	e7 ea       	ldi	r30, 0xA7	; 167
  8e:	f1 e6       	ldi	r31, 0x61	; 97
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z22igs_wlgm_led_port_testv+0x26>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_Z22igs_wlgm_led_port_testv+0x2c>
  96:	00 00       	nop
		PORTB &= ~(1<<PORTB0);_delay_ms(100);
  98:	28 98       	cbi	0x05, 0	; 5
  9a:	e7 ea       	ldi	r30, 0xA7	; 167
  9c:	f1 e6       	ldi	r31, 0x61	; 97
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <_Z22igs_wlgm_led_port_testv+0x34>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_Z22igs_wlgm_led_port_testv+0x3a>
  a4:	00 00       	nop
		PORTD &= ~(1<<PORTD5);_delay_ms(100);
  a6:	5d 98       	cbi	0x0b, 5	; 11
  a8:	e7 ea       	ldi	r30, 0xA7	; 167
  aa:	f1 e6       	ldi	r31, 0x61	; 97
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <_Z22igs_wlgm_led_port_testv+0x42>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <_Z22igs_wlgm_led_port_testv+0x48>
  b2:	00 00       	nop
		PORTB &= ~(1<<PORTB2);_delay_ms(100);
  b4:	2a 98       	cbi	0x05, 2	; 5
  b6:	e7 ea       	ldi	r30, 0xA7	; 167
  b8:	f1 e6       	ldi	r31, 0x61	; 97
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <_Z22igs_wlgm_led_port_testv+0x50>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_Z22igs_wlgm_led_port_testv+0x56>
  c0:	00 00       	nop
		PORTC &= ~(1<<PORTC0);_delay_ms(100);
  c2:	40 98       	cbi	0x08, 0	; 8
  c4:	e7 ea       	ldi	r30, 0xA7	; 167
  c6:	f1 e6       	ldi	r31, 0x61	; 97
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_Z22igs_wlgm_led_port_testv+0x5e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_Z22igs_wlgm_led_port_testv+0x64>
  ce:	00 00       	nop
		PORTC &= ~(1<<PORTC1);_delay_ms(100);
  d0:	41 98       	cbi	0x08, 1	; 8
  d2:	e7 ea       	ldi	r30, 0xA7	; 167
  d4:	f1 e6       	ldi	r31, 0x61	; 97
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_Z22igs_wlgm_led_port_testv+0x6c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z22igs_wlgm_led_port_testv+0x72>
  dc:	00 00       	nop
		PORTC &= ~(1<<PORTC4);_delay_ms(100);
  de:	44 98       	cbi	0x08, 4	; 8
  e0:	e7 ea       	ldi	r30, 0xA7	; 167
  e2:	f1 e6       	ldi	r31, 0x61	; 97
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <_Z22igs_wlgm_led_port_testv+0x7a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_Z22igs_wlgm_led_port_testv+0x80>
  ea:	00 00       	nop
		PORTC &= ~(1<<PORTC5);_delay_ms(100);
  ec:	45 98       	cbi	0x08, 5	; 8
  ee:	e7 ea       	ldi	r30, 0xA7	; 167
  f0:	f1 e6       	ldi	r31, 0x61	; 97
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <_Z22igs_wlgm_led_port_testv+0x88>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z22igs_wlgm_led_port_testv+0x8e>
  f8:	00 00       	nop
		
		//DP LED Test (GREEN OFF, RED ON)
		PORTC &= ~(1<<PORTC2);_delay_ms(100);
  fa:	42 98       	cbi	0x08, 2	; 8
  fc:	e7 ea       	ldi	r30, 0xA7	; 167
  fe:	f1 e6       	ldi	r31, 0x61	; 97
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <_Z22igs_wlgm_led_port_testv+0x96>
 104:	00 c0       	rjmp	.+0      	; 0x106 <_Z22igs_wlgm_led_port_testv+0x9c>
 106:	00 00       	nop
		PORTC |= (1<<PORTC3);_delay_ms(100);
 108:	43 9a       	sbi	0x08, 3	; 8
 10a:	e7 ea       	ldi	r30, 0xA7	; 167
 10c:	f1 e6       	ldi	r31, 0x61	; 97
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z22igs_wlgm_led_port_testv+0xa4>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_Z22igs_wlgm_led_port_testv+0xaa>
 114:	00 00       	nop
		
		//Status LED Test (OFF)
		PORTD |= (1<<PORTD7);_delay_ms(100);
 116:	5f 9a       	sbi	0x0b, 7	; 11
 118:	e7 ea       	ldi	r30, 0xA7	; 167
 11a:	f1 e6       	ldi	r31, 0x61	; 97
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <_Z22igs_wlgm_led_port_testv+0xb2>
 120:	00 c0       	rjmp	.+0      	; 0x122 <_Z22igs_wlgm_led_port_testv+0xb8>
 122:	00 00       	nop
		PORTD |= (1<<PORTD6);_delay_ms(100);
 124:	5e 9a       	sbi	0x0b, 6	; 11
 126:	e7 ea       	ldi	r30, 0xA7	; 167
 128:	f1 e6       	ldi	r31, 0x61	; 97
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <_Z22igs_wlgm_led_port_testv+0xc0>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_Z22igs_wlgm_led_port_testv+0xc6>
 130:	00 00       	nop
		PORTB |= (1<<PORTB1);_delay_ms(100);
 132:	29 9a       	sbi	0x05, 1	; 5
 134:	e7 ea       	ldi	r30, 0xA7	; 167
 136:	f1 e6       	ldi	r31, 0x61	; 97
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <_Z22igs_wlgm_led_port_testv+0xce>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <_Z22igs_wlgm_led_port_testv+0xd4>
 13e:	00 00       	nop
		PORTB |= (1<<PORTB0);_delay_ms(100);
 140:	28 9a       	sbi	0x05, 0	; 5
 142:	e7 ea       	ldi	r30, 0xA7	; 167
 144:	f1 e6       	ldi	r31, 0x61	; 97
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <_Z22igs_wlgm_led_port_testv+0xdc>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <_Z22igs_wlgm_led_port_testv+0xe2>
 14c:	00 00       	nop
		PORTD |= (1<<PORTD5);_delay_ms(100);
 14e:	5d 9a       	sbi	0x0b, 5	; 11
 150:	e7 ea       	ldi	r30, 0xA7	; 167
 152:	f1 e6       	ldi	r31, 0x61	; 97
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <_Z22igs_wlgm_led_port_testv+0xea>
 158:	00 c0       	rjmp	.+0      	; 0x15a <_Z22igs_wlgm_led_port_testv+0xf0>
 15a:	00 00       	nop
		PORTB |= (1<<PORTB2);_delay_ms(100);
 15c:	2a 9a       	sbi	0x05, 2	; 5
 15e:	e7 ea       	ldi	r30, 0xA7	; 167
 160:	f1 e6       	ldi	r31, 0x61	; 97
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <_Z22igs_wlgm_led_port_testv+0xf8>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_Z22igs_wlgm_led_port_testv+0xfe>
 168:	00 00       	nop
		PORTC |= (1<<PORTC0);_delay_ms(100);
 16a:	40 9a       	sbi	0x08, 0	; 8
 16c:	e7 ea       	ldi	r30, 0xA7	; 167
 16e:	f1 e6       	ldi	r31, 0x61	; 97
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <_Z22igs_wlgm_led_port_testv+0x106>
 174:	00 c0       	rjmp	.+0      	; 0x176 <_Z22igs_wlgm_led_port_testv+0x10c>
 176:	00 00       	nop
		PORTC |= (1<<PORTC1);_delay_ms(100);
 178:	41 9a       	sbi	0x08, 1	; 8
 17a:	e7 ea       	ldi	r30, 0xA7	; 167
 17c:	f1 e6       	ldi	r31, 0x61	; 97
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <_Z22igs_wlgm_led_port_testv+0x114>
 182:	00 c0       	rjmp	.+0      	; 0x184 <_Z22igs_wlgm_led_port_testv+0x11a>
 184:	00 00       	nop
		PORTC |= (1<<PORTC4);_delay_ms(100);
 186:	44 9a       	sbi	0x08, 4	; 8
 188:	e7 ea       	ldi	r30, 0xA7	; 167
 18a:	f1 e6       	ldi	r31, 0x61	; 97
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <_Z22igs_wlgm_led_port_testv+0x122>
 190:	00 c0       	rjmp	.+0      	; 0x192 <_Z22igs_wlgm_led_port_testv+0x128>
 192:	00 00       	nop
		PORTC |= (1<<PORTC5);_delay_ms(100);
 194:	45 9a       	sbi	0x08, 5	; 8
 196:	e7 ea       	ldi	r30, 0xA7	; 167
 198:	f1 e6       	ldi	r31, 0x61	; 97
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <_Z22igs_wlgm_led_port_testv+0x130>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_Z22igs_wlgm_led_port_testv+0x136>
 1a0:	00 00       	nop
		
		//DP LED Test (GREEN ON, RED OFF)
		PORTC |= (1<<PORTC2);_delay_ms(100);
 1a2:	42 9a       	sbi	0x08, 2	; 8
 1a4:	e7 ea       	ldi	r30, 0xA7	; 167
 1a6:	f1 e6       	ldi	r31, 0x61	; 97
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <_Z22igs_wlgm_led_port_testv+0x13e>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_Z22igs_wlgm_led_port_testv+0x144>
 1ae:	00 00       	nop
		PORTC &= ~(1<<PORTC3);_delay_ms(100);
 1b0:	43 98       	cbi	0x08, 3	; 8
 1b2:	e7 ea       	ldi	r30, 0xA7	; 167
 1b4:	f1 e6       	ldi	r31, 0x61	; 97
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <_Z22igs_wlgm_led_port_testv+0x14c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <_Z22igs_wlgm_led_port_testv+0x152>
 1bc:	00 00       	nop
 1be:	01 97       	sbiw	r24, 0x01	; 1
}

void igs_wlgm_led_port_test()
{
	int i;
	for(i=0; i<2; i++){
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <_Z22igs_wlgm_led_port_testv+0x15a>
 1c2:	55 cf       	rjmp	.-342    	; 0x6e <_Z22igs_wlgm_led_port_testv+0x4>
		//DP LED Test (GREEN ON, RED OFF)
		PORTC |= (1<<PORTC2);_delay_ms(100);
		PORTC &= ~(1<<PORTC3);_delay_ms(100);
	}
	
		PORTD |= (1<<PORTD7);_delay_ms(100);
 1c4:	5f 9a       	sbi	0x0b, 7	; 11
 1c6:	87 ea       	ldi	r24, 0xA7	; 167
 1c8:	91 e6       	ldi	r25, 0x61	; 97
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <_Z22igs_wlgm_led_port_testv+0x160>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_Z22igs_wlgm_led_port_testv+0x166>
 1d0:	00 00       	nop
		PORTD |= (1<<PORTD6);_delay_ms(100);
 1d2:	5e 9a       	sbi	0x0b, 6	; 11
 1d4:	e7 ea       	ldi	r30, 0xA7	; 167
 1d6:	f1 e6       	ldi	r31, 0x61	; 97
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <_Z22igs_wlgm_led_port_testv+0x16e>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <_Z22igs_wlgm_led_port_testv+0x174>
 1de:	00 00       	nop
		PORTB |= (1<<PORTB1);_delay_ms(100);
 1e0:	29 9a       	sbi	0x05, 1	; 5
 1e2:	87 ea       	ldi	r24, 0xA7	; 167
 1e4:	91 e6       	ldi	r25, 0x61	; 97
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <_Z22igs_wlgm_led_port_testv+0x17c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_Z22igs_wlgm_led_port_testv+0x182>
 1ec:	00 00       	nop
		PORTB |= (1<<PORTB0);_delay_ms(100);
 1ee:	28 9a       	sbi	0x05, 0	; 5
 1f0:	e7 ea       	ldi	r30, 0xA7	; 167
 1f2:	f1 e6       	ldi	r31, 0x61	; 97
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <_Z22igs_wlgm_led_port_testv+0x18a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_Z22igs_wlgm_led_port_testv+0x190>
 1fa:	00 00       	nop
		PORTD |= (1<<PORTD5);_delay_ms(100);
 1fc:	5d 9a       	sbi	0x0b, 5	; 11
 1fe:	87 ea       	ldi	r24, 0xA7	; 167
 200:	91 e6       	ldi	r25, 0x61	; 97
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <_Z22igs_wlgm_led_port_testv+0x198>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_Z22igs_wlgm_led_port_testv+0x19e>
 208:	00 00       	nop
		PORTB |= (1<<PORTB2);_delay_ms(100);
 20a:	2a 9a       	sbi	0x05, 2	; 5
 20c:	e7 ea       	ldi	r30, 0xA7	; 167
 20e:	f1 e6       	ldi	r31, 0x61	; 97
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <_Z22igs_wlgm_led_port_testv+0x1a6>
 214:	00 c0       	rjmp	.+0      	; 0x216 <_Z22igs_wlgm_led_port_testv+0x1ac>
 216:	00 00       	nop
		PORTC |= (1<<PORTC0);_delay_ms(100);
 218:	40 9a       	sbi	0x08, 0	; 8
 21a:	87 ea       	ldi	r24, 0xA7	; 167
 21c:	91 e6       	ldi	r25, 0x61	; 97
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <_Z22igs_wlgm_led_port_testv+0x1b4>
 222:	00 c0       	rjmp	.+0      	; 0x224 <_Z22igs_wlgm_led_port_testv+0x1ba>
 224:	00 00       	nop
		PORTC |= (1<<PORTC1);_delay_ms(100);
 226:	41 9a       	sbi	0x08, 1	; 8
 228:	e7 ea       	ldi	r30, 0xA7	; 167
 22a:	f1 e6       	ldi	r31, 0x61	; 97
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <_Z22igs_wlgm_led_port_testv+0x1c2>
 230:	00 c0       	rjmp	.+0      	; 0x232 <_Z22igs_wlgm_led_port_testv+0x1c8>
 232:	00 00       	nop
		PORTC |= (1<<PORTC4);_delay_ms(100);
 234:	44 9a       	sbi	0x08, 4	; 8
 236:	87 ea       	ldi	r24, 0xA7	; 167
 238:	91 e6       	ldi	r25, 0x61	; 97
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <_Z22igs_wlgm_led_port_testv+0x1d0>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <_Z22igs_wlgm_led_port_testv+0x1d6>
 240:	00 00       	nop
		PORTC |= (1<<PORTC5);_delay_ms(100);
 242:	45 9a       	sbi	0x08, 5	; 8
 244:	e7 ea       	ldi	r30, 0xA7	; 167
 246:	f1 e6       	ldi	r31, 0x61	; 97
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <_Z22igs_wlgm_led_port_testv+0x1de>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <_Z22igs_wlgm_led_port_testv+0x1e4>
 24e:	00 00       	nop
		
		PORTC &= ~(1<<PORTC2);_delay_ms(100);
 250:	42 98       	cbi	0x08, 2	; 8
 252:	87 ea       	ldi	r24, 0xA7	; 167
 254:	91 e6       	ldi	r25, 0x61	; 97
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <_Z22igs_wlgm_led_port_testv+0x1ec>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <_Z22igs_wlgm_led_port_testv+0x1f2>
 25c:	00 00       	nop
		PORTC &= ~(1<<PORTC3);_delay_ms(100);
 25e:	43 98       	cbi	0x08, 3	; 8
 260:	e7 ea       	ldi	r30, 0xA7	; 167
 262:	f1 e6       	ldi	r31, 0x61	; 97
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <_Z22igs_wlgm_led_port_testv+0x1fa>
 268:	00 c0       	rjmp	.+0      	; 0x26a <_Z22igs_wlgm_led_port_testv+0x200>
 26a:	00 00       	nop
 26c:	08 95       	ret

0000026e <_Z19igs_wlgm_StatusInitv>:
}

void igs_wlgm_StatusInit()
{

	G_plcRxBitCnt		= 0;
 26e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <G_plcRxBitCnt>
	MYPPNSR				= 0;
 272:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <MYPPNSR>
	
	G_plcRxBuffer[0]	= 0;
 276:	e3 e0       	ldi	r30, 0x03	; 3
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	10 82       	st	Z, r1
	G_plcRxBuffer[1]	= 0;
 27c:	11 82       	std	Z+1, r1	; 0x01
	G_plcRxBuffer[2]	= 0;
 27e:	12 82       	std	Z+2, r1	; 0x02
	G_plcRxBuffer[3]	= 0;
 280:	13 82       	std	Z+3, r1	; 0x03
	G_plcRxBuffer[4]	= 0;
 282:	14 82       	std	Z+4, r1	; 0x04
	G_plcRxBuffer[5]	= 0;
 284:	15 82       	std	Z+5, r1	; 0x05
 286:	08 95       	ret

00000288 <_Z30igs_wlgm_ExternalInterruptInitv>:
}

void igs_wlgm_ExternalInterruptInit()
{
	EICRA  = (0 << ISC00);
 288:	e9 e6       	ldi	r30, 0x69	; 105
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	10 82       	st	Z, r1
	EICRA |= (1 << ISC01);    // set INT0 to trigger on Falling EDge
 28e:	80 81       	ld	r24, Z
 290:	82 60       	ori	r24, 0x02	; 2
 292:	80 83       	st	Z, r24
	EICRA |= (1 << ISC10);
 294:	80 81       	ld	r24, Z
 296:	84 60       	ori	r24, 0x04	; 4
 298:	80 83       	st	Z, r24
	EICRA |= (1 << ISC11);    // set INT1 to trigger on Rising Edge
 29a:	80 81       	ld	r24, Z
 29c:	88 60       	ori	r24, 0x08	; 8
 29e:	80 83       	st	Z, r24
	
	EIMSK = (1 << INT0) | (1 << INT1);   // Turns on INT0 and INT1
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	8d bb       	out	0x1d, r24	; 29
 2a4:	08 95       	ret

000002a6 <_Z22igs_wlgm_TimerZeroInitv>:
}

void igs_wlgm_TimerZeroInit()
{
	TCCR0A = (0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
 2a6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (0<<FOC0A) | (0<<FOC0B) | (0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
 2a8:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = (1<<TOIE0);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	TIFR0 = (1<<TOV0);
 2b0:	85 bb       	out	0x15, r24	; 21
 2b2:	08 95       	ret

000002b4 <_Z25igs_wlgm_ReadSerialNumberv>:
	//TCNT0 = TIMER_INIT_VALUE;
}

uint32_t igs_wlgm_ReadSerialNumber()
{
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
	uint8_t serialtmp[3];
	uint32_t serial;
	
	//eeprom_write_byte((uint8_t *)8, 0);
	
	serialtmp[0] = eeprom_read_byte((uint8_t *)4);
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 d2       	rcall	.+1028   	; 0x6c4 <eeprom_read_byte>
 2c0:	08 2f       	mov	r16, r24
	serialtmp[1] = eeprom_read_byte((uint8_t *)5);
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fe d1       	rcall	.+1020   	; 0x6c4 <eeprom_read_byte>
 2c8:	c8 2f       	mov	r28, r24
	serialtmp[2] = eeprom_read_byte((uint8_t *)6);
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	fa d1       	rcall	.+1012   	; 0x6c4 <eeprom_read_byte>
	
	serial = ((uint32_t)serialtmp[0] << 16) + ((uint32_t)serialtmp[1] << 8) + ((uint32_t)serialtmp[2]);
	return serial;
 2d0:	40 2f       	mov	r20, r16
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	9a 01       	movw	r18, r20
 2da:	11 27       	eor	r17, r17
 2dc:	00 27       	eor	r16, r16
 2de:	4c 2f       	mov	r20, r28
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	76 2f       	mov	r23, r22
 2e8:	65 2f       	mov	r22, r21
 2ea:	54 2f       	mov	r21, r20
 2ec:	44 27       	eor	r20, r20
 2ee:	40 0f       	add	r20, r16
 2f0:	51 1f       	adc	r21, r17
 2f2:	62 1f       	adc	r22, r18
 2f4:	73 1f       	adc	r23, r19
 2f6:	8a 01       	movw	r16, r20
 2f8:	9b 01       	movw	r18, r22
 2fa:	08 0f       	add	r16, r24
 2fc:	11 1d       	adc	r17, r1
 2fe:	21 1d       	adc	r18, r1
 300:	31 1d       	adc	r19, r1
 302:	c9 01       	movw	r24, r18
 304:	b8 01       	movw	r22, r16
}
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret

0000030e <_Z37igs_wlgm_SetControlIDCompleteResponsev>:
	uint8_t mask = 0x01;
	uint8_t plcTxData=IDX_OPM_SET_ID_COMPLETE;
	
	
	//Start Bit
	PLC_TX_ONE_BIT(0,PLC_TX_ONEBIT_TIME_US,mask);
 30e:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	84 e6       	ldi	r24, 0x64	; 100
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x4>

	PLC_TX_ONE_BIT(0,PLC_TX_ONEBIT_TIME_US,plcTxData);
 316:	5c 9a       	sbi	0x0b, 4	; 11
 318:	84 e6       	ldi	r24, 0x64	; 100
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <_Z37igs_wlgm_SetControlIDCompleteResponsev+0xc>
	PLC_TX_ONE_BIT(1,PLC_TX_ONEBIT_TIME_US,plcTxData);
 31e:	5c 9a       	sbi	0x0b, 4	; 11
 320:	84 e6       	ldi	r24, 0x64	; 100
 322:	8a 95       	dec	r24
 324:	f1 f7       	brne	.-4      	; 0x322 <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x14>
	PLC_TX_ONE_BIT(2,PLC_TX_ONEBIT_TIME_US,plcTxData);
 326:	5c 9a       	sbi	0x0b, 4	; 11
 328:	84 e6       	ldi	r24, 0x64	; 100
 32a:	8a 95       	dec	r24
 32c:	f1 f7       	brne	.-4      	; 0x32a <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x1c>
	
	PORTD &= ~(1<<PORTD4);
 32e:	5c 98       	cbi	0x0b, 4	; 11
 330:	08 95       	ret

00000332 <main>:
{
    /* Replace with your application code */
	struct TypeOnePacket rx_message1;
	struct TxPacket tx_message;
	
	igs_wlgm_port_init();
 332:	91 de       	rcall	.-734    	; 0x56 <_Z18igs_wlgm_port_initv>
	igs_wlgm_led_port_test();
 334:	9a de       	rcall	.-716    	; 0x6a <_Z22igs_wlgm_led_port_testv>
	igs_wlgm_ExternalInterruptInit();
 336:	a8 df       	rcall	.-176    	; 0x288 <_Z30igs_wlgm_ExternalInterruptInitv>
	igs_wlgm_TimerZeroInit();
 338:	b6 df       	rcall	.-148    	; 0x2a6 <_Z22igs_wlgm_TimerZeroInitv>
	igs_wlgm_StatusInit();
 33a:	99 df       	rcall	.-206    	; 0x26e <_Z19igs_wlgm_StatusInitv>
	
	mySerialNumber = igs_wlgm_ReadSerialNumber();
 33c:	bb df       	rcall	.-138    	; 0x2b4 <_Z25igs_wlgm_ReadSerialNumberv>
 33e:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <mySerialNumber>
 342:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <mySerialNumber+0x1>
 346:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mySerialNumber+0x2>
 34a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <mySerialNumber+0x3>

	
	sei();
 34e:	78 94       	sei
			TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
			
			uint8_t packetType =0;
			struct TypeZeroPacket rx_message0;

			packetType = (G_plcRxBuffer[0] & 0x0F)>>1;
 350:	c3 e0       	ldi	r28, 0x03	; 3
 352:	d1 e0       	ldi	r29, 0x01	; 1
						else
						{
							MY_ID = EPR_ID;
						}
						
						SN_ReceiveSuccessFallingF = 1;
 354:	11 e0       	ldi	r17, 0x01	; 1
	sei();

	while (1) 
    {

		if(G_isSameValue == 1){
 356:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	21 f5       	brne	.+72     	; 0x3a6 <main+0x74>
			//PORTB ^= (1<<PB1);
			G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= G_preBitValue << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 35e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <G_preBitValue>
 362:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <G_plcRxBitCnt>
 366:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <G_plcRxBitCnt>
 36a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <G_plcRxBitCnt>
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	f5 95       	asr	r31
 372:	e7 95       	ror	r30
 374:	f5 95       	asr	r31
 376:	e7 95       	ror	r30
 378:	f5 95       	asr	r31
 37a:	e7 95       	ror	r30
 37c:	ed 5f       	subi	r30, 0xFD	; 253
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	40 81       	ld	r20, Z
 382:	89 2f       	mov	r24, r25
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	38 7f       	andi	r19, 0xF8	; 248
 388:	23 1b       	sub	r18, r19
 38a:	02 c0       	rjmp	.+4      	; 0x390 <main+0x5e>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	2a 95       	dec	r18
 392:	e2 f7       	brpl	.-8      	; 0x38c <main+0x5a>
 394:	84 2b       	or	r24, r20
 396:	80 83       	st	Z, r24
			G_plcRxBitCnt++;
 398:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <G_plcRxBitCnt>
			G_isSameValue = 0;
 3a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		if(G_plcRxBitCnt>=PLC_RX_MAXBIT){
 3a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 3aa:	84 32       	cpi	r24, 0x24	; 36
 3ac:	a0 f2       	brcs	.-88     	; 0x356 <main+0x24>
			TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 3ae:	15 bc       	out	0x25, r1	; 37
			
			uint8_t packetType =0;
			struct TypeZeroPacket rx_message0;

			packetType = (G_plcRxBuffer[0] & 0x0F)>>1;
 3b0:	88 81       	ld	r24, Y
			
			switch(packetType)
 3b2:	8f 70       	andi	r24, 0x0F	; 15
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	91 05       	cpc	r25, r1
 3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0x90>
 3c0:	8a c0       	rjmp	.+276    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 3c2:	1c f4       	brge	.+6      	; 0x3ca <main+0x98>
 3c4:	89 2b       	or	r24, r25
 3c6:	b1 f0       	breq	.+44     	; 0x3f4 <main+0xc2>
 3c8:	93 c0       	rjmp	.+294    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 3ca:	84 30       	cpi	r24, 0x04	; 4
 3cc:	91 05       	cpc	r25, r1
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <main+0xa0>
 3d0:	8b c0       	rjmp	.+278    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 3d2:	07 97       	sbiw	r24, 0x07	; 7
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <main+0xa6>
 3d6:	8c c0       	rjmp	.+280    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			{
				
				// CCM Mode
				// USM Control
				case IDX_PCLTYPE_ADDR_SET_START :{
					if(SN_ReceiveSuccessFallingF != 1){
 3d8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SN_ReceiveSuccessFallingF>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	09 f4       	brne	.+2      	; 0x3e2 <main+0xb0>
 3e0:	87 c0       	rjmp	.+270    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
						PORTC = PORTC &= ~(1<<PORTC2);
 3e2:	88 b1       	in	r24, 0x08	; 8
 3e4:	8b 7f       	andi	r24, 0xFB	; 251
 3e6:	88 b9       	out	0x08, r24	; 8
 3e8:	88 b9       	out	0x08, r24	; 8
						PORTC = PORTC &= ~(1<<PORTC3);
 3ea:	88 b1       	in	r24, 0x08	; 8
 3ec:	87 7f       	andi	r24, 0xF7	; 247
 3ee:	88 b9       	out	0x08, r24	; 8
 3f0:	88 b9       	out	0x08, r24	; 8
 3f2:	7e c0       	rjmp	.+252    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				}
				case IDX_PCLTYPE_CCM_USM_ADDR : {
					
					// Serial Number - Control ID Setting
					
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
 3f4:	38 81       	ld	r19, Y
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
					+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8)
 3f8:	59 81       	ldd	r21, Y+1	; 0x01
 3fa:	2a 81       	ldd	r18, Y+2	; 0x02
					+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
 3fc:	6a 81       	ldd	r22, Y+2	; 0x02
 3fe:	4b 81       	ldd	r20, Y+3	; 0x03
 400:	70 e1       	ldi	r23, 0x10	; 16
 402:	87 9f       	mul	r24, r23
 404:	c0 01       	movw	r24, r0
 406:	11 24       	eor	r1, r1
 408:	99 27       	eor	r25, r25
 40a:	32 95       	swap	r19
 40c:	3f 70       	andi	r19, 0x0F	; 15
 40e:	83 2b       	or	r24, r19
 410:	09 2e       	mov	r0, r25
 412:	00 0c       	add	r0, r0
 414:	aa 0b       	sbc	r26, r26
 416:	bb 0b       	sbc	r27, r27
 418:	7c 01       	movw	r14, r24
 41a:	dd 24       	eor	r13, r13
 41c:	cc 24       	eor	r12, r12
 41e:	80 e1       	ldi	r24, 0x10	; 16
 420:	28 9f       	mul	r18, r24
 422:	90 01       	movw	r18, r0
 424:	11 24       	eor	r1, r1
 426:	33 27       	eor	r19, r19
 428:	85 2f       	mov	r24, r21
 42a:	82 95       	swap	r24
 42c:	8f 70       	andi	r24, 0x0F	; 15
 42e:	f9 01       	movw	r30, r18
 430:	e8 2b       	or	r30, r24
 432:	cf 01       	movw	r24, r30
 434:	09 2e       	mov	r0, r25
 436:	00 0c       	add	r0, r0
 438:	aa 0b       	sbc	r26, r26
 43a:	bb 0b       	sbc	r27, r27
 43c:	ba 2f       	mov	r27, r26
 43e:	a9 2f       	mov	r26, r25
 440:	98 2f       	mov	r25, r24
 442:	88 27       	eor	r24, r24
 444:	8c 0d       	add	r24, r12
 446:	9d 1d       	adc	r25, r13
 448:	ae 1d       	adc	r26, r14
 44a:	bf 1d       	adc	r27, r15
 44c:	f0 e1       	ldi	r31, 0x10	; 16
 44e:	4f 9f       	mul	r20, r31
 450:	a0 01       	movw	r20, r0
 452:	11 24       	eor	r1, r1
 454:	55 27       	eor	r21, r21
 456:	62 95       	swap	r22
 458:	6f 70       	andi	r22, 0x0F	; 15
 45a:	46 2b       	or	r20, r22
 45c:	05 2e       	mov	r0, r21
 45e:	00 0c       	add	r0, r0
 460:	66 0b       	sbc	r22, r22
 462:	77 0b       	sbc	r23, r23
 464:	84 0f       	add	r24, r20
 466:	95 1f       	adc	r25, r21
 468:	a6 1f       	adc	r26, r22
 46a:	b7 1f       	adc	r27, r23
 46c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rxSerialNumber>
 470:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <rxSerialNumber+0x1>
 474:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <rxSerialNumber+0x2>
 478:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <rxSerialNumber+0x3>
					rx_message0.controlID		 = ((G_plcRxBuffer[3]&0xF0) >> 4) | ((G_plcRxBuffer[4]&0x0F) << 4);
 47c:	fb 80       	ldd	r15, Y+3	; 0x03
 47e:	2c 81       	ldd	r18, Y+4	; 0x04
					
					if(rxSerialNumber == mySerialNumber)
 480:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <mySerialNumber>
 484:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <mySerialNumber+0x1>
 488:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mySerialNumber+0x2>
 48c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <mySerialNumber+0x3>
 490:	84 17       	cp	r24, r20
 492:	95 07       	cpc	r25, r21
 494:	a6 07       	cpc	r26, r22
 496:	b7 07       	cpc	r27, r23
 498:	59 f5       	brne	.+86     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					// Serial Number - Control ID Setting
					
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
					+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8)
					+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
					rx_message0.controlID		 = ((G_plcRxBuffer[3]&0xF0) >> 4) | ((G_plcRxBuffer[4]&0x0F) << 4);
 49a:	f6 94       	lsr	r15
 49c:	f6 94       	lsr	r15
 49e:	f6 94       	lsr	r15
 4a0:	f6 94       	lsr	r15
 4a2:	30 e1       	ldi	r19, 0x10	; 16
 4a4:	23 9f       	mul	r18, r19
 4a6:	c0 01       	movw	r24, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	f8 2a       	or	r15, r24
					
					if(rxSerialNumber == mySerialNumber)
					{
						PORTC |= (1<<PORTC2);
 4ac:	42 9a       	sbi	0x08, 2	; 8
						EPR_ID = eeprom_read_byte((uint8_t *)7);
 4ae:	87 e0       	ldi	r24, 0x07	; 7
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	08 d1       	rcall	.+528    	; 0x6c4 <eeprom_read_byte>
 4b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <EPR_ID>
						
						if(EPR_ID != rx_message0.controlID)
 4b8:	f8 16       	cp	r15, r24
 4ba:	39 f0       	breq	.+14     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
						{
							
							MY_ID = rx_message0.controlID;
 4bc:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <MY_ID>
							eeprom_write_byte((uint8_t *)7, rx_message0.controlID);
 4c0:	6f 2d       	mov	r22, r15
 4c2:	87 e0       	ldi	r24, 0x07	; 7
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	06 d1       	rcall	.+524    	; 0x6d4 <eeprom_write_byte>
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
						}
						else
						{
							MY_ID = EPR_ID;
 4ca:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <MY_ID>
						}
						
						SN_ReceiveSuccessFallingF = 1;
 4ce:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <SN_ReceiveSuccessFallingF>
						igs_wlgm_SetControlIDCompleteResponse();
 4d2:	1d df       	rcall	.-454    	; 0x30e <_Z37igs_wlgm_SetControlIDCompleteResponsev>
 4d4:	0d c0       	rjmp	.+26     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					break;
				}
				case IDX_PCLTYPE_CCM_USM_CNTL : {
					// USM Control
					
					if( SN_ReceiveSuccessFallingF == 1)
 4d6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SN_ReceiveSuccessFallingF>
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	49 f4       	brne	.+18     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					{
						
						rx_message1.controlID = ((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1] & 0x0F) << 4);
 4de:	88 81       	ld	r24, Y
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
						rx_message1.OperationMode =  (G_plcRxBuffer[1]&0xF0) >> 4;
 4e2:	89 81       	ldd	r24, Y+1	; 0x01
						rx_message1.data = G_plcRxBuffer[2];
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				}
				
				//SCM Mode
				case IDX_PCLTYPE_SCM_USM_CNTL : {
					//Sensor Control
					rx_message1.controlID = ((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1] & 0x0F) << 4);
 4e8:	88 81       	ld	r24, Y
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
					rx_message1.OperationMode =  (G_plcRxBuffer[1]&0xF0) >> 4;
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
					rx_message1.data = G_plcRxBuffer[2];
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
						//USMF_SensorOPMControl(rx_message1, &tx_message);
					}
					break;
				}
			}
			igs_wlgm_StatusInit();
 4f0:	be de       	rcall	.-644    	; 0x26e <_Z19igs_wlgm_StatusInitv>
 4f2:	31 cf       	rjmp	.-414    	; 0x356 <main+0x24>

000004f4 <__vector_16>:


// 동일한 값이 오면 인터럽트 루틴을 타지 못하기 때문에 타이머로 체크
// SCM 에서 1bit time length 만큼의 시간으로 overflow interrupt를 발생시켜 주어야 한다.
ISR(TIMER0_OVF_vect)
{
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	8f 93       	push	r24
	//PORTC ^= (1<<PC2);
	G_isSameValue = 1;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	TCNT0 = TIMER_INIT_VALUE;
 506:	16 bc       	out	0x26, r1	; 38
}
 508:	8f 91       	pop	r24
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <__vector_1>:

//Start : Falling Edge
ISR (INT0_vect)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	ef 93       	push	r30
 528:	ff 93       	push	r31
	TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 52a:	15 bc       	out	0x25, r1	; 37
	TCNT0 = TIMER_INIT_VALUE;
 52c:	16 bc       	out	0x26, r1	; 38
	TIFR0 &= ~(1<<TOV0);
 52e:	a8 98       	cbi	0x15, 0	; 21
 530:	8a e0       	ldi	r24, 0x0A	; 10
 532:	8a 95       	dec	r24
 534:	f1 f7       	brne	.-4      	; 0x532 <__vector_1+0x1e>
	//PORTC ^= (1<<PC2);
	_delay_us(30);
	if(!(MYPPNSR & (1<<PPS)))//if(G_RisingF == 0)
 536:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MYPPNSR>
 53a:	80 fd       	sbrc	r24, 0
 53c:	29 c0       	rjmp	.+82     	; 0x590 <__vector_1+0x7c>
	{
		MYPPNSR |= (1<<PNS);//G_FallingF = 1;
 53e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MYPPNSR>
 542:	82 60       	ori	r24, 0x02	; 2
 544:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 1 <<(G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3)) ;
 548:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <G_plcRxBitCnt>
 54c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <G_plcRxBitCnt>
 550:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <G_plcRxBitCnt>
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	f5 95       	asr	r31
 558:	e7 95       	ror	r30
 55a:	f5 95       	asr	r31
 55c:	e7 95       	ror	r30
 55e:	f5 95       	asr	r31
 560:	e7 95       	ror	r30
 562:	ed 5f       	subi	r30, 0xFD	; 253
 564:	fe 4f       	sbci	r31, 0xFE	; 254
 566:	30 81       	ld	r19, Z
 568:	98 7f       	andi	r25, 0xF8	; 248
 56a:	29 1b       	sub	r18, r25
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <__vector_1+0x62>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	2a 95       	dec	r18
 578:	e2 f7       	brpl	.-8      	; 0x572 <__vector_1+0x5e>
 57a:	83 2b       	or	r24, r19
 57c:	80 83       	st	Z, r24
		G_preBitValue = 1;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <G_preBitValue>
		G_plcRxBitCnt++;
 584:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 588:	8f 5f       	subi	r24, 0xFF	; 255
 58a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <G_plcRxBitCnt>
 58e:	1d c0       	rjmp	.+58     	; 0x5ca <__vector_1+0xb6>
	}
	else
	{
		MYPPNSR &= ~(1<<PNS);//G_FallingF = 0;
 590:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MYPPNSR>
 594:	8d 7f       	andi	r24, 0xFD	; 253
 596:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 0 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 59a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 59e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 5a2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <G_plcRxBitCnt>
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	f5 95       	asr	r31
 5aa:	e7 95       	ror	r30
 5ac:	f5 95       	asr	r31
 5ae:	e7 95       	ror	r30
 5b0:	f5 95       	asr	r31
 5b2:	e7 95       	ror	r30
 5b4:	ed 5f       	subi	r30, 0xFD	; 253
 5b6:	fe 4f       	sbci	r31, 0xFE	; 254
 5b8:	80 81       	ld	r24, Z
 5ba:	80 83       	st	Z, r24
		G_preBitValue = 0;
 5bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <G_preBitValue>
		G_plcRxBitCnt++;
 5c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 5c4:	8f 5f       	subi	r24, 0xFF	; 255
 5c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <G_plcRxBitCnt>
	}
	
	//동일한 값이 오면 인터럽트 루틴을 타지 못하기 때문에 타이머로 체크
	
	TCCR0B = (0<<CS02) | (0<<CS01) | (1<<CS00);
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	85 bd       	out	0x25, r24	; 37
	TCNT0 = TIMER_INIT_VALUE;
 5ce:	16 bc       	out	0x26, r1	; 38
	TIFR0 = (1<<TOV0);
 5d0:	85 bb       	out	0x15, r24	; 21
	

	EIFR  = (1<<INTF0) |(1<<INTF1);
 5d2:	83 e0       	ldi	r24, 0x03	; 3
 5d4:	8c bb       	out	0x1c, r24	; 28
}
 5d6:	ff 91       	pop	r31
 5d8:	ef 91       	pop	r30
 5da:	9f 91       	pop	r25
 5dc:	8f 91       	pop	r24
 5de:	3f 91       	pop	r19
 5e0:	2f 91       	pop	r18
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <__vector_2>:

//Start : Rising Edge
ISR (INT1_vect)
{
 5ec:	1f 92       	push	r1
 5ee:	0f 92       	push	r0
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	0f 92       	push	r0
 5f4:	11 24       	eor	r1, r1
 5f6:	2f 93       	push	r18
 5f8:	3f 93       	push	r19
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
	TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 602:	15 bc       	out	0x25, r1	; 37
	TCNT0 = TIMER_INIT_VALUE;
 604:	16 bc       	out	0x26, r1	; 38
	TIFR0 &= ~(1<<TOV0);
 606:	a8 98       	cbi	0x15, 0	; 21
 608:	8a e0       	ldi	r24, 0x0A	; 10
 60a:	8a 95       	dec	r24
 60c:	f1 f7       	brne	.-4      	; 0x60a <__vector_2+0x1e>
	//PORTB ^= (1<<PB0);
	_delay_us(30);
	if(!(MYPPNSR & (1<<PNS)))//if(G_FallingF == 0)
 60e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MYPPNSR>
 612:	81 fd       	sbrc	r24, 1
 614:	29 c0       	rjmp	.+82     	; 0x668 <__vector_2+0x7c>
	{
		MYPPNSR |= (1<<PPS);//G_RisingF = 1;
 616:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MYPPNSR>
 61a:	81 60       	ori	r24, 0x01	; 1
 61c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 1 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 620:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <G_plcRxBitCnt>
 624:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <G_plcRxBitCnt>
 628:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <G_plcRxBitCnt>
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	f5 95       	asr	r31
 630:	e7 95       	ror	r30
 632:	f5 95       	asr	r31
 634:	e7 95       	ror	r30
 636:	f5 95       	asr	r31
 638:	e7 95       	ror	r30
 63a:	ed 5f       	subi	r30, 0xFD	; 253
 63c:	fe 4f       	sbci	r31, 0xFE	; 254
 63e:	30 81       	ld	r19, Z
 640:	98 7f       	andi	r25, 0xF8	; 248
 642:	29 1b       	sub	r18, r25
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <__vector_2+0x62>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	2a 95       	dec	r18
 650:	e2 f7       	brpl	.-8      	; 0x64a <__vector_2+0x5e>
 652:	83 2b       	or	r24, r19
 654:	80 83       	st	Z, r24
		G_preBitValue = 1;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <G_preBitValue>
		G_plcRxBitCnt++;
 65c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 660:	8f 5f       	subi	r24, 0xFF	; 255
 662:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <G_plcRxBitCnt>
 666:	1d c0       	rjmp	.+58     	; 0x6a2 <__vector_2+0xb6>
	}
	else
	{
		MYPPNSR &= ~(1<<PPS);//G_RisingF = 0;
 668:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MYPPNSR>
 66c:	8e 7f       	andi	r24, 0xFE	; 254
 66e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 0 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 672:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 676:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 67a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <G_plcRxBitCnt>
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	f5 95       	asr	r31
 682:	e7 95       	ror	r30
 684:	f5 95       	asr	r31
 686:	e7 95       	ror	r30
 688:	f5 95       	asr	r31
 68a:	e7 95       	ror	r30
 68c:	ed 5f       	subi	r30, 0xFD	; 253
 68e:	fe 4f       	sbci	r31, 0xFE	; 254
 690:	80 81       	ld	r24, Z
 692:	80 83       	st	Z, r24
		G_preBitValue = 0;
 694:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <G_preBitValue>
		G_plcRxBitCnt++;
 698:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
 69c:	8f 5f       	subi	r24, 0xFF	; 255
 69e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <G_plcRxBitCnt>
	}
	
	TCCR0B = (0<<CS02) | (0<<CS01) | (1<<CS00);
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	85 bd       	out	0x25, r24	; 37
	TCNT0 = TIMER_INIT_VALUE;
 6a6:	16 bc       	out	0x26, r1	; 38
	TIFR0 = (1<<TOV0);
 6a8:	85 bb       	out	0x15, r24	; 21
	

	EIFR  = (1<<INTF0) |(1<<INTF1);
 6aa:	83 e0       	ldi	r24, 0x03	; 3
 6ac:	8c bb       	out	0x1c, r24	; 28
}
 6ae:	ff 91       	pop	r31
 6b0:	ef 91       	pop	r30
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	3f 91       	pop	r19
 6b8:	2f 91       	pop	r18
 6ba:	0f 90       	pop	r0
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	0f 90       	pop	r0
 6c0:	1f 90       	pop	r1
 6c2:	18 95       	reti

000006c4 <eeprom_read_byte>:
 6c4:	f9 99       	sbic	0x1f, 1	; 31
 6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <eeprom_read_byte>
 6c8:	12 bc       	out	0x22, r1	; 34
 6ca:	81 bd       	out	0x21, r24	; 33
 6cc:	f8 9a       	sbi	0x1f, 0	; 31
 6ce:	99 27       	eor	r25, r25
 6d0:	80 b5       	in	r24, 0x20	; 32
 6d2:	08 95       	ret

000006d4 <eeprom_write_byte>:
 6d4:	26 2f       	mov	r18, r22

000006d6 <eeprom_write_r18>:
 6d6:	f9 99       	sbic	0x1f, 1	; 31
 6d8:	fe cf       	rjmp	.-4      	; 0x6d6 <eeprom_write_r18>
 6da:	1f ba       	out	0x1f, r1	; 31
 6dc:	12 bc       	out	0x22, r1	; 34
 6de:	81 bd       	out	0x21, r24	; 33
 6e0:	20 bd       	out	0x20, r18	; 32
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	fa 9a       	sbi	0x1f, 2	; 31
 6e8:	f9 9a       	sbi	0x1f, 1	; 31
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	08 95       	ret

000006f0 <_exit>:
 6f0:	f8 94       	cli

000006f2 <__stop_program>:
 6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <__stop_program>
