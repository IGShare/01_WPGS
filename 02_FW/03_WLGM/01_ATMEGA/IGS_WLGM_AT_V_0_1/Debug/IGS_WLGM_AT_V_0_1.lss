
IGS_WLGM_AT_V_0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009f  00800100  00800100  00000a12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000a88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b73  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a6  00000000  00000000  000026c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cff  00000000  00000000  00002f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088f  00000000  00000000  00003e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ff  00000000  00000000  000046df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000058de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	dd c3       	rjmp	.+1978   	; 0x7be <__vector_1>
   4:	48 c4       	rjmp	.+2192   	; 0x896 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	be c3       	rjmp	.+1916   	; 0x79e <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	39 c2       	rjmp	.+1138   	; 0x498 <__vector_18>
  26:	f8 c1       	rjmp	.+1008   	; 0x418 <__vector_19>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	af 39       	cpi	r26, 0x9F	; 159
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	6c d2       	rcall	.+1240   	; 0x52a <main>
  52:	a3 c4       	rjmp	.+2374   	; 0x99a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z18igs_wlgm_port_initv>:
	/* LED POSITION
	*  D27 D26 D21 D20 D25
	*  D24 D23 D29 D28 D22 
	*/
	
	DDRB = (0<<DDB7)|(0<<DDB6)|(0<<DDB5)|(0<<DDB4)|(0<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
  56:	87 e0       	ldi	r24, 0x07	; 7
  58:	84 b9       	out	0x04, r24	; 4
	DDRC =			 (0<<DDC6)|(1<<DDC5)|(1<<DDC4)|(1<<DDC3)|(1<<DDC2)|(1<<DDC1)|(1<<DDC0);
  5a:	8f e3       	ldi	r24, 0x3F	; 63
  5c:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(0<<DDD4)|(0<<DDD3)|(0<<DDD2)|(0<<DDD1)|(0<<DDD0);
  5e:	80 ee       	ldi	r24, 0xE0	; 224
  60:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0x00;
  62:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
  64:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
  66:	1b b8       	out	0x0b, r1	; 11
  68:	08 95       	ret

0000006a <_Z22igs_wlgm_led_port_testv>:
}

void igs_wlgm_led_port_test()
{
  6a:	82 e0       	ldi	r24, 0x02	; 2
  6c:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	for(i=0; i<2; i++){
		//Status LED Test (ON)
		PORTD &= ~(1<<PORTD7);_delay_ms(100);
  6e:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	e7 ea       	ldi	r30, 0xA7	; 167
  72:	f1 e6       	ldi	r31, 0x61	; 97
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <_Z22igs_wlgm_led_port_testv+0xa>
  78:	00 c0       	rjmp	.+0      	; 0x7a <_Z22igs_wlgm_led_port_testv+0x10>
  7a:	00 00       	nop
		PORTD &= ~(1<<PORTD6);_delay_ms(100);
  7c:	5e 98       	cbi	0x0b, 6	; 11
  7e:	e7 ea       	ldi	r30, 0xA7	; 167
  80:	f1 e6       	ldi	r31, 0x61	; 97
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <_Z22igs_wlgm_led_port_testv+0x18>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_Z22igs_wlgm_led_port_testv+0x1e>
  88:	00 00       	nop
		PORTB &= ~(1<<PORTB1);_delay_ms(100);
  8a:	29 98       	cbi	0x05, 1	; 5
  8c:	e7 ea       	ldi	r30, 0xA7	; 167
  8e:	f1 e6       	ldi	r31, 0x61	; 97
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z22igs_wlgm_led_port_testv+0x26>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_Z22igs_wlgm_led_port_testv+0x2c>
  96:	00 00       	nop
		PORTB &= ~(1<<PORTB0);_delay_ms(100);
  98:	28 98       	cbi	0x05, 0	; 5
  9a:	e7 ea       	ldi	r30, 0xA7	; 167
  9c:	f1 e6       	ldi	r31, 0x61	; 97
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <_Z22igs_wlgm_led_port_testv+0x34>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_Z22igs_wlgm_led_port_testv+0x3a>
  a4:	00 00       	nop
		PORTD &= ~(1<<PORTD5);_delay_ms(100);
  a6:	5d 98       	cbi	0x0b, 5	; 11
  a8:	e7 ea       	ldi	r30, 0xA7	; 167
  aa:	f1 e6       	ldi	r31, 0x61	; 97
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <_Z22igs_wlgm_led_port_testv+0x42>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <_Z22igs_wlgm_led_port_testv+0x48>
  b2:	00 00       	nop
		PORTB &= ~(1<<PORTB2);_delay_ms(100);
  b4:	2a 98       	cbi	0x05, 2	; 5
  b6:	e7 ea       	ldi	r30, 0xA7	; 167
  b8:	f1 e6       	ldi	r31, 0x61	; 97
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <_Z22igs_wlgm_led_port_testv+0x50>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_Z22igs_wlgm_led_port_testv+0x56>
  c0:	00 00       	nop
		PORTC &= ~(1<<PORTC0);_delay_ms(100);
  c2:	40 98       	cbi	0x08, 0	; 8
  c4:	e7 ea       	ldi	r30, 0xA7	; 167
  c6:	f1 e6       	ldi	r31, 0x61	; 97
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_Z22igs_wlgm_led_port_testv+0x5e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_Z22igs_wlgm_led_port_testv+0x64>
  ce:	00 00       	nop
		PORTC &= ~(1<<PORTC1);_delay_ms(100);
  d0:	41 98       	cbi	0x08, 1	; 8
  d2:	e7 ea       	ldi	r30, 0xA7	; 167
  d4:	f1 e6       	ldi	r31, 0x61	; 97
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_Z22igs_wlgm_led_port_testv+0x6c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z22igs_wlgm_led_port_testv+0x72>
  dc:	00 00       	nop
		PORTC &= ~(1<<PORTC4);_delay_ms(100);
  de:	44 98       	cbi	0x08, 4	; 8
  e0:	e7 ea       	ldi	r30, 0xA7	; 167
  e2:	f1 e6       	ldi	r31, 0x61	; 97
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <_Z22igs_wlgm_led_port_testv+0x7a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_Z22igs_wlgm_led_port_testv+0x80>
  ea:	00 00       	nop
		PORTC &= ~(1<<PORTC5);_delay_ms(100);
  ec:	45 98       	cbi	0x08, 5	; 8
  ee:	e7 ea       	ldi	r30, 0xA7	; 167
  f0:	f1 e6       	ldi	r31, 0x61	; 97
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <_Z22igs_wlgm_led_port_testv+0x88>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z22igs_wlgm_led_port_testv+0x8e>
  f8:	00 00       	nop
		
		//DP LED Test (GREEN OFF, RED ON)
		PORTC &= ~(1<<PORTC2);_delay_ms(100);
  fa:	42 98       	cbi	0x08, 2	; 8
  fc:	e7 ea       	ldi	r30, 0xA7	; 167
  fe:	f1 e6       	ldi	r31, 0x61	; 97
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <_Z22igs_wlgm_led_port_testv+0x96>
 104:	00 c0       	rjmp	.+0      	; 0x106 <_Z22igs_wlgm_led_port_testv+0x9c>
 106:	00 00       	nop
		PORTC |= (1<<PORTC3);_delay_ms(100);
 108:	43 9a       	sbi	0x08, 3	; 8
 10a:	e7 ea       	ldi	r30, 0xA7	; 167
 10c:	f1 e6       	ldi	r31, 0x61	; 97
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z22igs_wlgm_led_port_testv+0xa4>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_Z22igs_wlgm_led_port_testv+0xaa>
 114:	00 00       	nop
		
		//Status LED Test (OFF)
		PORTD |= (1<<PORTD7);_delay_ms(100);
 116:	5f 9a       	sbi	0x0b, 7	; 11
 118:	e7 ea       	ldi	r30, 0xA7	; 167
 11a:	f1 e6       	ldi	r31, 0x61	; 97
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <_Z22igs_wlgm_led_port_testv+0xb2>
 120:	00 c0       	rjmp	.+0      	; 0x122 <_Z22igs_wlgm_led_port_testv+0xb8>
 122:	00 00       	nop
		PORTD |= (1<<PORTD6);_delay_ms(100);
 124:	5e 9a       	sbi	0x0b, 6	; 11
 126:	e7 ea       	ldi	r30, 0xA7	; 167
 128:	f1 e6       	ldi	r31, 0x61	; 97
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <_Z22igs_wlgm_led_port_testv+0xc0>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_Z22igs_wlgm_led_port_testv+0xc6>
 130:	00 00       	nop
		PORTB |= (1<<PORTB1);_delay_ms(100);
 132:	29 9a       	sbi	0x05, 1	; 5
 134:	e7 ea       	ldi	r30, 0xA7	; 167
 136:	f1 e6       	ldi	r31, 0x61	; 97
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <_Z22igs_wlgm_led_port_testv+0xce>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <_Z22igs_wlgm_led_port_testv+0xd4>
 13e:	00 00       	nop
		PORTB |= (1<<PORTB0);_delay_ms(100);
 140:	28 9a       	sbi	0x05, 0	; 5
 142:	e7 ea       	ldi	r30, 0xA7	; 167
 144:	f1 e6       	ldi	r31, 0x61	; 97
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <_Z22igs_wlgm_led_port_testv+0xdc>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <_Z22igs_wlgm_led_port_testv+0xe2>
 14c:	00 00       	nop
		PORTD |= (1<<PORTD5);_delay_ms(100);
 14e:	5d 9a       	sbi	0x0b, 5	; 11
 150:	e7 ea       	ldi	r30, 0xA7	; 167
 152:	f1 e6       	ldi	r31, 0x61	; 97
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <_Z22igs_wlgm_led_port_testv+0xea>
 158:	00 c0       	rjmp	.+0      	; 0x15a <_Z22igs_wlgm_led_port_testv+0xf0>
 15a:	00 00       	nop
		PORTB |= (1<<PORTB2);_delay_ms(100);
 15c:	2a 9a       	sbi	0x05, 2	; 5
 15e:	e7 ea       	ldi	r30, 0xA7	; 167
 160:	f1 e6       	ldi	r31, 0x61	; 97
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <_Z22igs_wlgm_led_port_testv+0xf8>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_Z22igs_wlgm_led_port_testv+0xfe>
 168:	00 00       	nop
		PORTC |= (1<<PORTC0);_delay_ms(100);
 16a:	40 9a       	sbi	0x08, 0	; 8
 16c:	e7 ea       	ldi	r30, 0xA7	; 167
 16e:	f1 e6       	ldi	r31, 0x61	; 97
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <_Z22igs_wlgm_led_port_testv+0x106>
 174:	00 c0       	rjmp	.+0      	; 0x176 <_Z22igs_wlgm_led_port_testv+0x10c>
 176:	00 00       	nop
		PORTC |= (1<<PORTC1);_delay_ms(100);
 178:	41 9a       	sbi	0x08, 1	; 8
 17a:	e7 ea       	ldi	r30, 0xA7	; 167
 17c:	f1 e6       	ldi	r31, 0x61	; 97
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <_Z22igs_wlgm_led_port_testv+0x114>
 182:	00 c0       	rjmp	.+0      	; 0x184 <_Z22igs_wlgm_led_port_testv+0x11a>
 184:	00 00       	nop
		PORTC |= (1<<PORTC4);_delay_ms(100);
 186:	44 9a       	sbi	0x08, 4	; 8
 188:	e7 ea       	ldi	r30, 0xA7	; 167
 18a:	f1 e6       	ldi	r31, 0x61	; 97
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <_Z22igs_wlgm_led_port_testv+0x122>
 190:	00 c0       	rjmp	.+0      	; 0x192 <_Z22igs_wlgm_led_port_testv+0x128>
 192:	00 00       	nop
		PORTC |= (1<<PORTC5);_delay_ms(100);
 194:	45 9a       	sbi	0x08, 5	; 8
 196:	e7 ea       	ldi	r30, 0xA7	; 167
 198:	f1 e6       	ldi	r31, 0x61	; 97
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <_Z22igs_wlgm_led_port_testv+0x130>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_Z22igs_wlgm_led_port_testv+0x136>
 1a0:	00 00       	nop
		
		//DP LED Test (GREEN ON, RED OFF)
		PORTC |= (1<<PORTC2);_delay_ms(100);
 1a2:	42 9a       	sbi	0x08, 2	; 8
 1a4:	e7 ea       	ldi	r30, 0xA7	; 167
 1a6:	f1 e6       	ldi	r31, 0x61	; 97
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <_Z22igs_wlgm_led_port_testv+0x13e>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_Z22igs_wlgm_led_port_testv+0x144>
 1ae:	00 00       	nop
		PORTC &= ~(1<<PORTC3);_delay_ms(100);
 1b0:	43 98       	cbi	0x08, 3	; 8
 1b2:	e7 ea       	ldi	r30, 0xA7	; 167
 1b4:	f1 e6       	ldi	r31, 0x61	; 97
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <_Z22igs_wlgm_led_port_testv+0x14c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <_Z22igs_wlgm_led_port_testv+0x152>
 1bc:	00 00       	nop
 1be:	01 97       	sbiw	r24, 0x01	; 1
}

void igs_wlgm_led_port_test()
{
	int i;
	for(i=0; i<2; i++){
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <_Z22igs_wlgm_led_port_testv+0x15a>
 1c2:	55 cf       	rjmp	.-342    	; 0x6e <_Z22igs_wlgm_led_port_testv+0x4>
		//DP LED Test (GREEN ON, RED OFF)
		PORTC |= (1<<PORTC2);_delay_ms(100);
		PORTC &= ~(1<<PORTC3);_delay_ms(100);
	}
	
		PORTD |= (1<<PORTD7);_delay_ms(100);
 1c4:	5f 9a       	sbi	0x0b, 7	; 11
 1c6:	87 ea       	ldi	r24, 0xA7	; 167
 1c8:	91 e6       	ldi	r25, 0x61	; 97
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <_Z22igs_wlgm_led_port_testv+0x160>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_Z22igs_wlgm_led_port_testv+0x166>
 1d0:	00 00       	nop
		PORTD |= (1<<PORTD6);_delay_ms(100);
 1d2:	5e 9a       	sbi	0x0b, 6	; 11
 1d4:	e7 ea       	ldi	r30, 0xA7	; 167
 1d6:	f1 e6       	ldi	r31, 0x61	; 97
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <_Z22igs_wlgm_led_port_testv+0x16e>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <_Z22igs_wlgm_led_port_testv+0x174>
 1de:	00 00       	nop
		PORTB |= (1<<PORTB1);_delay_ms(100);
 1e0:	29 9a       	sbi	0x05, 1	; 5
 1e2:	87 ea       	ldi	r24, 0xA7	; 167
 1e4:	91 e6       	ldi	r25, 0x61	; 97
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <_Z22igs_wlgm_led_port_testv+0x17c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_Z22igs_wlgm_led_port_testv+0x182>
 1ec:	00 00       	nop
		PORTB |= (1<<PORTB0);_delay_ms(100);
 1ee:	28 9a       	sbi	0x05, 0	; 5
 1f0:	e7 ea       	ldi	r30, 0xA7	; 167
 1f2:	f1 e6       	ldi	r31, 0x61	; 97
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <_Z22igs_wlgm_led_port_testv+0x18a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_Z22igs_wlgm_led_port_testv+0x190>
 1fa:	00 00       	nop
		PORTD |= (1<<PORTD5);_delay_ms(100);
 1fc:	5d 9a       	sbi	0x0b, 5	; 11
 1fe:	87 ea       	ldi	r24, 0xA7	; 167
 200:	91 e6       	ldi	r25, 0x61	; 97
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <_Z22igs_wlgm_led_port_testv+0x198>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_Z22igs_wlgm_led_port_testv+0x19e>
 208:	00 00       	nop
		PORTB |= (1<<PORTB2);_delay_ms(100);
 20a:	2a 9a       	sbi	0x05, 2	; 5
 20c:	e7 ea       	ldi	r30, 0xA7	; 167
 20e:	f1 e6       	ldi	r31, 0x61	; 97
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <_Z22igs_wlgm_led_port_testv+0x1a6>
 214:	00 c0       	rjmp	.+0      	; 0x216 <_Z22igs_wlgm_led_port_testv+0x1ac>
 216:	00 00       	nop
		PORTC |= (1<<PORTC0);_delay_ms(100);
 218:	40 9a       	sbi	0x08, 0	; 8
 21a:	87 ea       	ldi	r24, 0xA7	; 167
 21c:	91 e6       	ldi	r25, 0x61	; 97
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <_Z22igs_wlgm_led_port_testv+0x1b4>
 222:	00 c0       	rjmp	.+0      	; 0x224 <_Z22igs_wlgm_led_port_testv+0x1ba>
 224:	00 00       	nop
		PORTC |= (1<<PORTC1);_delay_ms(100);
 226:	41 9a       	sbi	0x08, 1	; 8
 228:	e7 ea       	ldi	r30, 0xA7	; 167
 22a:	f1 e6       	ldi	r31, 0x61	; 97
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <_Z22igs_wlgm_led_port_testv+0x1c2>
 230:	00 c0       	rjmp	.+0      	; 0x232 <_Z22igs_wlgm_led_port_testv+0x1c8>
 232:	00 00       	nop
		PORTC |= (1<<PORTC4);_delay_ms(100);
 234:	44 9a       	sbi	0x08, 4	; 8
 236:	87 ea       	ldi	r24, 0xA7	; 167
 238:	91 e6       	ldi	r25, 0x61	; 97
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <_Z22igs_wlgm_led_port_testv+0x1d0>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <_Z22igs_wlgm_led_port_testv+0x1d6>
 240:	00 00       	nop
		PORTC |= (1<<PORTC5);_delay_ms(100);
 242:	45 9a       	sbi	0x08, 5	; 8
 244:	e7 ea       	ldi	r30, 0xA7	; 167
 246:	f1 e6       	ldi	r31, 0x61	; 97
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <_Z22igs_wlgm_led_port_testv+0x1de>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <_Z22igs_wlgm_led_port_testv+0x1e4>
 24e:	00 00       	nop
		
		PORTC &= ~(1<<PORTC2);_delay_ms(100);
 250:	42 98       	cbi	0x08, 2	; 8
 252:	87 ea       	ldi	r24, 0xA7	; 167
 254:	91 e6       	ldi	r25, 0x61	; 97
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <_Z22igs_wlgm_led_port_testv+0x1ec>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <_Z22igs_wlgm_led_port_testv+0x1f2>
 25c:	00 00       	nop
		PORTC &= ~(1<<PORTC3);_delay_ms(100);
 25e:	43 98       	cbi	0x08, 3	; 8
 260:	e7 ea       	ldi	r30, 0xA7	; 167
 262:	f1 e6       	ldi	r31, 0x61	; 97
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <_Z22igs_wlgm_led_port_testv+0x1fa>
 268:	00 c0       	rjmp	.+0      	; 0x26a <_Z22igs_wlgm_led_port_testv+0x200>
 26a:	00 00       	nop
 26c:	08 95       	ret

0000026e <_Z19igs_wlgm_StatusInitv>:
}

void igs_wlgm_StatusInit()
{

	G_plcRxBitCnt		= 0;
 26e:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <G_plcRxBitCnt>
	MYPPNSR				= 0;
 272:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <MYPPNSR>
	
	G_plcRxBuffer[0]	= 0;
 276:	ed e8       	ldi	r30, 0x8D	; 141
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	10 82       	st	Z, r1
	G_plcRxBuffer[1]	= 0;
 27c:	11 82       	std	Z+1, r1	; 0x01
	G_plcRxBuffer[2]	= 0;
 27e:	12 82       	std	Z+2, r1	; 0x02
	G_plcRxBuffer[3]	= 0;
 280:	13 82       	std	Z+3, r1	; 0x03
	G_plcRxBuffer[4]	= 0;
 282:	14 82       	std	Z+4, r1	; 0x04
	G_plcRxBuffer[5]	= 0;
 284:	15 82       	std	Z+5, r1	; 0x05
 286:	08 95       	ret

00000288 <_Z30igs_wlgm_ExternalInterruptInitv>:
}

void igs_wlgm_ExternalInterruptInit()
{
	EICRA  = (0 << ISC00);
 288:	e9 e6       	ldi	r30, 0x69	; 105
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	10 82       	st	Z, r1
	EICRA |= (1 << ISC01);    // set INT0 to trigger on Falling EDge
 28e:	80 81       	ld	r24, Z
 290:	82 60       	ori	r24, 0x02	; 2
 292:	80 83       	st	Z, r24
	EICRA |= (1 << ISC10);
 294:	80 81       	ld	r24, Z
 296:	84 60       	ori	r24, 0x04	; 4
 298:	80 83       	st	Z, r24
	EICRA |= (1 << ISC11);    // set INT1 to trigger on Rising Edge
 29a:	80 81       	ld	r24, Z
 29c:	88 60       	ori	r24, 0x08	; 8
 29e:	80 83       	st	Z, r24
	
	EIMSK = (1 << INT0) | (1 << INT1);   // Turns on INT0 and INT1
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	8d bb       	out	0x1d, r24	; 29
 2a4:	08 95       	ret

000002a6 <_Z22igs_wlgm_TimerZeroInitv>:
}

void igs_wlgm_TimerZeroInit()
{
	TCCR0A = (0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
 2a6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (0<<FOC0A) | (0<<FOC0B) | (0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
 2a8:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = (1<<TOIE0);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	TIFR0 = (1<<TOV0);
 2b0:	85 bb       	out	0x15, r24	; 21
 2b2:	08 95       	ret

000002b4 <_Z25igs_wlgm_ReadSerialNumberv>:
	//TCNT0 = TIMER_INIT_VALUE;
}

uint32_t igs_wlgm_ReadSerialNumber()
{
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
	uint8_t serialtmp[3];
	uint32_t serial;
	
	//eeprom_write_byte((uint8_t *)8, 0);
	
	serialtmp[0] = eeprom_read_byte((uint8_t *)4);
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	57 d3       	rcall	.+1710   	; 0x96e <eeprom_read_byte>
 2c0:	08 2f       	mov	r16, r24
	serialtmp[1] = eeprom_read_byte((uint8_t *)5);
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	53 d3       	rcall	.+1702   	; 0x96e <eeprom_read_byte>
 2c8:	c8 2f       	mov	r28, r24
	serialtmp[2] = eeprom_read_byte((uint8_t *)6);
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	4f d3       	rcall	.+1694   	; 0x96e <eeprom_read_byte>
	
	serial = ((uint32_t)serialtmp[0] << 16) + ((uint32_t)serialtmp[1] << 8) + ((uint32_t)serialtmp[2]);
	return serial;
 2d0:	40 2f       	mov	r20, r16
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	9a 01       	movw	r18, r20
 2da:	11 27       	eor	r17, r17
 2dc:	00 27       	eor	r16, r16
 2de:	4c 2f       	mov	r20, r28
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	76 2f       	mov	r23, r22
 2e8:	65 2f       	mov	r22, r21
 2ea:	54 2f       	mov	r21, r20
 2ec:	44 27       	eor	r20, r20
 2ee:	40 0f       	add	r20, r16
 2f0:	51 1f       	adc	r21, r17
 2f2:	62 1f       	adc	r22, r18
 2f4:	73 1f       	adc	r23, r19
 2f6:	8a 01       	movw	r16, r20
 2f8:	9b 01       	movw	r18, r22
 2fa:	08 0f       	add	r16, r24
 2fc:	11 1d       	adc	r17, r1
 2fe:	21 1d       	adc	r18, r1
 300:	31 1d       	adc	r19, r1
 302:	c9 01       	movw	r24, r18
 304:	b8 01       	movw	r22, r16
}
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret

0000030e <_Z37igs_wlgm_SetControlIDCompleteResponsev>:
	uint8_t mask = 0x01;
	uint8_t plcTxData=IDX_OPM_SET_ID_COMPLETE;
	
	
	//Start Bit
	PLC_TX_ONE_BIT(0,PLC_TX_ONEBIT_TIME_US,mask);
 30e:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	89 ef       	ldi	r24, 0xF9	; 249
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x6>
 318:	00 c0       	rjmp	.+0      	; 0x31a <_Z37igs_wlgm_SetControlIDCompleteResponsev+0xc>
 31a:	00 00       	nop

	PLC_TX_ONE_BIT(0,PLC_TX_ONEBIT_TIME_US,plcTxData);
 31c:	5c 9a       	sbi	0x0b, 4	; 11
 31e:	89 ef       	ldi	r24, 0xF9	; 249
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x14>
 326:	00 c0       	rjmp	.+0      	; 0x328 <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x1a>
 328:	00 00       	nop
	PLC_TX_ONE_BIT(1,PLC_TX_ONEBIT_TIME_US,plcTxData);
 32a:	5c 9a       	sbi	0x0b, 4	; 11
 32c:	89 ef       	ldi	r24, 0xF9	; 249
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x22>
 334:	00 c0       	rjmp	.+0      	; 0x336 <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x28>
 336:	00 00       	nop
	PLC_TX_ONE_BIT(2,PLC_TX_ONEBIT_TIME_US,plcTxData);
 338:	5c 9a       	sbi	0x0b, 4	; 11
 33a:	89 ef       	ldi	r24, 0xF9	; 249
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x30>
 342:	00 c0       	rjmp	.+0      	; 0x344 <_Z37igs_wlgm_SetControlIDCompleteResponsev+0x36>
 344:	00 00       	nop
	
	PORTD &= ~(1<<PORTD4);
 346:	5c 98       	cbi	0x0b, 4	; 11
 348:	08 95       	ret

0000034a <_Z18igs_wlgm_uart_initv>:

#define BAUD							9600
#define MYUBRR							F_CPU/16/BAUD-1

void igs_wlgm_uart_init(void)
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	69 97       	sbiw	r28, 0x19	; 25
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
	uint32_t ubrr = MYUBRR;
	UBRR0H = (uint8_t)(ubrr >>8);
 35e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UBRR0L = (uint8_t)(ubrr);
 362:	85 e0       	ldi	r24, 0x05	; 5
 364:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	
	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 368:	e1 ec       	ldi	r30, 0xC1	; 193
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	88 e9       	ldi	r24, 0x98	; 152
 36e:	80 83       	st	Z, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) | (0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |	(0 << UMSEL00);
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>

	UCSR0B |=  (1 << UDRIE0);
 376:	80 81       	ld	r24, Z
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	80 83       	st	Z, r24
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
 37c:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
 37e:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
 380:	80 e4       	ldi	r24, 0x40	; 64
 382:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
 384:	2a e4       	ldi	r18, 0x4A	; 74
 386:	31 e0       	ldi	r19, 0x01	; 1
 388:	39 8f       	std	Y+25, r19	; 0x19
 38a:	28 8f       	std	Y+24, r18	; 0x18
	return ring;
 38c:	95 e0       	ldi	r25, 0x05	; 5
 38e:	fe 01       	movw	r30, r28
 390:	75 96       	adiw	r30, 0x15	; 21
 392:	de 01       	movw	r26, r28
 394:	11 96       	adiw	r26, 0x01	; 1
 396:	01 90       	ld	r0, Z+
 398:	0d 92       	st	X+, r0
 39a:	9a 95       	dec	r25
 39c:	e1 f7       	brne	.-8      	; 0x396 <_Z18igs_wlgm_uart_initv+0x4c>
 39e:	95 e0       	ldi	r25, 0x05	; 5
 3a0:	fe 01       	movw	r30, r28
 3a2:	31 96       	adiw	r30, 0x01	; 1
 3a4:	de 01       	movw	r26, r28
 3a6:	16 96       	adiw	r26, 0x06	; 6
 3a8:	01 90       	ld	r0, Z+
 3aa:	0d 92       	st	X+, r0
 3ac:	9a 95       	dec	r25
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <_Z18igs_wlgm_uart_initv+0x5e>

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
 3b0:	95 e0       	ldi	r25, 0x05	; 5
 3b2:	fe 01       	movw	r30, r28
 3b4:	36 96       	adiw	r30, 0x06	; 6
 3b6:	a5 e0       	ldi	r26, 0x05	; 5
 3b8:	b1 e0       	ldi	r27, 0x01	; 1
 3ba:	01 90       	ld	r0, Z+
 3bc:	0d 92       	st	X+, r0
 3be:	9a 95       	dec	r25
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <_Z18igs_wlgm_uart_initv+0x70>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
 3c2:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
 3c4:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
 3c6:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
 3c8:	8a e0       	ldi	r24, 0x0A	; 10
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	99 8f       	std	Y+25, r25	; 0x19
 3ce:	88 8f       	std	Y+24, r24	; 0x18
	return ring;
 3d0:	85 e0       	ldi	r24, 0x05	; 5
 3d2:	fe 01       	movw	r30, r28
 3d4:	75 96       	adiw	r30, 0x15	; 21
 3d6:	de 01       	movw	r26, r28
 3d8:	1b 96       	adiw	r26, 0x0b	; 11
 3da:	01 90       	ld	r0, Z+
 3dc:	0d 92       	st	X+, r0
 3de:	8a 95       	dec	r24
 3e0:	e1 f7       	brne	.-8      	; 0x3da <_Z18igs_wlgm_uart_initv+0x90>
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	fe 01       	movw	r30, r28
 3e6:	3b 96       	adiw	r30, 0x0b	; 11
 3e8:	de 01       	movw	r26, r28
 3ea:	50 96       	adiw	r26, 0x10	; 16
 3ec:	01 90       	ld	r0, Z+
 3ee:	0d 92       	st	X+, r0
 3f0:	8a 95       	dec	r24
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <_Z18igs_wlgm_uart_initv+0xa2>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
 3f4:	85 e0       	ldi	r24, 0x05	; 5
 3f6:	fe 01       	movw	r30, r28
 3f8:	70 96       	adiw	r30, 0x10	; 16
 3fa:	a0 e0       	ldi	r26, 0x00	; 0
 3fc:	b1 e0       	ldi	r27, 0x01	; 1
 3fe:	01 90       	ld	r0, Z+
 400:	0d 92       	st	X+, r0
 402:	8a 95       	dec	r24
 404:	e1 f7       	brne	.-8      	; 0x3fe <_Z18igs_wlgm_uart_initv+0xb4>
}
 406:	69 96       	adiw	r28, 0x19	; 25
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(USART_UDRE_vect)
{
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 436:	e5 e0       	ldi	r30, 0x05	; 5
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	91 81       	ldd	r25, Z+1	; 0x01
 43c:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out)) {
 43e:	98 17       	cp	r25, r24
 440:	b9 f0       	breq	.+46     	; 0x470 <__vector_19+0x58>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	//Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
 442:	81 81       	ldd	r24, Z+1	; 0x01
 444:	a3 81       	ldd	r26, Z+3	; 0x03
 446:	b4 81       	ldd	r27, Z+4	; 0x04
 448:	a8 0f       	add	r26, r24
 44a:	b1 1d       	adc	r27, r1
 44c:	3c 91       	ld	r19, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
 44e:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 450:	42 2f       	mov	r20, r18
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	82 81       	ldd	r24, Z+2	; 0x02
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	48 17       	cp	r20, r24
 45c:	59 07       	cpc	r21, r25
 45e:	11 f0       	breq	.+4      	; 0x464 <__vector_19+0x4c>
 460:	2f 5f       	subi	r18, 0xFF	; 255
 462:	01 c0       	rjmp	.+2      	; 0x466 <__vector_19+0x4e>
 464:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	//Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
 466:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <ring_buffer_out+0x1>
		UDR0 = ring_buffer_get(&ring_buffer_out);
 46a:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__vector_19+0x62>
	}
	else {
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
 470:	e1 ec       	ldi	r30, 0xC1	; 193
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	8f 7d       	andi	r24, 0xDF	; 223
 478:	80 83       	st	Z, r24
	}
}
 47a:	ff 91       	pop	r31
 47c:	ef 91       	pop	r30
 47e:	bf 91       	pop	r27
 480:	af 91       	pop	r26
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(USART_RX_vect)
{
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	2f 93       	push	r18
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
	uint8_t data;
	ring_buffer_put(&ring_buffer_in, UDR0);
 4b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	//Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
 4b8:	e0 e0       	ldi	r30, 0x00	; 0
 4ba:	f1 e0       	ldi	r31, 0x01	; 1
 4bc:	90 81       	ld	r25, Z
 4be:	a3 81       	ldd	r26, Z+3	; 0x03
 4c0:	b4 81       	ldd	r27, Z+4	; 0x04
 4c2:	a9 0f       	add	r26, r25
 4c4:	b1 1d       	adc	r27, r1
 4c6:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 4c8:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 4ca:	42 2f       	mov	r20, r18
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	82 81       	ldd	r24, Z+2	; 0x02
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	48 17       	cp	r20, r24
 4d6:	59 07       	cpc	r21, r25
 4d8:	11 f0       	breq	.+4      	; 0x4de <__vector_18+0x46>
 4da:	2f 5f       	subi	r18, 0xFF	; 255
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <__vector_18+0x48>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	//Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 4e0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	data = UDR0;
 4e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	if(data == 97){
 4e8:	81 36       	cpi	r24, 0x61	; 97
 4ea:	49 f4       	brne	.+18     	; 0x4fe <__vector_18+0x66>
		 PORTD &= ~(1<<PORTD6);
 4ec:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ee:	87 ea       	ldi	r24, 0xA7	; 167
 4f0:	91 e6       	ldi	r25, 0x61	; 97
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__vector_18+0x5a>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__vector_18+0x60>
 4f8:	00 00       	nop
		 _delay_ms(100);
		 PORTD |= (1<<PORTD6);
 4fa:	5e 9a       	sbi	0x0b, 6	; 11
 4fc:	08 c0       	rjmp	.+16     	; 0x50e <__vector_18+0x76>
		 
	}
	else{
		
		PORTD &= ~(1<<PORTD7);
 4fe:	5f 98       	cbi	0x0b, 7	; 11
 500:	87 ea       	ldi	r24, 0xA7	; 167
 502:	91 e6       	ldi	r25, 0x61	; 97
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <__vector_18+0x6c>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__vector_18+0x72>
 50a:	00 00       	nop
		_delay_ms(100);
		PORTD |= (1<<PORTD7);
 50c:	5f 9a       	sbi	0x0b, 7	; 11
	}
		
	
}
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	bf 91       	pop	r27
 514:	af 91       	pop	r26
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	5f 91       	pop	r21
 51c:	4f 91       	pop	r20
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <main>:
	struct TxPacket tx_message;
	char test_string[] = "CCM";
	uint8_t tbuf[64] = {0,};
	uint8_t rbuf[64] = {0,};
	uint8_t cnt;
	igs_wlgm_port_init();
 52a:	95 dd       	rcall	.-1238   	; 0x56 <_Z18igs_wlgm_port_initv>
	igs_wlgm_led_port_test();
 52c:	9e dd       	rcall	.-1220   	; 0x6a <_Z22igs_wlgm_led_port_testv>
	igs_wlgm_ExternalInterruptInit();
 52e:	ac de       	rcall	.-680    	; 0x288 <_Z30igs_wlgm_ExternalInterruptInitv>
	igs_wlgm_TimerZeroInit();
 530:	ba de       	rcall	.-652    	; 0x2a6 <_Z22igs_wlgm_TimerZeroInitv>
	igs_wlgm_StatusInit();
 532:	9d de       	rcall	.-710    	; 0x26e <_Z19igs_wlgm_StatusInitv>
	igs_wlgm_uart_init();
 534:	0a df       	rcall	.-492    	; 0x34a <_Z18igs_wlgm_uart_initv>
	
	mySerialNumber = igs_wlgm_ReadSerialNumber();
 536:	be de       	rcall	.-644    	; 0x2b4 <_Z25igs_wlgm_ReadSerialNumberv>
 538:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <mySerialNumber>
 53c:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <mySerialNumber+0x1>
 540:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <mySerialNumber+0x2>
 544:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <mySerialNumber+0x3>

	
	sei();
 548:	78 94       	sei
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 54a:	c0 e0       	ldi	r28, 0x00	; 0
 54c:	d1 e0       	ldi	r29, 0x01	; 1
 54e:	05 e0       	ldi	r16, 0x05	; 5
 550:	11 e0       	ldi	r17, 0x01	; 1
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) {
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 552:	0f 2e       	mov	r0, r31
 554:	f1 ec       	ldi	r31, 0xC1	; 193
 556:	ef 2e       	mov	r14, r31
 558:	f1 2c       	mov	r15, r1
 55a:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 55c:	b1 2c       	mov	r11, r1
			TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
			
			uint8_t packetType =0;
			struct TypeZeroPacket rx_message0;

			packetType = (G_plcRxBuffer[0] & 0x0F)>>1;
 55e:	0f 2e       	mov	r0, r31
 560:	fd e8       	ldi	r31, 0x8D	; 141
 562:	cf 2e       	mov	r12, r31
 564:	f1 e0       	ldi	r31, 0x01	; 1
 566:	df 2e       	mov	r13, r31
 568:	f0 2d       	mov	r31, r0
						else
						{
							MY_ID = EPR_ID;
						}
						
						SN_ReceiveSuccessFallingF = 1;
 56a:	99 24       	eor	r9, r9
 56c:	93 94       	inc	r9
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 56e:	99 81       	ldd	r25, Y+1	; 0x01
 570:	88 81       	ld	r24, Y
	//}

	while (1) 
    {

		while (!uart_char_waiting());
 572:	98 17       	cp	r25, r24
 574:	e1 f3       	breq	.-8      	; 0x56e <main+0x44>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	//Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	eb 81       	ldd	r30, Y+3	; 0x03
 57a:	fc 81       	ldd	r31, Y+4	; 0x04
 57c:	e8 0f       	add	r30, r24
 57e:	f1 1d       	adc	r31, r1
 580:	30 81       	ld	r19, Z
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
 582:	29 81       	ldd	r18, Y+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 584:	42 2f       	mov	r20, r18
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	48 17       	cp	r20, r24
 590:	59 07       	cpc	r21, r25
 592:	11 f0       	breq	.+4      	; 0x598 <main+0x6e>
 594:	2f 5f       	subi	r18, 0xFF	; 255
 596:	01 c0       	rjmp	.+2      	; 0x59a <main+0x70>
 598:	2b 2d       	mov	r18, r11
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	//Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
 59a:	29 83       	std	Y+1, r18	; 0x01
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
 59c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 59e:	d8 01       	movw	r26, r16
 5a0:	11 96       	adiw	r26, 0x01	; 1
 5a2:	9c 91       	ld	r25, X
 5a4:	11 97       	sbiw	r26, 0x01	; 1
 5a6:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) {
 5a8:	98 13       	cpse	r25, r24
 5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <main+0x8a>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 5ac:	f7 01       	movw	r30, r14
 5ae:	80 81       	ld	r24, Z
 5b0:	80 62       	ori	r24, 0x20	; 32
 5b2:	80 83       	st	Z, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	//Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
 5b4:	d8 01       	movw	r26, r16
 5b6:	8c 91       	ld	r24, X
 5b8:	13 96       	adiw	r26, 0x03	; 3
 5ba:	ed 91       	ld	r30, X+
 5bc:	fc 91       	ld	r31, X
 5be:	14 97       	sbiw	r26, 0x04	; 4
 5c0:	e8 0f       	add	r30, r24
 5c2:	f1 1d       	adc	r31, r1
 5c4:	30 83       	st	Z, r19
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 5c6:	2c 91       	ld	r18, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 5c8:	42 2f       	mov	r20, r18
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	12 96       	adiw	r26, 0x02	; 2
 5ce:	8c 91       	ld	r24, X
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	48 17       	cp	r20, r24
 5d6:	59 07       	cpc	r21, r25
 5d8:	11 f0       	breq	.+4      	; 0x5de <main+0xb4>
 5da:	2f 5f       	subi	r18, 0xFF	; 255
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <main+0xb6>
 5de:	2b 2d       	mov	r18, r11
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	//Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 5e0:	f8 01       	movw	r30, r16
 5e2:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
 5e4:	78 94       	sei
		echoData = uart_getchar();
		uart_putchar(echoData);


		if(G_isSameValue == 1){
 5e6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <G_isSameValue>
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	19 f5       	brne	.+70     	; 0x634 <main+0x10a>
			//PORTB ^= (1<<PB1);
			G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= G_preBitValue << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 5ee:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <G_preBitValue>
 5f2:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <G_plcRxBitCnt>
 5f6:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <G_plcRxBitCnt>
 5fa:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <G_plcRxBitCnt>
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	f5 95       	asr	r31
 602:	e7 95       	ror	r30
 604:	f5 95       	asr	r31
 606:	e7 95       	ror	r30
 608:	f5 95       	asr	r31
 60a:	e7 95       	ror	r30
 60c:	e3 57       	subi	r30, 0x73	; 115
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	40 81       	ld	r20, Z
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	38 7f       	andi	r19, 0xF8	; 248
 616:	23 1b       	sub	r18, r19
 618:	02 c0       	rjmp	.+4      	; 0x61e <main+0xf4>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	2a 95       	dec	r18
 620:	e2 f7       	brpl	.-8      	; 0x61a <main+0xf0>
 622:	84 2b       	or	r24, r20
 624:	80 83       	st	Z, r24
			G_plcRxBitCnt++;
 626:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 62a:	8f 5f       	subi	r24, 0xFF	; 255
 62c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <G_plcRxBitCnt>
			G_isSameValue = 0;
 630:	b0 92 8a 01 	sts	0x018A, r11	; 0x80018a <G_isSameValue>
		}
		if(G_plcRxBitCnt>=PLC_RX_MAXBIT){
 634:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 638:	84 32       	cpi	r24, 0x24	; 36
 63a:	08 f4       	brcc	.+2      	; 0x63e <main+0x114>
 63c:	98 cf       	rjmp	.-208    	; 0x56e <main+0x44>
			TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 63e:	15 bc       	out	0x25, r1	; 37
			
			uint8_t packetType =0;
			struct TypeZeroPacket rx_message0;

			packetType = (G_plcRxBuffer[0] & 0x0F)>>1;
 640:	d6 01       	movw	r26, r12
 642:	8c 91       	ld	r24, X
			
			switch(packetType)
 644:	8f 70       	andi	r24, 0x0F	; 15
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	96 95       	lsr	r25
 64a:	87 95       	ror	r24
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	91 05       	cpc	r25, r1
 650:	09 f4       	brne	.+2      	; 0x654 <main+0x12a>
 652:	8f c0       	rjmp	.+286    	; 0x772 <main+0x248>
 654:	1c f4       	brge	.+6      	; 0x65c <main+0x132>
 656:	89 2b       	or	r24, r25
 658:	b1 f0       	breq	.+44     	; 0x686 <main+0x15c>
 65a:	9f c0       	rjmp	.+318    	; 0x79a <main+0x270>
 65c:	84 30       	cpi	r24, 0x04	; 4
 65e:	91 05       	cpc	r25, r1
 660:	09 f4       	brne	.+2      	; 0x664 <main+0x13a>
 662:	96 c0       	rjmp	.+300    	; 0x790 <main+0x266>
 664:	07 97       	sbiw	r24, 0x07	; 7
 666:	09 f0       	breq	.+2      	; 0x66a <main+0x140>
 668:	98 c0       	rjmp	.+304    	; 0x79a <main+0x270>
			{
				
				// CCM Mode
				// USM Control
				case IDX_PCLTYPE_ADDR_SET_START :{
					if(SN_ReceiveSuccessFallingF != 1){
 66a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <SN_ReceiveSuccessFallingF>
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	09 f4       	brne	.+2      	; 0x674 <main+0x14a>
 672:	93 c0       	rjmp	.+294    	; 0x79a <main+0x270>
						PORTC = PORTC &= ~(1<<PORTC2);
 674:	88 b1       	in	r24, 0x08	; 8
 676:	8b 7f       	andi	r24, 0xFB	; 251
 678:	88 b9       	out	0x08, r24	; 8
 67a:	88 b9       	out	0x08, r24	; 8
						PORTC = PORTC &= ~(1<<PORTC3);
 67c:	88 b1       	in	r24, 0x08	; 8
 67e:	87 7f       	andi	r24, 0xF7	; 247
 680:	88 b9       	out	0x08, r24	; 8
 682:	88 b9       	out	0x08, r24	; 8
 684:	8a c0       	rjmp	.+276    	; 0x79a <main+0x270>
				}
				case IDX_PCLTYPE_CCM_USM_ADDR : {
					
					// Serial Number - Control ID Setting
					
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
 686:	f6 01       	movw	r30, r12
 688:	90 81       	ld	r25, Z
 68a:	21 81       	ldd	r18, Z+1	; 0x01
					+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8)
 68c:	e1 81       	ldd	r30, Z+1	; 0x01
 68e:	d6 01       	movw	r26, r12
 690:	12 96       	adiw	r26, 0x02	; 2
 692:	8c 91       	ld	r24, X
 694:	12 97       	sbiw	r26, 0x02	; 2
					+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
 696:	12 96       	adiw	r26, 0x02	; 2
 698:	6c 91       	ld	r22, X
 69a:	12 97       	sbiw	r26, 0x02	; 2
 69c:	13 96       	adiw	r26, 0x03	; 3
 69e:	7c 91       	ld	r23, X
 6a0:	b0 e1       	ldi	r27, 0x10	; 16
 6a2:	2b 9f       	mul	r18, r27
 6a4:	90 01       	movw	r18, r0
 6a6:	11 24       	eor	r1, r1
 6a8:	33 27       	eor	r19, r19
 6aa:	92 95       	swap	r25
 6ac:	9f 70       	andi	r25, 0x0F	; 15
 6ae:	29 2b       	or	r18, r25
 6b0:	29 01       	movw	r4, r18
 6b2:	33 0f       	add	r19, r19
 6b4:	66 08       	sbc	r6, r6
 6b6:	77 08       	sbc	r7, r7
 6b8:	32 01       	movw	r6, r4
 6ba:	55 24       	eor	r5, r5
 6bc:	44 24       	eor	r4, r4
 6be:	f0 e1       	ldi	r31, 0x10	; 16
 6c0:	8f 9f       	mul	r24, r31
 6c2:	c0 01       	movw	r24, r0
 6c4:	11 24       	eor	r1, r1
 6c6:	99 27       	eor	r25, r25
 6c8:	e2 95       	swap	r30
 6ca:	ef 70       	andi	r30, 0x0F	; 15
 6cc:	8e 2b       	or	r24, r30
 6ce:	09 2e       	mov	r0, r25
 6d0:	00 0c       	add	r0, r0
 6d2:	aa 0b       	sbc	r26, r26
 6d4:	bb 0b       	sbc	r27, r27
 6d6:	ba 2f       	mov	r27, r26
 6d8:	a9 2f       	mov	r26, r25
 6da:	98 2f       	mov	r25, r24
 6dc:	88 27       	eor	r24, r24
 6de:	84 0d       	add	r24, r4
 6e0:	95 1d       	adc	r25, r5
 6e2:	a6 1d       	adc	r26, r6
 6e4:	b7 1d       	adc	r27, r7
 6e6:	20 e1       	ldi	r18, 0x10	; 16
 6e8:	72 9f       	mul	r23, r18
 6ea:	a0 01       	movw	r20, r0
 6ec:	11 24       	eor	r1, r1
 6ee:	55 27       	eor	r21, r21
 6f0:	62 95       	swap	r22
 6f2:	6f 70       	andi	r22, 0x0F	; 15
 6f4:	46 2b       	or	r20, r22
 6f6:	05 2e       	mov	r0, r21
 6f8:	00 0c       	add	r0, r0
 6fa:	66 0b       	sbc	r22, r22
 6fc:	77 0b       	sbc	r23, r23
 6fe:	84 0f       	add	r24, r20
 700:	95 1f       	adc	r25, r21
 702:	a6 1f       	adc	r26, r22
 704:	b7 1f       	adc	r27, r23
 706:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <rxSerialNumber>
 70a:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <rxSerialNumber+0x1>
 70e:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <rxSerialNumber+0x2>
 712:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <rxSerialNumber+0x3>
					rx_message0.controlID		 = ((G_plcRxBuffer[3]&0xF0) >> 4) | ((G_plcRxBuffer[4]&0x0F) << 4);
 716:	f6 01       	movw	r30, r12
 718:	a3 80       	ldd	r10, Z+3	; 0x03
 71a:	24 81       	ldd	r18, Z+4	; 0x04
					
					if(rxSerialNumber == mySerialNumber)
 71c:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <mySerialNumber>
 720:	50 91 9b 01 	lds	r21, 0x019B	; 0x80019b <mySerialNumber+0x1>
 724:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <mySerialNumber+0x2>
 728:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <mySerialNumber+0x3>
 72c:	84 17       	cp	r24, r20
 72e:	95 07       	cpc	r25, r21
 730:	a6 07       	cpc	r26, r22
 732:	b7 07       	cpc	r27, r23
 734:	91 f5       	brne	.+100    	; 0x79a <main+0x270>
					// Serial Number - Control ID Setting
					
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
					+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8)
					+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
					rx_message0.controlID		 = ((G_plcRxBuffer[3]&0xF0) >> 4) | ((G_plcRxBuffer[4]&0x0F) << 4);
 736:	a6 94       	lsr	r10
 738:	a6 94       	lsr	r10
 73a:	a6 94       	lsr	r10
 73c:	a6 94       	lsr	r10
 73e:	f0 e1       	ldi	r31, 0x10	; 16
 740:	2f 9f       	mul	r18, r31
 742:	c0 01       	movw	r24, r0
 744:	11 24       	eor	r1, r1
 746:	a8 2a       	or	r10, r24
					
					if(rxSerialNumber == mySerialNumber)
					{
						PORTC |= (1<<PORTC2);
 748:	42 9a       	sbi	0x08, 2	; 8
						EPR_ID = eeprom_read_byte((uint8_t *)7);
 74a:	87 e0       	ldi	r24, 0x07	; 7
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0f d1       	rcall	.+542    	; 0x96e <eeprom_read_byte>
 750:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <EPR_ID>
						
						if(EPR_ID != rx_message0.controlID)
 754:	a8 16       	cp	r10, r24
 756:	39 f0       	breq	.+14     	; 0x766 <main+0x23c>
						{
							
							MY_ID = rx_message0.controlID;
 758:	a0 92 95 01 	sts	0x0195, r10	; 0x800195 <MY_ID>
							eeprom_write_byte((uint8_t *)7, rx_message0.controlID);
 75c:	6a 2d       	mov	r22, r10
 75e:	87 e0       	ldi	r24, 0x07	; 7
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0d d1       	rcall	.+538    	; 0x97e <eeprom_write_byte>
 764:	02 c0       	rjmp	.+4      	; 0x76a <main+0x240>
						}
						else
						{
							MY_ID = EPR_ID;
 766:	a0 92 95 01 	sts	0x0195, r10	; 0x800195 <MY_ID>
						}
						
						SN_ReceiveSuccessFallingF = 1;
 76a:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <SN_ReceiveSuccessFallingF>
						igs_wlgm_SetControlIDCompleteResponse();
 76e:	cf dd       	rcall	.-1122   	; 0x30e <_Z37igs_wlgm_SetControlIDCompleteResponsev>
 770:	14 c0       	rjmp	.+40     	; 0x79a <main+0x270>
					break;
				}
				case IDX_PCLTYPE_CCM_USM_CNTL : {
					// USM Control
					
					if( SN_ReceiveSuccessFallingF == 1)
 772:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <SN_ReceiveSuccessFallingF>
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	81 f4       	brne	.+32     	; 0x79a <main+0x270>
					{
						
						rx_message1.controlID = ((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1] & 0x0F) << 4);
 77a:	d6 01       	movw	r26, r12
 77c:	8c 91       	ld	r24, X
 77e:	11 96       	adiw	r26, 0x01	; 1
 780:	8c 91       	ld	r24, X
 782:	11 97       	sbiw	r26, 0x01	; 1
						rx_message1.OperationMode =  (G_plcRxBuffer[1]&0xF0) >> 4;
 784:	11 96       	adiw	r26, 0x01	; 1
 786:	8c 91       	ld	r24, X
 788:	11 97       	sbiw	r26, 0x01	; 1
						rx_message1.data = G_plcRxBuffer[2];
 78a:	12 96       	adiw	r26, 0x02	; 2
 78c:	8c 91       	ld	r24, X
 78e:	05 c0       	rjmp	.+10     	; 0x79a <main+0x270>
				}
				
				//SCM Mode
				case IDX_PCLTYPE_SCM_USM_CNTL : {
					//Sensor Control
					rx_message1.controlID = ((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1] & 0x0F) << 4);
 790:	f6 01       	movw	r30, r12
 792:	80 81       	ld	r24, Z
 794:	81 81       	ldd	r24, Z+1	; 0x01
					rx_message1.OperationMode =  (G_plcRxBuffer[1]&0xF0) >> 4;
 796:	81 81       	ldd	r24, Z+1	; 0x01
					rx_message1.data = G_plcRxBuffer[2];
 798:	82 81       	ldd	r24, Z+2	; 0x02
						//USMF_SensorOPMControl(rx_message1, &tx_message);
					}
					break;
				}
			}
			igs_wlgm_StatusInit();
 79a:	69 dd       	rcall	.-1326   	; 0x26e <_Z19igs_wlgm_StatusInitv>
 79c:	e8 ce       	rjmp	.-560    	; 0x56e <main+0x44>

0000079e <__vector_16>:


// 동일한 값이 오면 인터럽트 루틴을 타지 못하기 때문에 타이머로 체크
// SCM 에서 1bit time length 만큼의 시간으로 overflow interrupt를 발생시켜 주어야 한다.
ISR(TIMER0_OVF_vect)
{
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	8f 93       	push	r24
	//PORTC ^= (1<<PC2);
	G_isSameValue = 1;
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <G_isSameValue>
	TCNT0 = TIMER_INIT_VALUE;
 7b0:	16 bc       	out	0x26, r1	; 38
}
 7b2:	8f 91       	pop	r24
 7b4:	0f 90       	pop	r0
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	0f 90       	pop	r0
 7ba:	1f 90       	pop	r1
 7bc:	18 95       	reti

000007be <__vector_1>:

//Start : Falling Edge
ISR (INT0_vect)
{
 7be:	1f 92       	push	r1
 7c0:	0f 92       	push	r0
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	0f 92       	push	r0
 7c6:	11 24       	eor	r1, r1
 7c8:	2f 93       	push	r18
 7ca:	3f 93       	push	r19
 7cc:	8f 93       	push	r24
 7ce:	9f 93       	push	r25
 7d0:	ef 93       	push	r30
 7d2:	ff 93       	push	r31
	TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 7d4:	15 bc       	out	0x25, r1	; 37
	TCNT0 = TIMER_INIT_VALUE;
 7d6:	16 bc       	out	0x26, r1	; 38
	TIFR0 &= ~(1<<TOV0);
 7d8:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7da:	8a e0       	ldi	r24, 0x0A	; 10
 7dc:	8a 95       	dec	r24
 7de:	f1 f7       	brne	.-4      	; 0x7dc <__vector_1+0x1e>
	//PORTC ^= (1<<PC2);
	_delay_us(30);
	if(!(MYPPNSR & (1<<PPS)))//if(G_RisingF == 0)
 7e0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <MYPPNSR>
 7e4:	80 fd       	sbrc	r24, 0
 7e6:	29 c0       	rjmp	.+82     	; 0x83a <__vector_1+0x7c>
	{
		MYPPNSR |= (1<<PNS);//G_FallingF = 1;
 7e8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <MYPPNSR>
 7ec:	82 60       	ori	r24, 0x02	; 2
 7ee:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 1 <<(G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3)) ;
 7f2:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <G_plcRxBitCnt>
 7f6:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <G_plcRxBitCnt>
 7fa:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <G_plcRxBitCnt>
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	f5 95       	asr	r31
 802:	e7 95       	ror	r30
 804:	f5 95       	asr	r31
 806:	e7 95       	ror	r30
 808:	f5 95       	asr	r31
 80a:	e7 95       	ror	r30
 80c:	e3 57       	subi	r30, 0x73	; 115
 80e:	fe 4f       	sbci	r31, 0xFE	; 254
 810:	30 81       	ld	r19, Z
 812:	98 7f       	andi	r25, 0xF8	; 248
 814:	29 1b       	sub	r18, r25
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <__vector_1+0x62>
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	2a 95       	dec	r18
 822:	e2 f7       	brpl	.-8      	; 0x81c <__vector_1+0x5e>
 824:	83 2b       	or	r24, r19
 826:	80 83       	st	Z, r24
		G_preBitValue = 1;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <G_preBitValue>
		G_plcRxBitCnt++;
 82e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 832:	8f 5f       	subi	r24, 0xFF	; 255
 834:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <G_plcRxBitCnt>
 838:	1d c0       	rjmp	.+58     	; 0x874 <__vector_1+0xb6>
	}
	else
	{
		MYPPNSR &= ~(1<<PNS);//G_FallingF = 0;
 83a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <MYPPNSR>
 83e:	8d 7f       	andi	r24, 0xFD	; 253
 840:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 0 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 844:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 848:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 84c:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <G_plcRxBitCnt>
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	f5 95       	asr	r31
 854:	e7 95       	ror	r30
 856:	f5 95       	asr	r31
 858:	e7 95       	ror	r30
 85a:	f5 95       	asr	r31
 85c:	e7 95       	ror	r30
 85e:	e3 57       	subi	r30, 0x73	; 115
 860:	fe 4f       	sbci	r31, 0xFE	; 254
 862:	80 81       	ld	r24, Z
 864:	80 83       	st	Z, r24
		G_preBitValue = 0;
 866:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <G_preBitValue>
		G_plcRxBitCnt++;
 86a:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 86e:	8f 5f       	subi	r24, 0xFF	; 255
 870:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <G_plcRxBitCnt>
	}
	
	//동일한 값이 오면 인터럽트 루틴을 타지 못하기 때문에 타이머로 체크
	
	TCCR0B = (0<<CS02) | (0<<CS01) | (1<<CS00);
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	85 bd       	out	0x25, r24	; 37
	TCNT0 = TIMER_INIT_VALUE;
 878:	16 bc       	out	0x26, r1	; 38
	TIFR0 = (1<<TOV0);
 87a:	85 bb       	out	0x15, r24	; 21
	

	EIFR  = (1<<INTF0) |(1<<INTF1);
 87c:	83 e0       	ldi	r24, 0x03	; 3
 87e:	8c bb       	out	0x1c, r24	; 28
}
 880:	ff 91       	pop	r31
 882:	ef 91       	pop	r30
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	3f 91       	pop	r19
 88a:	2f 91       	pop	r18
 88c:	0f 90       	pop	r0
 88e:	0f be       	out	0x3f, r0	; 63
 890:	0f 90       	pop	r0
 892:	1f 90       	pop	r1
 894:	18 95       	reti

00000896 <__vector_2>:

//Start : Rising Edge
ISR (INT1_vect)
{
 896:	1f 92       	push	r1
 898:	0f 92       	push	r0
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	0f 92       	push	r0
 89e:	11 24       	eor	r1, r1
 8a0:	2f 93       	push	r18
 8a2:	3f 93       	push	r19
 8a4:	8f 93       	push	r24
 8a6:	9f 93       	push	r25
 8a8:	ef 93       	push	r30
 8aa:	ff 93       	push	r31
	TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 8ac:	15 bc       	out	0x25, r1	; 37
	TCNT0 = TIMER_INIT_VALUE;
 8ae:	16 bc       	out	0x26, r1	; 38
	TIFR0 &= ~(1<<TOV0);
 8b0:	a8 98       	cbi	0x15, 0	; 21
 8b2:	8a e0       	ldi	r24, 0x0A	; 10
 8b4:	8a 95       	dec	r24
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <__vector_2+0x1e>
	//PORTB ^= (1<<PB0);
	_delay_us(30);
	if(!(MYPPNSR & (1<<PNS)))//if(G_FallingF == 0)
 8b8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <MYPPNSR>
 8bc:	81 fd       	sbrc	r24, 1
 8be:	29 c0       	rjmp	.+82     	; 0x912 <__vector_2+0x7c>
	{
		MYPPNSR |= (1<<PPS);//G_RisingF = 1;
 8c0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <MYPPNSR>
 8c4:	81 60       	ori	r24, 0x01	; 1
 8c6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 1 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 8ca:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <G_plcRxBitCnt>
 8ce:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <G_plcRxBitCnt>
 8d2:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <G_plcRxBitCnt>
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	f5 95       	asr	r31
 8da:	e7 95       	ror	r30
 8dc:	f5 95       	asr	r31
 8de:	e7 95       	ror	r30
 8e0:	f5 95       	asr	r31
 8e2:	e7 95       	ror	r30
 8e4:	e3 57       	subi	r30, 0x73	; 115
 8e6:	fe 4f       	sbci	r31, 0xFE	; 254
 8e8:	30 81       	ld	r19, Z
 8ea:	98 7f       	andi	r25, 0xF8	; 248
 8ec:	29 1b       	sub	r18, r25
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__vector_2+0x62>
 8f4:	88 0f       	add	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	2a 95       	dec	r18
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__vector_2+0x5e>
 8fc:	83 2b       	or	r24, r19
 8fe:	80 83       	st	Z, r24
		G_preBitValue = 1;
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <G_preBitValue>
		G_plcRxBitCnt++;
 906:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 90a:	8f 5f       	subi	r24, 0xFF	; 255
 90c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <G_plcRxBitCnt>
 910:	1d c0       	rjmp	.+58     	; 0x94c <__vector_2+0xb6>
	}
	else
	{
		MYPPNSR &= ~(1<<PPS);//G_RisingF = 0;
 912:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <MYPPNSR>
 916:	8e 7f       	andi	r24, 0xFE	; 254
 918:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 0 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 91c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 920:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 924:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <G_plcRxBitCnt>
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	f5 95       	asr	r31
 92c:	e7 95       	ror	r30
 92e:	f5 95       	asr	r31
 930:	e7 95       	ror	r30
 932:	f5 95       	asr	r31
 934:	e7 95       	ror	r30
 936:	e3 57       	subi	r30, 0x73	; 115
 938:	fe 4f       	sbci	r31, 0xFE	; 254
 93a:	80 81       	ld	r24, Z
 93c:	80 83       	st	Z, r24
		G_preBitValue = 0;
 93e:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <G_preBitValue>
		G_plcRxBitCnt++;
 942:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <G_plcRxBitCnt>
 946:	8f 5f       	subi	r24, 0xFF	; 255
 948:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <G_plcRxBitCnt>
	}
	
	TCCR0B = (0<<CS02) | (0<<CS01) | (1<<CS00);
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	85 bd       	out	0x25, r24	; 37
	TCNT0 = TIMER_INIT_VALUE;
 950:	16 bc       	out	0x26, r1	; 38
	TIFR0 = (1<<TOV0);
 952:	85 bb       	out	0x15, r24	; 21
	

	EIFR  = (1<<INTF0) |(1<<INTF1);
 954:	83 e0       	ldi	r24, 0x03	; 3
 956:	8c bb       	out	0x1c, r24	; 28
}
 958:	ff 91       	pop	r31
 95a:	ef 91       	pop	r30
 95c:	9f 91       	pop	r25
 95e:	8f 91       	pop	r24
 960:	3f 91       	pop	r19
 962:	2f 91       	pop	r18
 964:	0f 90       	pop	r0
 966:	0f be       	out	0x3f, r0	; 63
 968:	0f 90       	pop	r0
 96a:	1f 90       	pop	r1
 96c:	18 95       	reti

0000096e <eeprom_read_byte>:
 96e:	f9 99       	sbic	0x1f, 1	; 31
 970:	fe cf       	rjmp	.-4      	; 0x96e <eeprom_read_byte>
 972:	12 bc       	out	0x22, r1	; 34
 974:	81 bd       	out	0x21, r24	; 33
 976:	f8 9a       	sbi	0x1f, 0	; 31
 978:	99 27       	eor	r25, r25
 97a:	80 b5       	in	r24, 0x20	; 32
 97c:	08 95       	ret

0000097e <eeprom_write_byte>:
 97e:	26 2f       	mov	r18, r22

00000980 <eeprom_write_r18>:
 980:	f9 99       	sbic	0x1f, 1	; 31
 982:	fe cf       	rjmp	.-4      	; 0x980 <eeprom_write_r18>
 984:	1f ba       	out	0x1f, r1	; 31
 986:	12 bc       	out	0x22, r1	; 34
 988:	81 bd       	out	0x21, r24	; 33
 98a:	20 bd       	out	0x20, r18	; 32
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	f8 94       	cli
 990:	fa 9a       	sbi	0x1f, 2	; 31
 992:	f9 9a       	sbi	0x1f, 1	; 31
 994:	0f be       	out	0x3f, r0	; 63
 996:	01 96       	adiw	r24, 0x01	; 1
 998:	08 95       	ret

0000099a <_exit>:
 99a:	f8 94       	cli

0000099c <__stop_program>:
 99c:	ff cf       	rjmp	.-2      	; 0x99c <__stop_program>
